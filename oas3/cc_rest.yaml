## Automatically generated.  Do not edit.
openapi: '3.1.0'

x-common-blocks:

  400badbody: &404BADBODY
    description: |
      The server could not parse the POST parameters.  There could be a syntax error in your JSON.

  acz_ignored: &ACZFIELDS
    in: query
    required: false
    schema:
      default: ['defaults']
      type: array
      items:
        type: string 
        enum: [href, id, name, shortName, description, division, commands, connectedController, doors, zoneCount, statusFlags, statusText, status, notes, updates]
  

  alz_ignored: &ALZFIELDS
    in: query
    required: false
    schema:
      type: array
      items:
        type: string
        enum: [href, id, name, shortName, description, division, commands, connectedController, statusFlags, status, notes, updates]

  409ch: &409CH
    description: |
      The cardholder is locked for editing by another operator.  The body of the response will
      tell you which operator is holding the lock.

  cardmobile: &CARDMOBILE
    number: Nick's mobile

    status:  {value: "active"}
    type: {"href": "https://localhost:8904/api/card_types/654"}
    from: 2017-01-01T00:00:00Z
    until: 2018-01-01T00:00:00Z
    invitation:
      email:: nick@example.com
      mobile: "02123456789"
      singleFactorOnly: true

  cardmobile2: &CARDMOBILE2
    number: Nick's other mobile

    status:  {value: "active"}
    type: {"href": "https://localhost:8904/api/card_types/654"}
    invitation:
      email:: nick@example.com
      mobile: "02198765432"
      singleFactorOnly: true

  contentSigningCert_ignored: &CSC
    type: string
    description: |
      This is required when creating a PIV or PIV-I card.  The API will reject your request if this is
      missing or not a Base64-encoded certificate, but it will not validate the certificate itself.

      This example is shortened to fit on screen.  Real certificates are at least a thousand
      characters.
    example: "MIIE[...]Kltk="

  cardAuthenticationCert_blah: &CAC
    type: string
    description: |
      This contains the CAK, which is necessary for the secure use of contactless cards.  It is
      not required for contact cards.

      Optional when creating a PIV or PIV-I card.  The API will reject your request if this is
      present and not a Base64-encoded certificate, but it will not validate the certificate itself.

    example: "MIIE[...]e5mE="

  pivAuthenticationCert_etc: &PAC
    type: string
    description: |
      This is required when creating a PIV or PIV-I card.  The API will reject your request if this is
      missing or not a Base64-encoded certificate, but it will not validate the certificate itself.
    example: "MIIE[...]wkrp"

  fingerprints_etc: &FINGERS
    type: string
    description: |
      If you send this when creating a card, it should be the cardholder's fingerprints contained in
      the card's Cardholder Fingerprints data object with the error detection code removed:  the
      whole CBEFF structure including the CBEFF_HEADER, CBEFF_BIOMETRIC_RECORD, and
      CBEFF_SIGNATURE_BLOCK components.  Refer to Section 9 of NIST Special Publication 800-76-2:
      Biometric Data Specification for Personal Identity Verification.

      It is optional.  The API will check that this is Base64, but will not verify that it is
      valid biometric data.

    example: "N7[...]Shpd="

######################################################################

  door_ignored: &DOORFIELDS
    in: query
    required: false
    schema:
      type: string
      enum: [href, id, name, shortName, description, division, commands, connectedController,
             entryAccessZone, exitAccessZone, statusFlags, statusText, status, notes, updates]

  eg_ignored: &ELEVATORGROUPALLFIELDS
    in: query
    required: false
    schema:
      type: string
      enum: [href, name, shortName, description, division, notes, elevatorSystem,
             elevatorGroupNumber, floorAccess, rearAccessEnabled, groundFloorNumber]

  eg_ignored2: &ELEVATORGROUPCARDHOLDERFIELDS
    in: query
    required: false
    schema: {type: string, enum: [href, name, description, division, floorAccess]}

  eventType_ignored: &EVENTTYPE
    type: object
    description: |
      ID and name of the event's or alarm's type.  There is a long list of them at
      [/events/groups](#operation--api-events-groups-get).

      Unlike the `type` field, this has the same format in an event as it does in an alarm.

      Added in 8.90.  Because it is a new field, it does not appear by default.  Ask for it using
      the `fields` parameter.

  fz_ignored: &FZFIELDS
    in: query
    required: false
    schema:
      type: string
      enum: [href, id, name, shortName, description, division, commands, connectedController, voltage,
             statusFlags, statusText, status, notes, updates]

  interlock_: &INTERLOCKFIELDS
    in: query
    required: false
    schema:
      type: string
      enum: [href, id, name, shortName, description, division, commands, connectedController,
             statusFlags, statusText, status, notes, updates]

  canon_ignored: &CANON
    type: string
    description: |
      An unchanging, alphanumeric, short, and hopefully descriptive identifier for the item type.

      The set of possible values will grow as time passes but the strings themselves, unless
      highlighted as temporary, will never change.  You can count on an access zone always having
      a canonical type name of 'accesszone', for example.

      Added in 9.00.

  notes_this_keyword_can_be_anything: &TYPE_NAME
    type: string
    example: "Cardholder"
    description: |
      A human-readable name of the item's type, suitable for display.

      This string is translated using the installation's language pack, and Gallagher
      reserves the right to change item type names in new versions, so you should not do
      anything with this string except show it to a person.

  locker_commands: &LOCKERCOMMANDS
    type: object
    description: |
      Overrideable items return one of these blocks if your operator has the right
      privilege and the locker is fit to be overridden.  It is a list of commands, each
      represented by a block containing an href that accepts a POST that will send an
      override to the locker, changing its state.
    properties:
      open:
        type: object
        properties:
          href:
            example: "https://localhost:8904/api/lockers/3456/open"
            description: |
              POST to this URL to send an open override to the locker.  The server will
              ignore the POST body.
            type: string
            format: url
      quarantine:
        type: object
        properties:
          href:
            example: "https://localhost:8904/api/lockers/3456/quarantine"
            description: |
              POST to this URL to send a quarantine override to the locker.  Do not send a
              body with the POST since some server versions use the same POST for
              `quarantineUntil`, which takes a time from the body.
            type: string
            format: url
      quarantineUntil:
        type: object
        properties:
          href:
            example: "https://localhost:8904/api/lockers/3456/quarantine"
            description: |
              POST to this URL to send an override to the locker that will quarantine it
              until a timestamp you send [in the body](rest.html#definition-Override-end-time).
            type: string
            format: url
      cancelQuarantine:
        type: object
        properties:
          href:
            example: "https://localhost:8904/api/lockers/3456/cancel_quarantine"
            description: |
              POST to this URL to send a quarantine cancel override to the locker.  The
              server will ignore the POST body.
            type: string
            format: url

  schedule_ignored: &SCHEDULEFIELDS
    in: query
    required: false
    schema:
      type: array
      items:
        type: string
        enum: [href, name, description, division, notes, type, dayCategories]

  ccontroller_name_irrelevant: &CONNECTEDCONTROLLER
    type: object
    description: |
      This block describes this item's hardware controller.

      Retrieving it takes a little more time than the other fields so only ask for it if you
      need it.

      Added in 8.50.
    properties:
      name: {type: string, example: "Third floor C6000"}
      href:
        type: string
        format: url
        example: "https://localhost:8904/api/items/508"
        description: |
          This is the REST API's identifier for the hardware controller.  It is only an
          identifier, not a usable URL, because there is no interface for hardware
          controllers.  GETting the URL will return a 404.
      id:
        type: string
        description: |
          An alphanumeric identifier, unique to the server.  This is the ID to use in the `source`
          parameter of [event filters](events.html#operation--api-events-get).
        example: "634"

  ccontroller_name_still_irrelevant: &CONNECTEDCONTROLLER_BRIEF
    type: object
    description: |
      This block describes this item's hardware controller.  Retrieving it takes a little more time
      than the other fields so only ask for it if you need it.

      Added in 8.50.

  id_ignored: &ID
    type: string
    description: |
      An alphanumeric identifier, unique to the server. This is the ID to use in the `source`
      parameter of [event filters](events.html#operation--api-events-get) and in the body of [status
      subscriptions](events.html#status-subscriptions).

  updates_ignored: &UPDATES
    type: object
    properties:
      href:
        type: string
        format: url
    description: |
      Follow the URL in the href inside this block to receive the item's current status, then follow
      the `next` link in the results to long poll for changes to that status.

      Update pages take the same `fields` parameter as summary and details pages.  You should use
      that to request all the fields you need in the update.

  notes_ignored: &NOTES
    type: string
    example: "Multi-line text..."
    description: |
      Because of their potential size, notes are only available by request.  Use the 'fields'
      parameter:

      `?fields=defaults,notes,...`

  sn_ignored: &SHORTNAME
    type: string
    maxLength: 16
    example: "Short text"
    description: |
      Short names are not displayed by default.  You must ask for them using the
      'fields' parameter:

      `?fields=shortname,...`.

  fds_ignored: &FIELDSDESC_SUM
    description: |
      This instructs the server to return only these fields in the search results.  The values you can list are the same as the field
      names in the details page.  Using this you can return everything on the summary page that you
      would find on the details page.  Separate values with commas.

      Use the special value `defaults` to return the fields you would have received had you not given
      the parameter at all.  Obviously only do that if you have more to add.

      Treat the string matches as case-sensitive.

      In v8.00 you will receive the href and internal ID even if you did not ask for them.  In 8.10
      and later you will only get what you asked for.  If you are going to send the `fields`
      parameter and need the href or ID, be explicit.
     
  fds_ignored2: &FIELDSDESC_SUM_810
    description: |
      This instructs the server to return only these fields in the search results.  The values you can list are the same as the field
      names in the details page.  Using this you can return everything on the summary page that you
      would find on the details page.  Separate values with commas.

      Use the special value `defaults` to return the fields you would have received had you not given
      the parameter at all.  Obviously only do that if you have more to add.

      Treat the string matches as case-sensitive.

  fdd_ignored: &FIELDSDESC_DET
    description: |
      This instructs the server to return only these fields in the details page instead of the default set.  The values you can list
      are the same as the field names you would see in the results.  Use it to cut back on the size
      of the response.  Separate values with commas.
     
      Treat the string matches as case-sensitive.
     
      In v8.00 you will receive the href and internal ID even if you did not ask for them.  In 8.10
      and later you will only get what you asked for.  If you are going to send the `fields`
      parameter and need the href or ID, be explicit.

  fdd_ignored2: &FIELDSDESC_DET_810
    description: |
      This instructs the server to return only these fields in the details page instead of the default set.  The values you can list
      are the same as the field names you would see in the results.  Use it to cut back on the size
      of the response.  Separate values with commas.
     
      Treat the string matches as case-sensitive.
     
  fdso_ignored: &FIELDSDESC_SUMONLY
    in: query
    required: false
    description: |
      This instructs the server to return only these fields in the search results.  The values you can list are the field names in the
      schema definitions in this document.  Separate values with commas.

      Use the special value `defaults` to return the fields you would have received had you not given
      the parameter at all.  Obviously only do that if you have more to add.

      Treat the string matches as case-sensitive.

  server: &SERVER
    readOnly: true
    type: string
    example: "ruatoria.satellite.int"
    description: |
      If you are running a multi-server installation and this item is homed on a remote server, this
      field will contain the name of that server.  This field is missing from items that are held on
      the machine that served the API request.  Added in 8.40.

      This is a read-only field.  The server will ignore it if you send it.

  statusflags_ignore: &STATUSFLAGS
    description: |
      The search and details pages do not return status flags by default, because an item's status
      is unknown until something is monitoring it.  If you want status flags on the search and
      details pages you must ask for them using the `fields` parameter, but our advice is to monitor
      them using [status subscriptions](events.html#status-subscriptions) if you are running 8.30 or
      later, otherwise the item's `updates` link.  See the [item status](#topic-Item-status) section
      for a full description of how to stay up to date with item status, and this item's
      introduction in the Operations section for what flags this item might return and what they
      mean.
    type: array
    items: { type: string, example: "controllerOffline" }

  statustext_: &STATUSTEXT
    description: |
      This field contains a translated multi-line human-readable description of the item's status.
      See the `statusFlags` field for notes on when you should ask for this field and how to keep it
      up to date.
    type: string
    example: "Controller offline."
  status_: &STATUS
    description: |
      This field contains the `statusText` field with line endings turned into spaces to make a
      one-line string.  See the `statusFlags` field for notes on when you should ask for this field
      and how to keep it up to date.
    type: string
    example: "Controller offline."

  update_fields_desc_ignored: &UPDFIELDS
    in: query
    required: false
    description: |
      This instructs the server to return these fields in the update, instead of the default set.  Note that removing fields also
      saves you from hearing about updates to those fields.

  update_fields_ignore: &UPDFIELDSENUM
    schema:
      type: string
      enum: [ status, statusText, statusFlags ]
     

  badge_beta: &BADGE_BETA
    - color: red
      label: Beta              
      name: Beta               

  badge_930: &BADGE_930
    - color: blue
      label: "9.30"            
      name: "9.30"
      
  macro_ignored: &MACROFIELDS
    in: query
    required: false
    schema:
      type: string
      enum: [href, id, name, description, division, commands, notes, updates]

  output_ignored: &OUTPUTFIELDS
    in: query
    required: false
    schema:
      type: string
      enum: [href, id, name, shortName, description, division, commands, connectedController, statusFlags, statusText, status, notes, updates]
###########################################################################################
###########################################################################################

      
  visit_name: &VISIT_NAME
    type: string
    example: "Visit hosted by Greta Ginger"
    description: |
      You can name a visit however you like.  Gallagher's in-house applications name them after
      their hosts.

      This field is mandatory when creating a visit.  No blank names allowed!
  v_desc: &VISIT_DESCRIPTION
    type: string
    example: "Initial scoping"
    description: |
      A visit's description is free text.  Gallagher's visitor management clients use it to
      store the visit's purpose.  You can change it at any time.

  v_recept: &VISIT_RECEPTION
    type: object
    description: |
      Every visit must have a reception.  It represents the location at which your visitors will
      first arrive.  Having one attached to a visit allows a kiosk at that location to hide
      visits for other receptions, revealing only those meant to start there.

      Your choice of reception also determines the rules with which the visit must comply, because
      those rules come from the visitor management configuration on the reception's division.
      
      Since every visit must have a reception, every POST that creates a visit must have one.  Once
      you have a visit in
      the system you can change its reception, but be aware that changing receptions might change
      the visit's division, which also might change the rules to which the visit must conform, and
      if any validation fails--and there is a lot of it--the PATCH will fail.

      The reception's name comes from the server in a GET, but you need not send it when creating or
      modifying a visit.  Command Centre only needs an href from you.

      Note that you must send the reception like it appears in the example, as an href inside a
      block called `reception`.  This will not work:

      `"reception": "https://localhost:8904/api/receptions/123"`

    example:
      name: "Main lobby"
      href: "https://localhost:8904/api/receptions/937"

  v_vt: &VISIT_VISITORTYPE
    type: object
    description: |
      Every visit must also have a visitor type.  It provides an access group for your visitors
      so that they can have personal data (remember that a cardholder must be in an access group
      before he or she can have a PDF), and it is an index into the visitor management
      configuration that governs things like the host (the cardholder who is responsible for
      your visitors) and the access groups that the server will give your visitors when they
      sign in.

      Use the href from the division's visitor management configuration, or the access group's
      href.  Both will work.

      You will receive the `accessGroup` object inside the `visitorType` block in a GET, but you
      needn't send it in a POST or PATCH.  The server can find the visitor type using only its href.

      Like the reception, when you send this to the server you must use the same form as the
      example, as an href inside a block called `visitorType`.  The href can be to an access group
      that you got from an [access group](#operation--api-access_groups-get) or the visitor
      management configuration on a
      [division](events.html#operation--api-divisions-_operation_-get).  For example, both of these
      will work as visitor type hrefs:

      `https://localhost:8904/api/access_groups/925` (taken from another visit, or a search of
      access groups)

      `https://localhost:8904/api/divisions/2/visitor_types/925` (taken from a division config)

      Your operator must have the privilege to view the access group, otherwise you will be told
      'Access denied when writing to one or more fields'.  The 'Modify Access Control' privilege
      is a good choice because it not only gives you a view of access groups but the ability to
      change cardholders' membership of them, which you need to add visitors and visitor groups.
    example:
      href: "https://localhost:8904/api/divisions/2/v_t/925"
      accessGroup:
        name: "Visitor group 1"
        href: "https://localhost:8904/api/access_groups/925"

  v_host: &VISIT_HOST
    type: object
    description: |
      A host is a cardholder, and every visit has one.  A visit's host is the person who
      (optionally) receives an email or SMS notification when visitors start signing in, and is
      responsible for them until they sign out again.

      A host must be a member of at least one of the visit's visitor type's host access groups
      at the time that you create or modify the visit.  To find out what those are, get the
      visitor management configuration for your reception's division (remembering that your
      visit's division is its reception's division).  That visitor type contains an array of
      access groups called `hostAccessGroups`.  Your host cardholder must be a member of one of
      those groups or their descendants.

      When you GET a visit the server will send you the host cardholder's name, but when you create
      a visit with a POST or modify one with a PATCH, you needn't send the name back.  Do so if you
      must, but it will not have an effect.
    example:
      name: "Ginger Greeter"
      href: "https://localhost:8904/api/cardholders/526"
  v_frontil: &VISIT_FROM_UNTIL
    type: string
    description: |
      Every visit has a validity period, defined by start and end times called `from` and
      `until`.

      Not only are they both required when you create a visit, but the server will insist that
      `until` is later than `from` and that you followed [the date-time rules](#dates-and-times).

      You can use short forms such as `2021-04-01+12` and the server will fill in zeroes for the
      parts you missed.  But because the end time must always be later than the start time you
      cannot use the same date for both start and end.  The server will treat them both like
      midnight, see that they are equal, and reject your API call.  So if you have a one-day visit,
      bump `until` by a day or pad it out until the evening.  `2021-04-01T23:59:59+12`, for example.
    format: date-time
    example: "1971-03-08T14:35:00Z"
  v_locn: &VISIT_LOCATION
    type: string
    description: Free text.  Entirely optional in the POST and PATCH.
    example: "Gather in Ginger's office"
  v_vags: &VISIT_AGS
    type: array
    description: |
      These are the access groups that the server will add your visitors to after they complete
      induction and sign in.  They define the access that your visitors have to the site, as
      they do for all cardholders.

      It is perfectly valid to have no visitor access groups on a visit - it just means that
      someone will be opening all your guests' doors for them.  That might be the kind of thing
      they are used to anyway.

      The visitor access groups on a visit must be a subset of the visitor access groups on the
      division's visitor type (in the list of visitor access groups in the visit's reception's
      division's visitor management configuration, in other words).

      When you send a visitor access group block to the server in a POST, just send an array of
      access group hrefs.  8.50 does not accept the same kind of visitor access group
      hrefs here that it sends, so this is one reason why you cannot copy a visit by POSTing back
      the JSON from a GET.

      When you send a visitor access group block in a PATCH to edit an existing visit, the server
      expects it to contain one or two arrays called `add` and `remove`.  The `add` array should
      contain access group hrefs, exactly as you would send when creating a visit.  The `remove`
      array can contain access group hrefs or the hrefs you received in the GET.  The PATCH example
      shows two hrefs trying to remove the same access group.

      Your operator must have a privilege such as 'Modify Access Control' that allows viewing
      the access groups and adding and removing cardholders to and from them, otherwise you will be
      told 'Access denied when writing to one or more fields'.

    example:
    - accessGroup:
        name: "Access group 22"
        href: "https://localhost:8904/api/access_groups/926"
  v_ors: &VISIT_ORS
    type: array
    description: |
      When the server sends this array to you, it contains two hrefs for each cardholder due to
      arrive in this visit.  The first, outside the `cardholder` block, is the URL you
      [PATCH](#operation--api-visits--id--visitors--visitorId--patch) to change the state of their visit (new in
      8.90).  The one inside the `cardholder` block is simply an href to the cardholder item.  You
      can use either href when removing visitors from a visit with a PATCH.

      The `status` block contains two fields.  `value` is a human-readable description of their
      state in the server's language.  `type` comes from a fixed enumeration.

      The `invitation` string is opaque:  please do not interpret it.

      Note that a visit with no visitors on it will come out of the API but will not appear in
      Gallagher's visitor management application.  Why clutter the screen if you're not expecting
      anybody, after all.

      When you send a visitor block to the server in a POST to create a visit, just send an array of
      hrefs to cardholders.  8.50 does not accept the same kind of visitor hrefs here
      that it sends, so this is the other reason you cannot copy a visit by POSTing back the JSON
      from a GET.  Don't bother sending a `status` block:  the server will ignore it and set all
      visitors to 'expected'.

      When you send a visitor block in a PATCH to edit an existing visit, the server expects it to
      contain an array called `add`, an array called `remove`, or both.  The `add` array should contain
      cardholder hrefs, exactly as you would send when creating a visit.  The `remove` array should
      contain either of the hrefs you received for the cardholder in the GET.  The PATCH example
      shows two hrefs removing the same cardholder.

      Your operator must have a privilege such as 'Modify Access Control' that allows both
      viewing the cardholders and changing their access groups memberships, otherwise you will
      be told 'Access denied when writing to one or more fields'.

    items:
      type: object
      properties:
        cardholder:
          description: |
            A block containing the name and cardholder href of the visitor.
        href:
          type: string
          format: url
          description: |
            An href unique to this cardholder on this visit.  You can PATCH it to change the
            visitor's state.

            New to 8.90.
        invitation:
          type: string
          description: |
            A blob of text which, when encoded into a QR code and presented to a Gallagher Visitor
            Management kiosk, allows the visitor to sign in.

            This does not appear unless you ask for it using the `fields` query parameter.
            Because it is inside the `visitors` block, name it `visitors.invitation` in the field list.
        status:
          type: object
          description: |
            The cardholder's status on this visit, in human-readable and machine-readable forms.

            Also new to 8.90.
          properties:
            value:
              type: string
              description: |
                A human-readable version of the visitor's status, varying with the version of
                Command Centre and the server's locale.
            type:
              type: string
              description: |
                The visitor's current state taken from a fixed list of strings.  New visitors have a
                starting state of 'expected'.
              enum:
                [expected, signingIn, signedIn, onSite, expectedBack, departed, cancelled ]
          

    example:
    - href: "https://localhost:8904/api/visits/941/visitors/940"
      cardholder:
        name: "Red Adair"
        href: "https://localhost:8904/api/cardholders/940"
      status:
        value: "Expected Back"
        type: "expectedBack"
      invitation:  "text to be encoded into a QR code for 940"
    - href: "https://localhost:8904/api/visits/941/visitors/9040"
      cardholder:
        name: "James Page"
        href: "https://localhost:8904/api/cardholders/9040"
      status:
        value: "On-Site"
        type: "onSite"
      invitation:  "text to be encoded into a QR code for 9040"
  

x-zzztagGroups:
  - name: Operations
    tags: [ Access Groups, Access Zones, Alarm Zones, Card types, Cardholder changes, Cardholders, Competencies, Day Categories, Lockers, Operator Groups, PDF definitions, Receptions, Redactions, Schedules, Visits ]
  - name: Schemas
    tags: [ Schema Definitions ]

components:

  examples:

    CardholderCardMobilePATCHExample:
      description: |
        This is an example of what you would send to add two mobile credentials to an existing cardholder.

        `type` is the only compulsory field.  It must contain an href to the card type of the new
        mobile credential.

        The so-called card 'number' on a mobile credential does not need to be numeric.

        The `status` block is optional.  Provide a field `value` inside it set to one of the valid
        starting states for the mobile credential.  If you omit it, the credential will start in the
        default state.

        `invitation` is a block containing fields that describe how Command Centre should set about
        registering the mobile device.

        If you specify `mobile` you must also supply `email`.  If you give neither, Command Centre
        will not send an invitation to the cardholder.

        `singleFactorOnly` defaults to false, which is the recommended setting.  See the [card
        detail](#definition-Cardholder-card) for more.

        ***TODO add division, compulsory***
        
      value:
        firstName: "Nick"
        cards:
          add:
            - <<: *CARDMOBILE
            - <<: *CARDMOBILE2

######################################################################
    CardholderCardMobilePOSTExample:
      description: |
        This is an example of what you would send to create a new cardholder with two mobile credentials.

        `type` is the only compulsory field in the `cards` blocks.  It must contain an href to the card
        type of the new mobile credential.

        The so-called card 'number' on a mobile credential does not need to be numeric.

        The `status` block is optional.  Provide a field `value` inside it set to one of the valid
        starting states for the mobile credential.  If you omit it, the credential will start in the
        default state.

        `invitation` is a block containing fields that describe how Command Centre should set about
        registering the mobile device.

        If you specify `mobile` you must also supply `email`.  If you give neither, Command Centre
        will not send an invitation to the cardholder.

        `singleFactorOnly` defaults to false, which is the recommended setting.  See the [card
        detail](#definition-Cardholder-card) for more.

        ***TODO add division, compulsory***

      value:
        firstName: "Nick"
        cards:
          - <<: *CARDMOBILE
          - <<: *CARDMOBILE2

######################################################################
    CardholderPATCHCardPhysicalExample:
      description: |
        This is a minimal object for giving a cardholder a new card, containing nothing more than
        the card type.  See the [card detail](#definition-Cardholder-card) for other fields you can
        (and probably should) use, such as the card's issue level and from/until dates.

        `type` is the only compulsory field in a new card. It must contain an href to the card type
        of the new card.

        We also set this cardholder's first name, just for the sake of illustration.

      value:
        firstName: "Nick"
        cards:
          add:
            - type:
                href: "https://localhost:8904/api/card_types/600"

######################################################################
    CardholderPOSTCardPhysicalExample:
      description: |
        This is a minimal object for creating a cardholder with one card, containing the only
        required field for a cardholder (a name) and the only required field for a card (the card
        type).  See the [card detail](#definition-Cardholder-card) for other fields you can use,
        such as the card's issue level and from/until dates.

        `type` is the only compulsory field in a new card. It must contain an href to the card type
        of the new card.

      value:
        firstName: "Nick"
        cards:
        - type:
            href: "https://localhost:8904/api/card_types/600"

######################################################################
    PIVCardCreateExample:
      description: |
        This example, when placed inside the `cards` array of a
        [POST](cardholders.html#operation--api-cardholders-post) or the `cards.add` array of a
        [PATCH](cardholders.html#operation--api-cardholders--id--patch), would create a PIV
        credential and assign it to the cardholder created by the POST or identified by the address of
        the PATCH.  Consult those methods for the JSON you need to wrap around this example.

        A PIV-I example would have a different style of FASC-N, and a card number to match.
      value:
        number:
          example: "47000256001337111234567890199991"
          type: string
          description: |
            Required.

            For a PIV card, this is the FASC-N.

            For a PIV-I card, this is the decimal representation of the GUID in the CHUID, and must
            not be the same as the FASC-N.

            The server ignores hyphens here, so you can send back the same number you received from a
            GET.
        status:
          description: |
            Optional, but when controlling physical access you should be explicit rather than relying
            on a default.  Set the `value` field inside it to either 'active' or 'disabled
            (manually)'.  Case insensitive.

            You will not be able to activate a card if its PIV status (inside the `pivdata` block)
            prevents it.
          type: object
          example: { value: active }
        type:
          description: |
            Required.  This should be the href of the built-in PIV/PIV-I card type, that your
            application found using the process [in the introduction](#finding-the-piv-card-type).
          example: {href: "https://localhost:8904/api/card_types/244"}
        pivData:
          description: |
            This block contains all the PIV-specific fields.  Everything outside this block, including
            the number, status, and type, is common to all types of Command Centre cards and credentials.
          $ref: '#/components/examples/PIVCardData'

  ######################################################################
    PIVCardUpdateExample:
      description: |
        This example, when placed inside `cards.update` array of a PATCH, would update a card.  The
        main cardholder API documentation shows where to send the PATCH and what else you can change
        with it.  This example only shows how to update the status (common to all credential types)
        and the PIV data.

        Specifically, the PIV status, because that is the only PIV-specific data you can change on a
        PIV card.  Everything else--the CHUID, certificates, and biometrics--are all fixed, once set.

        See the [PIV data schema](#definition-PIV-card-data) for when you should set the PIV status
        and what you can set it to.

      value:
        href:
          type: string
          format: url
          example: https://localhost:8904/api/cardholders/5398/cards/90e5d0d70
          description: |
            This is the href of the card you want to update, found in the `cards` array in the
            [cardholder detail](cardholders.html#definition-Cardholder-detail).
        status:
          description: |
            Optional.  If you omit both this and the PIV status, or omit this and set the PIV status
             to 'normal' or 'offline', the server will set this to 'active'.  Any other PIV status will
             cause the card to become inactive, regardless of what you put here.

            So you really only need to set this when you are changing the PIV status to 'normal' or
            'offline' but you want the card to remain disabled.  In that case, set `status.value` to
            'disabled (manually)'.
          type: object
          example: { value: "disabled (manually)" }
        pivData:
          description: |
            This can contain only one field when you are updating a PIV card, `pivStatus.type`.

            The [PIV card data schema](#definition-PIV-card-data) lists the values you can send.
          type: object
          example: {pivStatus: {type: "notChecked"}}

  ######################################################################
    PIVCardData:
      description: |
        This example, when placed inside one of the cards in the `cards` array of a POST or the
        `cards.add` array of a PATCH, would create a PIV card.  It contains all the PIV-specific
        fields on a credential.

        It is the same as the block you [receive from the API](#definition-PIV-card-GET) for an
        existing PIV card, minus `lastCheckTime`.

      value:
        chuid:
          description: |
            Required.  The FASC-N in the `chuid` block, and its relationship with the card number, is
            the only difference between PIV and PIV-I cards in Command Centre.
          $ref: '#/components/examples/CHUID'
        pivStatus:
          type: object

          description: |
            This PIV status is distinct from the card status, which is a different field outside the
            `pivData` block.

            It is optional.  If you omit it when creating a card, the card will be enabled with a
            status of "NotChecked", which is a perfectly valid operating status.  If Command Centre is
            doing periodic certificate validation, the status will eventually change (to 'normal', all
            going well).

            You should send this block only if you are doing your own certificate validation.  It must
            contain a field `type` set to one of these values, based on the result of your validation:

              - Normal
              - Offline
              - Revoked
              - Expired
              - CertInChainRevoked
              - CertInChainExpired
              - IssuerSigCertRevoked
              - IssuerSigCertExpired
              - NotTrusted
              - PolicyError
              - OtherError
              - NotChecked

            If you set it to any value except 'NotChecked, 'Normal', or 'Offline', Command Centre will consider the
            card invalid and deactivate it regardless of what you pass as the card status.  You, or
            Command Centre's periodic certificate validation, may validate the card again later.

          example: {type: Normal}
        contentSigningCert:
          <<: *CSC
        cardAuthenticationCert:
          <<: *CAC
        pivAuthenticationCert:
          <<: *PAC
        fingerprints:
          <<: *FINGERS

  ######################################################################
    CHUID:
      description: |
        This is an example CHUID block for a PIV card.  The only difference between this and a PIV-I
        card is the FASC-N.
      value:
        hash:
          type: string
          description: |
            This is the hash of the CHUID object, Base64-encoded.  For a 256-bit hash it
            should be 44 characters long including one `=` pad.  The API will reject a string that is
            not valid Base64, but it will not verify the hash.

            Required in versions up to 8.60.  Optional in 8.70 and later.
          example: "NSBvmBxA8zXz+dScJoYNLb96YMHEZXGghGirRJxWVhE="
        fascn:
          type: string
          description: |
            This is the FASC-N identifier.  You must supply it when creating a card.

            It must be the same as the card number on a PIV (not PIV-I) card.

            On a PIV-I card, it must not be the same as the card number (and for Federal PIV-I cards
            it will likely begin with fourteen nines).
          example: "47000256001337111234567890199991"
        orgIdentifier:
          type: string
          description: Optional.
          example: ""
        duns:
          type: string
          description: Optional.
          example: ""

######################################################################
    CardholderPOSTExample:
      description: |
        This is an example of a POST you could use to create a cardholder in a specific division and
        access group, with an access card, another cardholder as a supervisor, a competency, a student
        ID and a photo held in personal data fields, and two lockers.

        There are plenty more fields than shown in this example.  For a complete list please see the
        schema for the detailed [cardholder object](#definition-Cardholder-detail) that you receive
        from a cardholder href.

        In this example we are giving our new cardholder a disabled competency, set to enable in
        January 2019.

        The example shows that this cardholder will have cardholder 5398 performing role 5396.

        The example shows our cardholder receiving two lockers.

        The example shows our cardholder receiving a default floor for the first elevator group,
        with the Code Blue feature enabled in the second group.

      value:
        firstName: Algernon
        lastName: Boothroyd
        shortName: "Quartermaster"
        authorised: true
        division: { href: "https://localhost:8904/api/divisions/5387" }
        "@email": "user@sample.com"
        "@headshot": "/9j/4A...=="
        personalDataDefinitions: [ { "@email": { notifications: true } } ]
        cards:
        - type: {href: "https://localhost:8904/api/card_types/600"}
          pin: "153624"
        - type: {href: "https://localhost:8904/api/card_types/654"}
          number: "Nick's mobile"
          invitation:
            email: "nick@example.com"
            mobile: "02123456789"
            singleFactorOnly: true
        accessGroups:
          - accessGroup:
              href: "https://localhost:8904/api/access_groups/352"
            from: "2019-01-01"
        operatorGroups:
          - operatorGroup:
              href: "https://localhost:8904/api/operator_groups/523"
        competencies:
          - competency:
             href: "https://localhost:8904/api/competencies/2354"
            enablement: "2019-01-01"
        notes: ""
        notifications:
          enabled: true
          from: "2017-10-10T14:59:00Z"
          until: "2017-10-17T14:59:00Z"
        relationships:
          - role:
              href: "https://localhost:8904/api/roles/5396"
            cardholder:
              href: "https://localhost:8904/api/cardholders/5398"
        lockers:
          - locker:
              href:  "https://localhost:8904/api/lockers/3456"
          - locker:
              href:  "https://localhost:8904/api/lockers/3457"

        elevatorGroups:
          - elevatorGroup:
              href:  "https://localhost:8904/api/elevator_groups/635"
            accessZone:
              href:  "https://localhost:8904/api/access_zones/637"
          - elevatorGroup:
              href:  "https://localhost:8904/api/elevator_groups/639"
            enableCodeBlueFeatures: true

  parameters:

    alarmid:
      name: "id"
      in: path
      required: true
      schema:
        type: string
      description: |
        An internal identifier.  Do not insert this into your request yourself.  Instead you should
        get the URL of this call from other results: the alarm summary or details, in this case.

    alarmfields:
      name: fields
      in: query
      required: false
      schema:
        type: string
        enum: [ href, id, time, message, source, type, eventType, priority, state, active, division,
                notePresets, view, comment, acknowledgeWithComment, acknowledge, processWithComment, process,
                details, history, instruction, cardholder, event ]

      description: |
        Sets the fields you want in your results.  Separate fields with commas.

        New to 8.40.

    
    eventfields:
      name: fields
      in: query
      schema:
        type: string
        enum: [ defaults, details, cardholder.pdf_*, href, id, serverDisplayName, time, message, occurrences,
                priority, alarm, operator, source, group, type, eventType, division, cardholder, entryAccessZone,
                exitAccessZone, door, accessGroup, card, modifiedItem, lastOccurrenceTime, previous, next, updates, location]
    
    

    description:
      name: "description"
      in: query
      required: false
      schema: {type: string}
      description: |
        Limits the returned items to those with a description that matches this string.  By default it
        is a substring match; surround it with double quotes `"..."` for an exact match.  A `_` will
        match any single character, and a `%` will match any substring.  With or without quotes,
        having either of these wildcards in the string will anchor it at both ends as though you had
        surrounded it with `"`.

        The search is always case-insensitive.  Results are undefined if you search for the empty
        string (`description=` or `description=""`).

        Search parameters are ANDed together.

    directDivision:
      name: "directDivision"
      in: query
      required: false
      schema:
        type:  array
        items:
          type: string
      description: |
        Restricts items to those whose division is in this list.

        Unlike `division=`, it does not follow ancestry.  That means it will limit the search to items
        that are directly assigned to the divisions you list, whereas `division` (without the
        `direct`) will also include items that are assigned to their descendants.

        List the IDs of the divisions you are interested in separated by commas.  Item IDs are short
        alphanumeric strings, not URLs.

        Because this is the first query parameter we added that contains a capital letter, this will
        be the first time you have had to think about case sensitivity.  `directDivision` works,
        `directdivision` does not.

        Results are undefined if you provide an ID that is not in the form of a division ID.

        Search parameters are ANDed together.

        Added in 9.20.

    division:
      name: "division"
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
      style: simple
      description: |
        Limits the returned items to those that are in these divisions.

        That includes all the items in those divisions' child divisions, because Command Centre treats
        items as though they are also in their division's parent, and its parent, and so on up to the
        root division.

        Separate the IDs of the divisions you are interested with commas.  Item IDs are short
        alphanumeric strings, not URLs.

        Results are undefined if you provide an ID that is not in the form of a division ID.

        Search parameters are ANDed together.

    reception_fields:
      name: "fields"
      in: query
      required: false
      schema:
        default: [ defaults ]
        type: array
        items:
          type: string
          enum: [href, name, description, division, serverDisplayName, defaultVisitorType, notes]
      description: |
        Specifies the fields in the response.  The values you can list are the same in the search and
        details pages.  Using it you can return everything on the search page that you would find on
        the details page, plus the reception's notes.  Separate values with commas.

        Use the special value `defaults` to return the fields you would have received had you not
        given the parameter at all.  Add more after a comma.

        Treat the string matches as case sensitive.

    id:
      name: "id"
      in: path
      required: true
      schema:
        type: string
      description: "An internal identifier."

    secondary_id:
      name: "secondary_id"
      in: path
      required: true
      schema:
        type: string
      description: "An internal identifier."

    name:
      name: "name"
      in: query
      schema: {type: string}
      description: |
        Limits the returned items to those with a name that matches this string.  Without surrounding
        quotes or a percent sign or underscore, it is a substring match; surround the parameter with
        double quotes `"..."` for an exact match.  Without quotes, a percent sign `%` will match any
        substring and an underscore will match any single character.

        The search is always case-insensitive.  Results are undefined if you do a substring search for
        the empty string (`name=`).  You will receive no items if you search for those with no name
        (`name=""`), as all items must have a name.

        Search parameters are ANDed together.

    pdf_fields:
      name: fields
      in: query
      description: |
        Specifies the fields in the search results.  The values you can list are the same in the
        search and details pages.  Using it you can return everything on the search page that you
        would find on the details page.  Separate values with commas.

        Use the special value `defaults` to return the fields you would have received had you not
        given the parameter at all.  Add more after a comma.

        Treat the string matches as case sensitive.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - href
            - id
            - name
            - description
            - division
            - serverDisplayName
            - type
            - default
            - required
            - unique
            - sortPriority
            - accessGroups
            - regex
            - regexDescription
            - defaultAccess
            - operatorAccess
            - notificationDefault
        default: [ defaults ]

    pos:
      name: "pos"
      in: query
      required: false
      schema: {type: integer}
      description: Reserved for internal use.  You may see it in URLs you receive from the server, but you must never add it yourself.

    requested_by:
      name: "requested_by"
      in: query
      required: false
      schema:
        type: string
        default: [ none ]
      description: |
        Attributes this override to the cardholder with this ID rather than the REST operator.
        Privilege checks will use the operator as normal, but event monitors and reports will state
        that the person responsible for the override was the attributed cardholder, not the REST
        operator.  The REST operator will appear in a special mention in the event's details.

        First available in 8.70.  Versions older than 8.70 will ignore the parameter, leaving the
        override attributed to the REST operator.

    skip:
      name: "skip"
      in: query
      required: false
      schema: {type: integer}
      description: Reserved for internal use.  Do not add it to your queries.

    sort:
      name: sort
      in: query
      schema:
        type: string
        enum: [ id, name, -id, -name]
      required: false
      description: |
        Changes the sort field between database ID and name.

        If you prefix `id` or `name` with a minus sign (ASCII 45), the sort order is reversed.

        There are two very strong reasons to sort by ID:

        1. Sorting by name carries a risk of missing or duplicating objects if your result set spans
           multiple pages and another operator is editing the database while your REST client is
           enumerating them.  This is known as "page drift."  Sorting by ID does not carry that risk.
        2. Following a `next` link is _dramatically_ quicker when sorting by ID.

        We _strongly_ recommend sorting by ID.  In case you were still in doubt, we will do that by
        default in a future version of Command Centre.

        The server silently ignores anything except the options listed here.

    top:
      name: "top"
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
      description: |
        Limits the results to no more than this many items per page.

        Older versions of Command Centre returned 100 items per page in the absence of this parameter.  That is acceptable for GUI
        applications that will only display the first page, but for integrations that intend to
        proceed through the entire database it causes a lot of chatter.

        8.70 and later versions will default to 1000 items per request.  This is about where a graph
        of throughput versus page size begins to level out.

    visit_fields:
      name: "fields"
      in: query
      required: false
      schema:
        type: array
        default: ['defaults']
        items:
          type: string 
          enum: [href, name, description, division, serverDisplayName, notes, reception, visitorType,
             host, from, until, location, badgeText, visitorAccessGroups, visitors,
             visitors.cardholder, visitors.href, visitors.invitation, visitors.status, ... ]

      description: |
        Specifies the fields in the response.  The values you can list are the same in the search and
        details pages.  Using it you can return everything on the search page that you would find on
        the details page, plus the visit's notes.  Separate values with commas.

        Use the special value `defaults` to return the fields you would have received had you not
        given the parameter at all.  Add more after a comma.

        Treat the string matches as case sensitive.
  
  requestBodies:

    AccessGroupPATCHExample:
      description: |
        ***DRAFT DOCUMENTATION***

        The body you would send to an access group PATCH has the same schema as an [access group
        POST](#definition-Access-group-POST-example) apart from the `personalDataDefinitions` block.

      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              personalDataDefinitions:
                description: |
                  This object can contain two arrays named `add` and `remove`.  Every element you put in
                  those arrays should contain a string called `href` giving the href of a PDF that you want
                  to add to or remove from the access group.
                  
                  In this example we are adding PDF 5516 and removing 9370.
                type: object
                example:
                  "add": [ { "href": "https://localhost:8904/api/personal_data_fields/5516" } ]
                  "remove": [ {"href": "https://localhost:8904/api/personal_data_fields/9370" } ]

    

    CardType:
      description: |
        This object describes a single Card Type.  "Credential type" would be a better name, as it
        includes mobile credentials.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              href:
                type: string
                format: url
                readOnly: true
                example: "https://localhost:8904/api/card_types/600"
                description: |-
                  This is the identifier to use when assigning a card to a cardholder in a cardholder
                  [PATCH](#operation--api-cardholders--id--patch) or
                  [POST](#definition-Cardholder-POST-example).

                  This is also the URL for the card type's detail page.  GETting it will return you a 404 if
                  you do not have 'View site' or 'Configure site' on the card type's division.

              id:
                type: string
                readOnly: true
                example: "600"
                description: |
                  The API does not use this field.  Nor should you.
              name: {type: string, example: "Red DESFire visitor badge"}
              division:
                type: object
                description: |
                  The division that contains this card type.  Required when creating a card type.

                  New to 8.50.
                example:
                  href: "https://localhost:8904/api/divisions/2"

              notes:
                type: string
                example: "Disabled after 7d inactivity, 6-char PIN"
                description: |
                  Free text.

                  Because of its potential size, the server does not return the notes field by default.  You
                  need to ask for it with `fields=notes`.
              facilityCode:
                type: string
                description: |
                  A facility code is a letter (A-P) followed by up to five digits.  It is encoded onto cards
                  so that they only work at sites with the correct facility code.

                  PIV cards, PIV-I cards, and mobile credentials do not have a facility code.

                  Most credential classes require a facility code on creation.  But it cannot be changed
                  once set, so this field is ignored in a PATCH.
                example: "A12345"
              availableCardStates:
                readOnly: true
                type: array
                items: {type: string, enum: ['Active', 'Disabled (manually)', 'Lost', 'Stolen', 'Damaged']}
                description: |
                  All credential types have a set of card states.

                  If you need this, ask for it using the `fields` parameter.

                  This field is read-only:  it is derived from the card type's card state set (also known as
                  a workflow).  If you send it in a POST or a PATCH, the server will ignore it.
                example:
                - "Active"
                - "Disabled (manually)"
                - "Lost"
                - "Stolen"
                - "Damaged"
              credentialClass:
                type: string
                description: |
                  Required when creating a new card type but ignored when modifying one since a credential's
                  type cannot be changed once set.
                enum: [ "piv", "pivi", "card", "mobile", "digitalId", "govPass", "trackingTag", "transact" ]
                example: card
              minimumNumber:
                description: |
                  For card types with integer card numbers, this is the minimum.  Must be non-negative.
                type: string
                example: "1"
              maximumNumber:
                description: |
                  For card types with integer card numbers, this is the maximum.  Must be non-negative.
                type: string
                example: "16777215"
              serverDisplayName:
                readOnly: true
                <<: *SERVER
              regex:
                description: |
                  This is the regular expression that a text card number
                  must match before Command Centre will accept it. 
                type: string
                example: "^[A-Za-z0-9]+$"
              regexDescription:
                description: Regular expressions often need explaining to your users.
                type: string
                example: "Only alphanumeric characters"

    CompetencyPATCHandPOSTExample:
      description: |
        This is an example of a PATCH you could use to update a competency, and a POST you could use to create one.

        No fields are mandatory in a PATCH, but when using a POST to create a competency you must supply a division.

      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: |
                  The new item's name.  If you supply a name and another item of the same type already
                  exists with that name, the call will fail.  If you leave it blank in a POST, Command
                  Centre will pick a name for you.

                example: "New competency"
              shortName:
                type: string
                maxLength: 16
                description: "If you supply a string that is too long, Command Centre will truncate it."
                example: "C4"
              description:
                type: string
                description:  The new item's description.
                example: "Translated automatically."
              division:
                type: object
                description: The division to contain this competency.
                example: {href: "https://localhost:8904/api/divisions/2" }
              notes:
                type: string
                description: |
                  A string, able to me much longer than `description`, suitable for holding notes about the
                  item.
                example: "A very long string."

#######################################################################
#######################################################################

    RedactionPOSTExample:
      description: |
        POST one of these to schedule a redaction.
      content:
        application/json:
          schema:
            type: object
            required:
              - cardholder
              - type
            properties:
              cardholder:
                type: object
                properties: {}
                description: |
                  The href of the cardholder whose events or item this redaction should affect.

                  Required.
                example:
                  href: https://localhost:8904/api/cardholders/630
              type:
                type: string
                description: |
                  Whether this redaction is for events or cardholder information.

                  Required.
                example: normalEvents
                enum:
                - normalEvents
                - cardholder
              when:
                type: string
                description: |
                  When redaction is meant to happen.  This should be in the future.  If it is in the past,
                  the service returns 400-Bad Request Invalid Start Time.

                  Optional.  If it is absent, it means to do it asap.
                format: date-time
                example: 2023-01-01T00:00:00Z
              before:
                type: string
                description: |
                  For event redactions, do not redact any events after this time.  No effect on cardholder
                  information redactions.

                  Optional.
                format: date-time
                example: 2022-01-01T00:00:00Z

    OverrideEndTime:
      description: |
        Put this in the body of override POSTs to set the time at which the override should cease.
        The API will reject the override if the string is not empty and it cannot parse it into a
        date-time, but it will treat the override as having no end time if you mis-spell 'endTime'
        or if you send a blank string.

        Command Centre computes an override's duration to a whole number of minutes with a minimum
        of one.  That means that a timed override will always end at a multiple of sixty seconds
        from the time the hardware receives the override request, which means the override will end
        within thirty seconds of the time you supplied here.  In versions older than 8.80, the
        discrepancy may be up to a minute.

        Careful observation of overrides submitted from the Configuration client and from the API
        will reveal that they use different rounding methods.  Be assured, both result in overrides
        ending within a minute of the requested time.  example: 2018-07-31T00:00:00Z
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              endTime:
                type: string
                format: date-time

    visitorNotificationPOST:
      description: |
        The contents of the notification email or SMS, or both.
      content:
        application/json:
          schema:

            description: |
              This is a sample body for the methods that send notifications to a visit's host.  Call them
              as a visitor moves through their reception process.

              Command Centre can send email, an SMS, or both.  It will send email if you give it either the
              subject or a message body.  It will send a TXT only if you give it the SMS message.

            properties:
              emailSubject:
                type: string
                description: |
                  If you wish to send an email notification, put its subject here.  Email will go out if you
                  leave it blank but provide a body, but it is generally easier on the recipient the other
                  way around.
                example: "Visitor arriving"
              emailMessage:
                type: string
                description: |
                  If you want your email notification to contain body text, put it here.
                example: ""
              smsMessage:
                type: string
                description: |
                  If you wish to send an SMS notification (a TXT), put it here.  Leave it blank if you only wish to send email.
                example: "Visitor arriving"
      

  responses:
    "403accesszoneoverride":
      description: |
        The site does not have the RESTOverrides licence (in which case the body of the result will
        say so), or the operator does not have a privilege that allows overriding access zones (such
        as 'Override').
      content: {}
    "404accesszone":
      description: |
        The request's URL does not represent an access zone, or the operator does not have a privilege
        on the zone's division that allows viewing access zones, such as 'View Site', 'Edit Site', or
        'Override'.
      content: {}

    404alarm:
      description: That is not the href of an alarm or you do not have privileges for it.

    "403alarmzoneoverride":
      description: |
        The site does not have the RESTOverrides licence (in which case the body of the result will
        say so), or the operator does not have a privilege that allows overriding alarm zones (such as
        'Override').
      content: {}
    "404alarmzone":
      description: |
        The request's URL does not represent an alarm zone, or the operator does not have a
        privilege on the zone's division that allows viewing alarm zones, such as 'View Site', 'Edit
        Site', or 'Override'.
      content: {}

    "403dooroverride":
      description: |
        The site does not have the RESTOverrides licence (in which case the body of the result will
        say so), or the operator does not have a privilege that allows overriding doors (such as
        'Override - Open Door').

    404door:
      description: |
        The request's URL does not represent a door, or the operator does not have a privilege on
        the door's division that allows viewing them, such as 'View Site', 'Edit Site', or 'Override
        - Open Door'.

    403fencezoneoverride:
      description: |
        The site does not have the RESTOverrides licence (in which case the body of the result will
        say so), or the operator does not have a privilege that allows overriding fence zones (such as
        'Override', or 'Maintenance Override' for shunts).
    404fencezone:
      description: |
        The request's URL does not represent a fence zone, or the operator does not have a privilege
        on the zone's division that allows viewing fence zones, such as 'View Site', 'Edit Site', or
        'Maintenance Override'.

    403inputoverride:
      description: |
        The site does not have the RESTOverrides licence (in which case the body of the result will
        say so), or the operator does not have the 'Maintenance Override' privilege.
    404input:
      description: |
        The request's URL does not represent an input, or the operator does not have a privilege on
        the input's division that allows viewing inputs, such as 'View Site', 'Edit Site', or
        'Maintenance Override'.

    403interlockoverride:
      description: |
        The site does not have the RESTOverrides licence (in which case the body of the result will
        say so), or the operator does not have the 'Override' privilege.
    404interlock:
      description: |
        The request's URL does not represent an interlock or the operator does not have a privilege on
        the interlock's division that allows viewing interlocks, such as 'View Site', 'Edit Site', or
        'Override'.

    403macrooverride:
      description: |
        The site does not have the RESTOverrides licence (in which case the body of the result will
        say so), or the operator does not have a privilege that allows running macros ('Run Macro' or
        'Schedule and Run Macro', unsurprisingly).
    404macro:
      description: |
        The request's URL does not represent a macro, or the operator does not have a privilege on the
        macro's division that allows viewing it, such as 'View Site', 'Run Macros', or 'Schedule and
        Run Macros'.
        
    403outputoverride:
      description: |
        The site does not have the RESTOverrides licence (in which case the body of the result will
        say so), or the operator does not have a privilege that allows overriding outputs (such as
        'Override', or 'Maintenance Override' for shunts).
    404output:
      description: |
        The request's URL does not represent an output, or the operator does not have a privilege
        on the output's division that allows viewing outputs, such as 'View Site', 'Edit Site', or
        'Override'.

    404schedule:
      description: |
        The request's URL does not represent a schedule, or the operator does not have a privilege on
        the schedule's division that allows viewing schedules, such as 'View Schedules', 'Edit
        Schedules', or 'Schedule Access Zone'.
      
    "400badbody":
      description: |
        The server could not parse the POST parameters.  There could be a syntax error in your JSON.
      content: {}

    "403nolicence":
      description: |
        A server running 8.50 or earlier is missing the RESTStatus licence.  A server running 8.60
        or later is missing both the RESTStatus and RESTOverrides licences (having one is enough for
        this API call).
  schemas:

    AccessGroupPOSTExample:
      x-tags: [AccessGroups]
      description: |
        ***DRAFT DOCUMENTATION***

        This is an example of a POST you could use to create an access group, containing examples of
        all the settable fields.

      required: [ division ]
      properties:
        name:
          type: string
          description: All items have a name.
          example: "R&D special projects group."
        description:
          type: string
          example: "Deep underground."
        division:
          type: object
          description:  |
            Mandatory when creating any access group.  In this example, we want the access group in
            division 352.
          example:
            href: "https://localhost:8904/api/divisions/352"
        notes:
          type: string
          example: ""
        parent:
          type: object
          description: |
            A link to the group's parent.

            This field is optional in a POST because unlike divisions, which must have a parent, an
            access group can stand alone.  But should you wish it to be a member of another, link it
            here.

            An access group may be a member of only one other:  multiple inheritance is not possible.

            Use the blank string `""` to clear a group's parent in a PATCH.
          example:
            href: "https://localhost:8904/api/access_groups/100"
        membershipAutoRemoveExpired:
          type: boolean
          description: |
            If true, memberships will be removed when their `until` time passes.  If false, they will
            remain on the cardholder, inactive.
          example: true
        membershipFromDefault:
          type: string
          description: |
            When a cardholder is granted membership of this access group without specifying a 'from'
            time, this default will apply.  If left blank, such a membership will not have a 'from'
            time (meaning it will be effective immediately, provided its 'until' time is blank or in
            the future).

            To clear it, send the blank string `""`.
          format: date-time
          example: "2025-01-01T00:00:00Z"
        membershipUntilDefault:
          type: string
          description: |
            When a cardholder is granted membership of this access group without specifying an 'until'
            time, this default will apply.  If blank, such a membership will not have an 'until' time
            (meaning it will be effective until removed).

            To clear it, send the blank string `""`.
          format: date-time
          example: "2025-01-01T00:00:00Z"

        personalDataDefinitions:
          description: |
            This is where you give PDFs to cardholders.  All the members of this access group will be
            able to have values for the PDFs you list in this array.

            Each element should contain the href of a PDF definition.  You can take those from the
            PDFs controller or other API routes, including the `personalDataDefinitions` block of
            another access group.
          type: array
          items: {type: object}
          example:
            - "href": "https://localhost:8904/api/personal_data_fields/5516"
            - "href": "https://localhost:8904/api/personal_data_fields/9370"

    AccessGroupSearch:
      description: |
        An array of access group summaries, described in the next section, and a `next` link for more.
      properties:
        results:
          type: array
          description: An array of access group summaries.
          items:
            { $ref: '#/components/schemas/AccessGroupSummary' }
        next:
          type: object
          description: The link to the next page.  Absent if you have retrieved them all.
          properties:
            href:
              type: string
              format: url
          example:
             href: "https://localhost:8904/api/access_groups?skip=61320"

    AccessGroupSummary:
      description: |
        The access group search at `/api/access_groups` returns an array of these, and
        `/api/access_groups/{id}` (linked as the href in this object) returns one with more fields.

      properties:
        id:
          type: string
          description: |
            An alphanumeric identifier for this access group.  No API calls use access group IDs.
          example: "352"
        href:
          type: string
          format: url
          description: |
            A link to an [access group detail](#definition-Access-group-detail) object for this access
            group.
          example: "https://localhost:8904/api/access_groups/352"
        name:
          type: string
          example: "R&D special projects group."
        description:
          type: string
          example: "Deep underground."
        parent:
          type: object
          description: "A link to the group's parent, and its name."
          example:
            href: "https://localhost:8904/api/access_groups/100"
            name: "All R&D"
        division:
          type: object
          description:  "The division that contains this access group."
          example:
            id: "2"
            href: "https://localhost:8904/api/divisions/2"
        cardholders:
          type: object
          description: |
            Following this link lists the group's [direct
            memberships](#operation--api-access_groups--id--cardholders-get).

            In v8.00 you will receive this field along with the ID and href in an access group's
            details page whether or not you specified it in the fields parameter, but if you send the
            fields parameter to 8.10 you will only get what you asked for.
          example:
            href: "https://localhost:8904/api/access_groups/352/cardholders"
        serverDisplayName:
          <<: *SERVER

    AccessGroupDetail:
      description: |
        [/api/access_groups/{id}](#operation--api-access_groups--id--get) returns one of these.  In
        addition to the basic details, it lists the child groups, privileges, and access zones and
        Salto items to which the group grants access.

        There are brief descriptions of those fields below.  If they fall short the Configuration
        Client's online documentation is the authority, in particular the section 'Setting up Access
        Groups'.

      allOf:
        - $ref: "#/components/schemas/AccessGroupSummary"
        - type: object
          properties:
            children:
              type: array
              description: |
                Names and links for the groups that claim this one as a parent.  This array does not
                include the childrens' children.

                **Notice of breaking change**.  This field being present and empty when the group has
                no children is a break from the API's principle of omitting empty fields, and is
                therefore a bug.  A future version of Command Centre will not return the `children`
                array if the group has no children.

              items:
                type: object
                properties:
                  href:
                    description: "The href of the child access group."
                    type: string
                    format: url
                  name:
                    description: "The name of the child access group."
                    type: string
              example:
                - href: "https://localhost:8904/api/access_groups/5122"
                  name: "R&D super-special projects"
                - href: "https://localhost:8904/api/access_groups/3420"
                  name: "R&D social committee"

            personalDataDefinitions:
              type: array
              items:
                type: object
                properties:
                  name: { type: string, description: "Read-only."}
                  href: { type: string, format: url}
              description: |
                The names and hrefs of the PDFs that this access group gives to its members.
              example: [ {
                  "name": "email",
                  "href": "https://localhost:8904/api/personal_data_fields/5516"
                }, {
                  "name": "cellphone",
                  "href": "https://localhost:8904/api/personal_data_fields/9998"
                } ]

            visitor:
              description: |
                If true, members of an access group with the 'escortVisitors' privilege can
                escort members of this group through a door, provided both groups have access to the
                entry zone.

                A group with 'visitor' cannot also have 'escortVisitors', 'lockUnlockAccessZones', or
                'firstCardUnlock', because visitors are not allowed to do those things.

                New to 8.40.

              example: false
              type: boolean

            escortVisitors:
              description: |
                If true, members of this group can escort members of a group with the 'visitor'
                privilege through a door, provided both groups have access to the entry zone.

                A group cannot have both 'escortVisitors' and 'visitor'.

                New to 8.40.

              example: false
              type: boolean

            lockUnlockAccessZones:
              description: |
                If true, members of this group can use a reader or terminal to change the access mode
                of this group's access zones.  They can do this by logging on, if the reader has a
                screen and keypad, or by double-badging.

                A group cannot have both 'lockUnlockAccessZones' and 'visitor'.

                New to 8.40.

              example: false
              type: boolean

            enterDuringLockdown:
              description: |
                If true, members of this group are not subject to lockdown restrictions when
                requesting to enter its access zones.

                New to 8.40.

              example: false
              type: boolean

            firstCardUnlock:
              description: |
                If true, members of this group will change an access zone from secure to free when
                entering it, unlocking all its doors.

                A group cannot have both 'firstCardUnlock' and 'visitor'.

                New to 8.40.

              example: false
              type: boolean

            overrideAperioPrivacy:
              description: |
                Some Aperio locks have a 'privacy mode' button that room occupants can push when they
                do not want anyone else coming in.  If this field is true, Aperio locks will ignore
                that button when members of this group attempt to open them.

                This field will not appear if your site is not licensed for Aperio.

                New to 8.40.

              example: false
              type: boolean

            aperioOfflineAccess:
              description: |
                Aperio locks normally refuse to open when offline.  If this field is true, Aperio
                locks that support it will make an exception for members of this group.

                Obviously the lock needs to be online long enough to synchronise this setting and the
                members of the group before setting it will have an effect.

                This field will not appear if your site is not licensed for Aperio.

                New to 8.40.

              example: false
              type: boolean

            disarmAlarmZones:
              description: |
                If true, members of this group can use a reader or terminal to disarm the
                group's access zones' alarm zones, either by logging on or double-badging.

                New to 8.40.

              example: false
              type: boolean

            armAlarmZones:
              description: |
                If true, members of this group can use a reader or terminal to arm the
                group's access zones' alarm zones.

                New to 8.40.

              example: false
              type: boolean

            hvLfFenceZones:
              description: |
                If true, members of this group can use a reader or terminal to change the
                group's fence zones between 'high voltage' and 'low feel', which will in turn change
                the exuberance of their energisers.  A group's fence zones are those that use the same
                alarm zones as the group's access zones.

                New to 8.40.

              example: false
              type: boolean

            viewAlarms:
              description: |
                If true, members of this group can view alarms and inputs on remote arming
                terminals ("RATs") and HBUS terminals.

                New to 8.40.

              example: false
              type: boolean

            shunt:
              description: |
                If true, members of this group can shunt (isolate) items using RATs and
                HBUS terminals.

                New to 8.40.

              example: false
              type: boolean

            lockOutFenceZones:
              description: |
                If true, members of this group can lock out (de-energise, make safe) fence
                zones using RATs and HBUS terminals.  Like all other access group privileges, this
                only works on the fence zones to which this group has access.

                New to 8.40.

              example: false
              type: boolean

            cancelFenceZoneLockout:
              description: |
                Normally, only the cardholder who locked out a fence zone can cancel the lockout and
                re-energise the fence.  With this privilege, members of this group can
                cancel any lockout on the group's fence zones.

                New to 8.40.

              example: false
              type: boolean

            ackAll:
              description: |
                If true, members of this group can acknowledge alarms at a RAT or HBUS
                terminal.

                An access group cannot have both this privilege and 'ackBelowHigh'.

                New to 8.40.

              example: false
              type: boolean

            ackBelowHigh:
              description: |
                If true, members of this group can acknowledge alarms at a RAT or HBUS
                terminal, provided the alarms are not at high, very high, or critical priority.

                An access group cannot have both this privilege and 'ackAll'.

                New to 8.40.

              example: false
              type: boolean

            selectAlarmZone:
              description: |
                If true, members of this group can choose from a list of the group's alarm zones when
                performing overrides at RATs and HBUS terminals, rather than having it chosen for them
                by site configuration.

                A group can only have this privilege if it also has 'disarmAlarmZones' or
                'armAlarmZones'.  Without one of those there is no point in being able to select an
                alarm zone.

                New to 8.40.

              example: false
              type: boolean

            armWhileAlarm:
              description: |
                Normally, a cardholder cannot arm an alarm zone if it has open, unshunted, inputs.
                With this privilege, members of the group can force-arm the alarm zone from a RAT or
                HBUS terminal.  What happens then depends on an alarm zone setting.

                A group with this privilege will also have 'armAlarmZones' and will not have
                'armWhileActiveAlarm'.

                New to 8.40.

              example: false
              type: boolean

            armWhileActiveAlarm:
              description: |
                Normally, a cardholder cannot arm an alarm zone when it has active alarms.  Members of
                a group with this privilege can do so from an HBUS terminal, provided they also meet
                other criteria (detailed in the Configuration Client documentation).

                A group with this privilege will also have have 'armAlarmZones' and will not have
                'armWhileAlarm'.

                New to 8.40.

              example: false
              type: boolean

            isolateAlarmZones:
              description: |
                Members of a group with this privilege have the option of isolating open inputs from a
                RAT or HBUS terminal when they are preventing an alarm zone from arming.  Like all
                these privileges, it only works for the alarm zones on the group's access zones.

                To have this privilege, a group must also have 'armAlarmZones'.

                New to 8.40.

              example: false
              type: boolean

            access:
              type: array
              items:
                type: object
                properties:
                  accessZone: { type: object, properties: {href: {type: string, format: url}, name: {type: string, description: Read-only.}}}
                  schedule: { type: object, properties: {href: {type: string, format: url}, name: {type: string, description: Read-only.}}}
              description: |
                Names and hrefs of the access zones to which this access group gives access, and the
                schedules that govern it.

                Your operator needs 'View Schedules' to see schedule hrefs, and 'View Site', 'Edit
                Site', or 'Override' to see access zone hrefs.

                New to 8.40.

              example: [ {
                  "accessZone": {
                    "href": "https://localhost:8904/api/access_zones/333",
                    "name": "Twilight zone"
                  },
                  "schedule": {
                    "href": "https://localhost:8904/api/schedules/5",
                    "name": "Default Cardholder Access Granted"
                  }
                }, {
                  "accessZone": {
                    "href": "https://localhost:8904/api/access_zones/412",
                    "name": "Server room"
                  },
                  "schedule": {
                    "href": "https://localhost:8904/api/schedules/557",
                    "name": "8am-5pm weekdays"
                  }
                }
              ]

            saltoAccess:
              type: array
              description: |
                Types, names, and hrefs of the Salto doors and door groups ("Salto Access Zones") to
                which this access group gives access, and the schedules that govern it.

                Watch those definitions:  a 'Salto Access Zone' is a group of Salto doors, while
                Command Centre's definition of an access zone is a space into which a cardholder moves
                after passing through a door.

                Therefore if an access group gives access to a Salto Access Zone, it is giving access
                through any number of Salto doors.  If you don't have access to the Salto system
                itself you can see the Salto zone/door hierarchy in the Command Centre Configuration
                client.

                New to 8.40.

              items:
                description: |
                  Each element in the array contains three blocks:  the Salto item type, the item
                  itself, and the controlling schedule.
                type: object
                properties:
                  saltoItemType:
                    description: |
                      This block tells you whether the Salto item is a Salto door or a Salto 'access
                      zone'.
                    type: object
                    properties:
                      value:
                        type: string
                        enum: ['saltoAccessZone', 'saltoDoor' ]
                  saltoItem:
                    description: |
                      The name and href of the Salto zone or Salto door to which this access group
                      gives access.

              example: [ {
                "saltoItemType": {
                  "value": "saltoAccessZone"
                },
                "saltoItem": {
                  "href": "https://localhost:8904/api/items/570",
                  "name": "Salto BLE CV19"
                },
                "schedule": {
                  "href": "https://localhost:8904/api/schedules/5",
                  "name": "Default Cardholder Access Granted"
                }
                }, {
                "saltoItemType": {
                  "value": "saltoDoor"
                },
                "saltoItem": {
                  "href": "https://localhost:8904/api/items/579",
                  "name": "Salto CU5000"
                },
                "schedule": {
                  "href": "https://localhost:8904/api/schedules/557",
                  "name": "8am-5pm weekdays"
                } } ]

            alarmZones:
              type: array
              items:
                type: object
                properties:
                  alarmZone: { type: object, properties: {href: {type: string, format: url}, name: {type: string, description: "Read-only."}}}
              description: |
                Names and hrefs of the alarm zones to which members of this access group have the
                20-odd management privileges listed above.

                Each connection between the access group and the alarm zone is in its own block called
                `alarmZone` to leave room for the addition of more fields later.

                Added in 8.40.

              example: [ {
                "alarmZone": {
                  "href": "https://localhost:8904/api/alarm_zones/328",
                  "name": "Roswell building 2 lobby alarms"
                } }, {
                "alarmZone": {
                  "href": "https://localhost:8904/api/alarm_zones/10138",
                  "name": "Roswell building 3 lobby alarms"
                } } ]

    AccessGroupMembership:
      description: |
        Returned in an array by
        [/api/access_groups/{id}/cardholders](#operation--api-access_groups--id--cardholders-get),
        containing cardholders who are direct members of a particular group.  The array does
        not contain the group's child groups, or their cardholder members.

        Each item contains a cardholder and (possibly) two date-times.  The group membership is active
        if and only if the current time is between 'from' and 'until'.  If 'from' is absent, assume
        the distant past.  If 'until' is absent, assume the far future.

        Use the href in the cardholder block to change the 'from' and 'until', or even the
        group, using [cardholder patch](#operation--api-cardholders--id--patch).

        Each also contains an href at the top level:  DELETE that to remove the membership.

      properties:
        href:
          type: string
          format: url
          description: |
            DELETE this URL to remove the membership.  Do not specify this when creating or
            modifying a cardholder.

            DELETE is the only verb you can use on this URL.  GET will always return a 404.

        cardholder: {type: object, description: 'The name and href of the member cardholder.'}
        from: {type: string, format: time-stamp}
        until: {type: string, format: time-stamp}
      example:
        href: "https://localhost:8904/api/cardholders/325/access_groups/D714D8A894724F"
        cardholder:
          name: "Boothroyd, Algernon"
          href: "https://localhost:8904/api/cardholders/325"
        from: "2017-01-01T00:00:00Z"
        until: "2017-12-31T11:59:59Z"

    AccessZoneSummary:
      description: |
        `/api/access_zones` returns an array of these.  It is a subset of what you get from a
        access zone's detail page at `/api/access_zones/{id}` (linked as the href in this
        object).
      type: object
      properties:
        href:
          type: string
          format: url
          description: |
            A link to an [access zone detail](#definition-Access-Zone-detail) object for this access
            zone.  It is also Command Centre's identifier for this access zone:  use it whenever you
            need to specify an access zone in REST operations.
          example: "https://localhost:8904/api/access_zones/3280"
        id:
          type: string
          description: |
            An alphanumeric identifier, unique to the server.

            This is the ID to use in the `source` parameter of [event
            filters](events.html#operation--api-events-get) if you want to limit your events to
            particular access zones.
          example: "3280"
        name:
          type: string
          example: "Roswell building 2 lobby"

    AccessZoneDetail:
      description: |
        [/api/access_zones/{id}](#operation--api-access_zones--id--get) returns one of these.

        As well as the properties below, it contain a block called `doors`.  This is reserved for
        future development and its behaviour could change in later versions of Command Centre.

      allOf:
        - $ref: "#/components/schemas/AccessZoneSummary"
        - type: object
          properties:
            description:
              type: string
              example: "Receives all visitors."
            division:
              type: object
              description:  The division containing this Access Zone.
              example:
                href: "https://localhost:8904/api/divisions/2"
            doors:
              type: array
              description: A list containing names of and links to the doors that control entry to this access zone.
              items:
                type: object
                properties:
                  name: {type: string}
                  href: {type: string, format: url, description: "This is the link to the [door's detail](#definition-Door-detail) (which contains a return link back to this page in either its `entryAccessZone` or `exitAccessZone` field)."}
                example:
                  - name: "Front door"
                    href: "https://localhost:8904/api/doors/332"
                  - name: "West stairwell lobby door"
                    href: "https://localhost:8904/api/doors/745"
            zoneCount:
              type: integer
              description: |
                The number of cardholders in the zone, according to its zone counting configuration.

                An access zone's count is part of its state, so [all that reading](#topic-Item-status)
                applies here too.  The authoritative source is the zone's hardware controller, so the
                REST server only has it if it is monitoring it for another reason.  If it is not, it
                returns a zero.

                That is why zone counts are not in the default set of fields.  You can ask for them
                using the 'fields' parameter, but you risk receiving a zero, so the recommended way is
                to follow the Access Zone's 'updates' link with `fields=defaults,zoneCount` appended
                after the appropriate query parameter separator.

                A zone count is correct iff the access zone is online:  the status flags must contain
                one of 'secure', 'dualAuth', 'codeOrCard', or 'free'.  Even then, the zone count could
                be a minute out of date (depending on a server property that determines how long a
                hardware item can be silent before the server calls it offline).

              example: 365
            notes:
              <<: *NOTES
            shortName:
              <<: *SHORTNAME
            updates:
              <<: *UPDATES
              example: { href: "https://localhost:8904/api/access_zones/3280/updates/0_0_0" }
            statusFlags:
              <<: *STATUSFLAGS
              example: ["secure"]
            connectedController:
              <<: *CONNECTEDCONTROLLER
            commands:
              type: object
              description: |
                A block of commands, each represented by a block containing an href that accepts a
                POST that will send an override to the access zone, changing its state.

                It will be missing if your operator does not have a privilege that allows overriding
                the access zone (examples of which are in the documentation for the POSTs).

              properties:
                free:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/free"
                      description: |
                        [POST](#operation--api-access_zones--id--free-post) to this to override the
                        zone into 'free - no PIN' access mode until the next scheduled change.
                      type: string
                      format: url
                freeUntil:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/free"
                      description: |
                        [POST](#operation--api-access_zones--id--free-post) to this to override the
                        zone into 'free - no PIN' access mode for a fixed time.
                      type: string
                      format: url
                freePin:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/free_pin"
                      description: |
                        [POST](#operation--api-access_zones--id--free-post) to this to override the
                        zone into 'free - PIN' access mode until the next scheduled change.
                      type: string
                      format: url
                freePinUntil:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/free_pin"
                      description: |
                        [POST](#operation--api-access_zones--id--free-post) to this to override the
                        zone into 'free - PIN' access mode for a fixed time.
                      type: string
                      format: url
                secure:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/secure"
                      description: |
                        [POST](#operation--api-access_zones--id--secure-post) to this to override the
                        zone into 'secure - no PIN' access mode until the next scheduled change.
                      type: string
                      format: url
                secureUntil:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/secure"
                      description: |
                        [POST](#operation--api-access_zones--id--secure-post) to this to override the
                        zone into 'secure - no PIN' access mode for a fixed time.
                      type: string
                      format: url
                securePin:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/secure_pin"
                      description: |
                        [POST](#operation--api-access_zones--id--secure-post) to this to override the
                        zone into 'secure - PIN' access mode until the next scheduled change.
                      type: string
                      format: url
                securePinUntil:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/secure_pin"
                      description: |
                        [POST](#operation--api-access_zones--id--secure-post) to this to override the
                        zone into 'secure - PIN' access mode for a fixed time.
                      type: string
                      format: url
                codeOnly:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/code_only"
                      description: |
                        [POST](#operation--api-access_zones--id--code_only-post) to this to override
                        the zone into 'code or card - no PIN' access mode until the next scheduled
                        change.
                      type: string
                      format: url
                codeOnlyUntil:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/code_only"
                      description: |
                        [POST](#operation--api-access_zones--id--code_only-post) to this to override
                        the zone into 'code or card - no PIN' access mode for a fixed time.
                      type: string
                      format: url
                codeOnlyPin:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/code_only_pin"
                      description: |
                        [POST](#operation--api-access_zones--id--code_only-post) to this to override
                        the zone into 'code or card - PIN' access mode until the next scheduled
                        change.
                      type: string
                      format: url
                codeOnlyPinUntil:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/code_only_pin"
                      description: |
                        [POST](#operation--api-access_zones--id--code_only-post) to this to override
                        the zone into 'code or card - PIN' access mode for a fixed time.
                      type: string
                      format: url
                dualAuth:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/dual_auth"
                      description: |
                        [POST](#operation--api-access_zones--id--dual_auth-post) to this to override
                        the zone into 'dual auth - no PIN' access mode until the next scheduled
                        change.
                      type: string
                      format: url
                dualAuthUntil:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/dual_auth"
                      description: |
                        [POST](#operation--api-access_zones--id--dual_auth-post) to this to override
                        the zone into 'dual auth - no PIN' access mode for a fixed time.
                      type: string
                      format: url
                dualAuthPin:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/dual_auth_pin"
                      description: |
                        [POST](#operation--api-access_zones--id--dual_auth-post) to this to override
                        the zone into 'dual auth - PIN' access mode until the next scheduled change.
                      type: string
                      format: url
                dualAuthPinUntil:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/dual_auth_pin"
                      description: |
                        [POST](#operation--api-access_zones--id--dual_auth-post) to this to override
                        the zone into 'dual auth - PIN' access mode for a fixed time.
                      type: string
                      format: url
                forgiveAntiPassback:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/forgive_anti_passback"
                      description: |
                        [POST](#operation--api-access_zones--id--forgive_anti_passback-post) to this
                        to forgive anti-passback for all cardholders in the zone.
                      type: string
                      format: url
                setZoneCount:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/set_zone_count"
                      description: |
                        [POST](#operation--api-access_zones--id--set_zone_count-post) to this set the
                        zone's cardholder count.
                      type: string
                      format: url
                lockDown:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/lock_down"
                      description: |
                        [POST](#operation--api-access_zones--id--lock_down-post) to this set the zone
                        into lockdown mode.
                      type: string
                      format: url
                cancelLockDown:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/cancel_lock_down"
                      description: |
                        [POST](#operation--api-access_zones--id--cancel_lock_down-post) to this cancel
                        lockdown on the zone, returning it to its scheduled mode.
                      type: string
                      format: url
                cancel:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/access_zones/333/cancel"
                      description: |
                        [POST](#operation--api-access_zones--id--cancel-post) to this cancel an
                        active override on the zone, returning it to its scheduled mode.  This will
                        not affect a lockdown.
                      type: string
                      format: url

      

    AlarmSearch:
      description: |
        An array of alarm summaries, and either a 'next' or an 'updates' link you should follow to
        retrieve more alarms.
      type: object
      properties:
        alarms:
          type: array
          description: An array of alarm summaries.
          items:
            { $ref: '#/components/schemas/AlarmSummary' }
        next:
          type: object
          description: The link to the next page of alarms. Missing if you have retrieved all the current alarms.
          properties:
            href: { type: string }
          example:
            href: "https://localhost:8904/api/alarms/next?start=92143&pos=61320"
        updates:
          type: object
          description: The link to follow to long-poll for alarm changes.  Missing if you have not yet retrieved all the current alarms.
          properties:
            href: { type: string }
          example:
            href: "https://localhost:8904/api/alarms/updates?id=92143.1"

    AlarmUpdates:
      type: object
      properties:
        updates:
          type: array
          description: An array of summaries of alarms created or modified since the previous call.
          items:
            { $ref: '#/components/schemas/AlarmSummary' }
        next:
          type: object
          description: Follow this link to perform another long poll.
          properties:
            href:
              type: string
              example: "https://localhost:8904/api/alarms/updates?id=10135"

    AlarmSummary:
      description: "`/api/alarms` returns an array of these, and `/api/alarms/{id}` returns one with more fields."
      type: object
      properties:
        href:
          type: string
          format: url
          description: A link to the details of this alarm.
          example: "https://localhost:8904/api/alarms/10135"
        id:
          type: string
          description: An alphanumeric identifier for this alarm, unique to the server.
          example: "10135"
        time: 
          type: string
          description: The time the alarm occurred.
          example: "2016-02-18T19:21:52Z"
        message:
          type: string
          description: The alarm's message.
          example:  "External bulk loading bay door has been forced"
        source: 
          type: object
          description: The ID and href are new to 8.10.
          properties:
            id:
              type: string
              description: |
                The alphanumeric ID of the alarm's source item.
              example: "1321"
            name:
              type: string
              description: The name of the alarm's source item at the time of the event.
              example: "External bulk loading bay door"
            href:
              type: string
              format: url
              description: Link to the source item.
              example: "https://localhost:8904/api/doors/1321"
        type:
          type: string
          description: |
            The name of this alarm's event type.

            Deprecated in favour of `eventType`.

          example: "Forced door"
        eventType:
          <<: *EVENTTYPE
        priority:
          type: integer
          description: Numeric priority.  9 is critical and 0 is not an event.
          minimum: 0
          maximum: 9
          example: 8
        state:
          type: string
          description: The state of the alarm.  Alarms start at "unacknowledged".
          enum: [ unacknowledged, acknowledged, processed ]
          example: "unacknowledged"
        active: 
          type: boolean
          description: Clients cannot process active alarms.
          example: false
        division:
          type: object
          description: The division entity representing the division of the alarm. GET the href for full details.
          properties:
            href:
              type: string
              format: url
              example: "https://localhost:8904/api/divisions/2"
        event:
          type: object
          description: |
            A block containing a link ("href") to the details page of this alarm's event.  Useful if
            you want an alarm's related items.

            This mirrors an event's `alarm` field, which comes the other way.

            Added in 8.90.  Not returned by default - you need to ask for it using the `fields` query parameter.
          properties:
            href:
              type: string
              format: url
              description: |
                Link to the event page for this alarm.  GET it for the fields found on an event
                that are not on an alarm.
              example: "https://localhost:8904/api/events/10135"
        notePresets:
          type: array
          items: 
            type: string
          description: Preset alarm notes to use for this specific alarm. Missing if the alarm does not have specific notes; in this case the client should fall back to the server defaults.
          example:
            - "False alarm confirmed by surveillance"
            - "Security staff dispatched"
        view:
          type: object
          description: |
            POST an alarm update request JSON object to the href to indicate the operator has viewed
            the alarm.
          properties:
            href:
              type: string
              format: url
              example: "https://localhost:8904/api/alarms/92210/view"
        comment:
          type: object
          description: |
            POST an alarm update request JSON object to the href to place an arbitrary alarm note
            against the alarm.
          properties:
            href:
              type: string
              format: url
              example: "https://localhost:8904/api/alarms/92210/comment"
        acknowledge:
          type: object
          description: |
            POST an alarm update request JSON object to the href to acknowledge an alarm. Missing if
            the system has mandatory alarm notes on for this alarm, or if the alarm is already
            acknowledged.
          properties:
            href:
              type: string
              format: url
              example: "https://localhost:8904/api/alarms/92210/acknowledge"
        acknowledgeWithComment:
          type: object
          description: |
            POST an alarm update request JSON object to the href to acknowledge an alarm and place an
            alarm note against it.  Missing if the alarm is already acknowledged.
          properties:
            href:
              type: string
              format: url
              example: "https://localhost:8904/api/alarms/92210/acknowledge"
        process:
          type: object
          description: |
            POST an alarm update request JSON object to the href to process an alarm. Missing if the
            system has mandatory alarm notes on for this alarm.  Missing if the alarm cannot be
            processed (if it is active, for example).
          properties:
            href:
              type: string
              format: url
              example: "https://localhost:8904/api/alarms/92210/process"
        processWithComment:
          type: object
          description: |
            POST an alarm update request JSON object to the href to process an alarm and place an
            alarm note against it.  Missing if the alarm cannot be processed (if it is active, for
            example).
          properties:
            href:
              type: string
              format: url
              example: "https://localhost:8904/api/alarms/92210/process"
        forceProcess:
          type: object
          description: |
            POST an alarm update request JSON object to this href to process an active alarm.  Missing
            if the alarm is not active (in which case you will have `process` and `processWithComment`
            links instead).

            This action can take a comment in the body.  In fact an explanation is recommended since
            force-processing an alarm is unusual.
          properties:
            href:
              type: string
              format: url
              example: "https://localhost:8904/api/alarms/92210/process"

    AlarmDetail:
      description: |
        [/api/alarms/{id}](#operation--api-alarms--id--get) returns one of these.  It contains
        everything from the alarm summary results, plus some extra fields that are too expensive to
        compute and return for large result sets.
      allOf:
        - type: object
          properties:
            details:
              type: string
              description: |
                The full alarm details text.  This may be up to 2048 UTF-8 characters, each of which
                could (theoretically) be four bytes long.
              example: "Forced door"
            history:
              type: array
              description: An array of alarm history entries.  Missing if there is no history.
              items: { $ref: '#/components/schemas/AlarmHistoryEntry' }
            instruction:
              type: object
              description: |
                GET the href it contains to retrieve the alarm instruction body inside an HTML document.

                In 9.10 and later you can request the instruction's name using the query parameter
                `fields=instruction.name`.  If you want the href as well, add `,instruction.href`.

                Missing if there is no alarm instruction for this alarm.
              properties:
                href: { type: string, format: url }
                name: { type: string}
              example:
                href: "https://localhost:8904/api/alarms/92210/instructions"
                name: "Forced door instruction"
            cardholder:
              type: object
              description: The cardholder entity associated with this alarm. GET the href for full details. Missing if this alarm does not have an associated cardholder.
              properties:
                href: { type: string, format: url, example: https://localhost:8904/api/cardholders/325 }
                name:
                  type: string
                  description: |
                    In versions up to and including 8.10 this is the current name of the cardholder.
                    In 8.20 it is the name of the cardholder at the time of the event.
                  example: "Smith, Jane"
                firstName:
                  type: string
                  description: The current value of the firstName field of this cardholder.  Added in 8.20.
                  example: "Jane"
                lastName:
                  type: string
                  description: The current value of the lastName field of this cardholder.  Added in 8.20.
                  example: "Smith-Jones"
        - $ref: "#/components/schemas/AlarmSummary"

    AlarmHistoryEntry:
      type: object
      properties:
        time:
          type: string
          description: The time the history entry was added.
          example: "2016-02-18T19:21:52Z"
        action:
          type: string
          description: The type of the history entry.
          enum: [ legacy, comment, acknowledge, process, acknowledgeActive, escalated, viewed ]
          example: "viewed"
        comment:
          type: string
          description: The added comment, or a textual description of some occurrence related to the alarm.
          example: "Operator viewed alarm properties"
        operator:
          type: object
          description: The operator that created the history event.
          example:
            name: "System Operator"

    AlarmUpdateRequest:
      type: object
      properties:
        comment:
          type: string
          description: "Optional for some methods that update alarms.  Contains a comment placed by the operator."
          example: "Alarm was adequately explained."

  
    AlarmZoneSummary:
      title: "Alarm Zone summary!!!!!!!!!!!"
      type: object
      properties:
        href:
          type: string
          description: |
            A link to an [alarm zone detail](#definition-Alarm-Zone-detail) object for this alarm
            zone.  This is Command Centre's identifier for this alarm zone:  use it whenever you need
            to specify an alarm zone in REST operations.
          format: url
          example: https://localhost:8904/api/alarm_zones/328
        id:
          type: string
          description: |
            An alphanumeric identifier, unique to the server.

            This is the ID to use in the `source` parameter of [event
            filters](events.html#operation--api-events-get) if you want to limit your events
            to particular alarm zones.
          example: "328"
        name:
          type: string
          example: Roswell building 2 lobby alarms
      description: |
        `/api/alarm_zones` returns an array of these.  It is a subset of what you get from a
        alarm zone's detail page at `/api/alarm_zones/{id}` (linked as the href in this
        object).

    AlarmZoneDetail:
      title: "Alarm Zone detail"
      description: |
        [/api/alarm_zones/{id}](#operation--api-alarm_zones--id--get) returns one of these.
      allOf:
      - $ref: '#/components/schemas/AlarmZoneSummary'
      - type: object
        properties:
          description:
            type: string
            example: "Lobby, cafeteria, inbound artefacts."
          division:
            type: object
            properties: {}
            description: The division containing this Alarm Zone.
            example:
              href: https://localhost:8904/api/divisions/2
          shortName:
            maxLength: 16
            type: string
            example: R2 lobby
          notes:
            type: string
            description: |
              Because of their potential size, notes are only available by request.  Use the 'fields'
              parameter:

              `?fields=defaults,notes,...`
            example: Multi-line text...
          updates:
            type: object
            properties:
              href:
                type: string
                format: url
            description: |
              Follow the URL in the href inside this block to receive the item's current status, then follow
              the `next` link in the results to long poll for changes to that status.

              Update pages take the same `fields` parameter as summary and details pages.  You should use
              that to request all the fields you need in the update.
            example:
              href: https://localhost:8904/api/alarm_zones/328/updates/0_0_0
          statusFlags:
            type: array
            description: |
              The search and details pages do not return status flags by default, because an item's status
              is unknown until something is monitoring it.  If you want status flags on the search and
              details pages you must ask for them using the `fields` parameter, but our advice is to monitor
              them using [status subscriptions](events.html#status-subscriptions) if you are running 8.30 or
              later, otherwise the item's `updates` link.  See the [item status](#topic-Item-status) section
              for a full description of how to stay up to date with item status, and this item's
              introduction in the Operations section for what flags this item might return and what they
              mean.
            example:
            - armed
            items:
              type: string
              example: controllerOffline
          connectedController:
            type: object
            properties:
              name:
                type: string
                example: Third floor C6000
              href:
                type: string
                description: |
                  This is the REST API's identifier for the hardware controller.  It is only an
                  identifier, not a usable URL, because there is no interface for hardware
                  controllers.  GETting the URL will return a 404.
                format: url
                example: https://localhost:8904/api/items/508
              id:
                type: string
                description: |
                  An alphanumeric identifier, unique to the server. This is the ID to use in the `source`
                  parameter of [event filters](events.html#operation--api-events-get) and in the body of [status
                  subscriptions](events.html#status-subscriptions).
                example: "634"
            description: |
              This block describes this item's hardware controller.

              Retrieving it takes a little more time than the other fields so only ask for it if you
              need it.

              Added in 8.50.
          commands:
            type: object
            properties:
              arm:
                type: object
                properties:
                  href:
                    type: string
                    description: |
                      [POST](#operation--api-alarm_zones--id--arm-post) to this to arm this alarm
                      zone until the next scheduled change.
                    format: url
                    example: https://localhost:8904/api/alarm_zones/328/arm
                  name:
                    type: string
                    description: |
                      Because a site can configure different names for different alarm
                      zone states, they appear here.
                    example: Armed
                    default: Armed
                    enum:
                    - Armed
                    - Set
              armUntil:
                type: object
                properties:
                  href:
                    type: string
                    description: |
                      [POST](#operation--api-alarm_zones--id--arm-post) to this to arm this alarm
                      zone for a fixed time.
                    format: url
                    example: https://localhost:8904/api/alarm_zones/328/arm
                  name:
                    type: string
                    description: |
                      Because a site can configure different names for different alarm
                      zone states, they appear here.
                    example: Armed
                    default: Armed
                    enum:
                    - Armed
                    - Set
              disarm:
                type: object
                properties:
                  href:
                    type: string
                    description: |
                      [POST](#operation--api-alarm_zones--id--disarm-post) to this to disarm this
                      alarm zone until the next scheduled change.
                    format: url
                    example: https://localhost:8904/api/alarm_zones/328/disarm
                  name:
                    type: string
                    description: |
                      Because a site can configure different names for different alarm
                      zone states, they appear here.
                    example: Disarmed
                    default: Disarmed
                    enum:
                    - Disarmed
                    - Unset
              disarmUntil:
                type: object
                properties:
                  href:
                    type: string
                    description: |
                      [POST](#operation--api-alarm_zones--id--disarm-post) to this to disarm this
                      alarm zone for a fixed time.
                    format: url
                    example: https://localhost:8904/api/alarm_zones/328/disarm
                  name:
                    type: string
                    description: |
                      Because a site can configure different names for different alarm
                      zone states, they appear here.
                    example: Disarmed
                    default: Disarmed
                    enum:
                    - Disarmed
                    - Unset
              user1:
                type: object
                properties:
                  href:
                    type: string
                    description: |
                      [POST](#operation--api-alarm_zones--id--user1-post) to this to set the alarm
                      zone's state to user1 until the next scheduled change.
                    format: url
                    example: https://localhost:8904/api/alarm_zones/328/user1
                  name:
                    type: string
                    description: |
                      Because a site can configure different names for different alarm
                      zone states, they appear here.
                    example: User1
                    default: User1
              user1Until:
                type: object
                properties:
                  href:
                    type: string
                    description: |
                      [POST](#operation--api-alarm_zones--id--user1-post) to this to set the alarm
                      zone's state to user1 for a fixed time.
                    format: url
                    example: https://localhost:8904/api/alarm_zones/328/user1
                  name:
                    type: string
                    description: |
                      Because a site can configure different names for different alarm
                      zone states, they appear here.
                    example: User1
                    default: User1
              user2:
                type: object
                properties:
                  href:
                    type: string
                    description: |
                      [POST](#operation--api-alarm_zones--id--user2-post) to this to set the alarm
                      zone's state to user2 until the next scheduled change.
                    format: url
                    example: https://localhost:8904/api/alarm_zones/328/user2
                  name:
                    type: string
                    description: |
                      Because a site can configure different names for different alarm
                      zone states, they appear here.
                    example: User2
                    default: User2
              user2Until:
                type: object
                properties:
                  href:
                    type: string
                    description: |
                      [POST](#operation--api-alarm_zones--id--user2-post) to this to set the alarm
                      zone's state to user2 for a fixed time.
                    format: url
                    example: https://localhost:8904/api/alarm_zones/328/user2
                  name:
                    type: string
                    description: |
                      Because a site can configure different names for different alarm
                      zone states, they appear here.
                    example: User2
                    default: User2
              cancel:
                type: object
                properties:
                  href:
                    type: string
                    description: |
                      [POST](#operation--api-alarm_zones--id--cancel-post) to this cancel an
                      active override on the alarm zone, returning it to its scheduled mode.

                      This command will not be available if the alarm zone is not
                      controlled by a schedule (because without a schedule the alarm zone
                      does not have the concept of a 'normal' state).
                    format: url
                    example: https://localhost:8904/api/alarm_zones/328/cancel
            description: |
              A block of commands, each represented by a block containing an href that
              accepts a POST that will send an override to the alarm zone, changing its
              state.

              See the section 'Understanding Alarm Zones' in the Configuration client help
              for a description of alarm zone states.

              It will be missing if your operator does not have a privilege that allows overriding
              the alarm zone (examples of which are in the documentation for the POSTs).

    CardholderSearch:
      title: "Cardholder search"
      x-tags: [Cardholders]
      type: object
      properties:
        results:
          type: array
          description: An array of cardholder summaries.
          items:
            $ref: '#/components/schemas/CardholderSummary'
        next:
          type: object
          properties:
            href:
              type: string
              format: url
          description: The link to the next page.  Absent if you have retrieved them
            all.
          example:
            href: "https://localhost:8904/api/cardholders?skip=61320"
      description: "An array of cardholder summaries, and a `next` link for more."

    CardholderSummary:
      type: object
      properties:
        href:
          type: string
          description: |
            A link to a [cardholder detail](#definition-Cardholder-detail) object for this cardholder.
            This is Command Centre's identifier for this cardholder:  use it whenever you need to
            specify a cardholder in REST operations.
          format: url
          example: "https://localhost:8904/api/cardholders/325"
        id:
          type: string
          description: |
            An alphanumeric identifier, unique to the server.  No API calls use cardholder IDs.

            Deprecated.  Use the href instead.
          readOnly: true
          example: "325"
        firstName:
          type: string
          example: Algernon
        lastName:
          type: string
          example: Boothroyd
        shortName:
          maxLength: 16
          type: string
          description: |
            If you supply a string that is too long when creating or updating
            a cardholder, Command Centre will truncate it.
          example: Q
        description:
          type: string
          example: Quartermaster
        authorised:
          type: boolean
          description: |
            This is called 'Cardholder Authorised' in the administrative clients.  If false, Command
            Centre will deny card access decisions for this cardholder.

            'authorised' is false by default.  If you want a new cardholder to open doors, be sure to
            set it to true in your POST.

            You need the 'Edit cardholders' privilege to set this true.  In versions prior to 8.80
            your operator also needed that privilege to set it false, but in 8.80 and later
            'De-authorise cardholder' is enough on its own.
          example: true
      description: |
        The cardholder search at `/api/cardholders` returns an array of these.  It is a subset of what
        you get from a cardholder's detail page at `/api/cardholders/{id}` (linked as the href in this
        object), to be more suitable for large result sets.

######################################################################

    CardholderDetail:
      description: |
        [/api/cardholders/{id}](#operation--api-cardholders--id--get) returns one of these, and you
        submit [parts of one](#definition-Cardholder-POST-example) in a POST to create a cardholder.

        You may find it contains a block called `updates`.  This is reserved for future
        development and its behaviour will change in later versions of Command Centre.
      allOf:
      - $ref: '#/components/schemas/CardholderSummary'
      - type: object
        properties:
          lastSuccessfulAccessTime:
            type: string
            description: |
              The date and time of the last successful card event or operator-initiated movement
              (using a tag board or [this API](#operation--api-cardholders--id--update_location-post)).
            format: date-time
            readOnly: true
            example: 2004-11-18T19:21:52Z
          lastSuccessfulAccessZone:
            type: object
            properties: {}
            description: |
              The last zone the cardholder entered.

              If their last movement was to the 'outside' (through a door that has no access zone
              configured for that direction of travel) this field will be missing but
              `lastSuccessfulAccessTime` will be present.

              If the cardholder is a visitor and their last
              movement was to leave the site, this will be their visit's reception, not an access
              zone.  8.50 and later will present only the name of the reception and withhold the
              href in that case.

              **Change is coming.**

              A future version of Command Centre will add the href field even if the item is a
              reception.  So you can tell the difference, it will add a field called
              `canonicalTypeName` which will have one of two values:  `accesszone` or `reception`.
            readOnly: true
            example:
              href: https://localhost:8904/api/access_zones/333
              name: Twilight zone
          serverDisplayName:
            type: string
            description: |
              If you are running a multi-server installation and this item is homed on a remote server, this
              field will contain the name of that server.  This field is missing from items that are held on
              the machine that served the API request.  Added in 8.40.

              This is a read-only field.  The server will ignore it if you send it.
            readOnly: true
            example: ruatoria.satellite.int
          division:
            type: object
            properties: {}
            description: |
              The division containing this cardholder.  You must send this when creating a
              cardholder.
            example:
              href: https://localhost:8904/api/divisions/2
          '@Student ID':
            type: object
            description: |
              An example Personal Data Field value.

              All PDFs except images appear at the top level of a cardholder in a field
              named after the PDF with a leading '@'.

              Date PDFs will contain a date-time with the time part set to midnight.

              Image PDFs appear as a block named after the PDF with a leading '@'
              containing an href. GETting that href will return the image data with an
              appropriate content-type header.

              Put your PDF values here when creating or modifying a cardholder.  Note that to hold a
              PDF value the cardholder must be a member of an access group that has that PDF
              attached to it.  In this example, being a member of the special projects group has
              granted our Mr. Boothroyd the student ID and photo PDFs.

              To set an image PDF, Base64-encode the image and send it as a string.  There is one in
              the [cardholder POST example](#definition-Cardholder-POST-example).

              Date PDFs are only accurate to a day, so version 8.75 and later will ignore the time
              and time zone components if you send them.  8.70 and earlier will first perform a
              timezone correction then convert it to UTC before truncating the time, which might
              shift the date back a day if you specified a positive timezone offset.  To be sure
              that does not happen on a server older than 8.75, put `T00:00:00Z` on the end of your date.
            example: "8904640"
          disableCipherPad:
            type: boolean
            description: |
              True if this cardholder should not have the numbers on an alarms terminal scrambled
              when the terminal is configured as a cipher pad.  Usually the reason is a vision
              impairment, making a randomised keypad impracticable.
            example: false
          usercode:
            type: string
            description: |
              This field is write-only, so you will not see it in the results of a GET.  It appears
              here because you can send it in the body of a POST or PATCH.

              Set it to the empty string `""` to clear the cardholder's user code.

              If it is not empty it must be a string of at least four digits.  It may need to be
              longer, because the minimum length is set by your site configuration.

              You will find that "0000" does not work.
            example: "numeric, and write-only"
          operatorLoginEnabled:
            type: boolean
            description: |
              True if this operator can log in to the interactive Command Centre clients.  Note that
              a cardholder also needs a privilege to use the Configuration Client.
            example: true
          operatorUsername:
            type: string
            description: |
              The name that the operator uses when logging in to the interactive clients.  Absent if blank.

              Send the empty string `""` to clear it.
            example: qmaster
          operatorPassword:
            type: string
            description: |
              The password this user must supply when logging in to the interactive clients, if they
              are not using Windows integrated authentication.

              Command Centre imposes password length and complexity restrictions.  If your password
              does not meet those requirements, the entire update will fail.  The body of the 4xx
              response will tell you why.

              Like the user code, this is write-only so you will not see it in the results of a GET.
            example: write-only
          operatorPasswordExpired:
            type: boolean
            description: |
              If true, the interactive clients will request a new password the next time this person
              logs in.
            example: false
          windowsLoginEnabled:
            type: boolean
            description: |
              If true, and they have a Windows username, this user can log in using Windows
              integrated authentication.
            example: true
          windowsUsername:
            type: string
            description: |
              This user's Windows username.  For an example of the format that will work in your
              organisation, look in the 'Windows logon' field of the 'Operator configuration' tab of
              a cardholder's properties in the Configuration Client.

              Send the empty string `""` to clear it.
            example: misix.local\qmaster
          personalDataDefinitions:
            type: array
            description: |
              All the personal data definitions and values for this cardholder.  It is an array of
              objects, each with one key/value pair.  The key is the name of the PDF preceded by
              an '@'; the value is an object containing the definition of the PDF (common for all
              cardholders) and the value for this cardholder.  The `value` block of an image PDF will
              contain an href to the image.

              Your visibility of a cardholder's PDF value depends entirely on the PDF's access
              settings in your operator groups, or if it has none of those, its default privilege.
              The PDF's division is irrelevant.  So if you were expecting a PDF value here when none
              arrived, ensure the cardholder has a value for that PDF (because the server does not
              send nulls) then check the PDF's access settings in all of your operator groups, then
              the default visibility on the PDF item itself.

              When you send this array in a POST or PATCH, Command Centre will take the
              `notifications` flag from here.  It can take `value` from here too, but if you also
              send a field in the root of the cardholder with the name of the PDF preceded by an
              '@', that one wins.

              To request this block using the 'fields' parameter, use `personalDataFields` (note
              'fields' not 'definitions').  Doing so will not only give you the
              `personalDataDefinitions` block, but also the values at the root level (with their names
              preceded by '@'-signs).
            example:
            - '@Student ID':
                href: https://localhost:8904/api/cardholders/325/personal_data/2356
                definition:
                  href: https://localhost:8904/api/personal_data_fields/2356
                  name: Student ID
                  id: "2356"
                  type: string
                value: "8904640"
            - '@Photo':
                href: https://localhost:8904/api/cardholders/325/personal_data/2369
                definition:
                  href: https://localhost:8904/api/personal_data_fields/2369
                  name: Photo
                  id: "2369"
                  type: image
                value:
                  href: https://localhost:8904/api/cardholders/325/personal_data/2369
            items:
              $ref: '#/components/schemas/CardholderPDF'
          cards:
            type: array
            description: |
              All the cards for this cardholder.  Note that even though Command Centre
              calls these things 'cards', they include other types that do not require a physical
              card, such as digital IDs and mobile credentials.
            items:
              $ref: '#/components/schemas/CardholderCard'
          accessGroups:
            type: array
            description: |
              All the cardholder's access group memberships.  This does not list memberships the
              cardholder inherits through other groups.

              The server property 'Show all cardholder access group memberships' does not affect the
              API as it affects the configuration and operational clients, so this field only
              appears if the operator has permission to see access group memberships.  That is
              granted by a privilege such as 'View cardholders'.
            items:
              $ref: '#/components/schemas/CardholderAccessGroup'
          operatorGroups:
            type: array
            description: |
              All the cardholder's operator group memberships.  Added in 8.50.
            items:
              $ref: '#/components/schemas/CardholderOperatorGroup'
          competencies:
            type: array
            description: |
              Every competency a cardholder possesses.  There is quite a lot there:  see the schema
              definition for detailed explanation.
            items:
              $ref: '#/components/schemas/CardholderCompetency'
          edit:
            type: object
            properties: {}
            description: |
              Reserved for internal use.  It is a link to [another
              call](#operation--api-cardholders--id--edit-get) that helps interactive administrative
              clients.  Do not send it when creating or editing a cardholder.
            readOnly: true
            example:
              href: https://localhost:8904/cardholders/325/edit
          updateLocation:
            type: object
            properties: {}
            description: |
              Link to [POST](#operation--api-cardholders--id--update_location-post) to when you want
              to update the location of this cardholder.  Added in 8.20.
            readOnly: true
            example:
              href: https://localhost:8904/api/cardholders/402/update_location
          notes:
            type: string
            description: |
              Free-form text.

              The 'Edit Cardholder Notes' privilege lets you change cardholder notes however you
              like, but 'Add Cardholder Notes' only lets you add more to the end.  To do that, read
              the existing `notes` field, append your text, and send it back in a PATCH.  If you try
              to change the existing text the server will respond with a 4xx.

              You will need one of those two privileges to edit notes.  'Create Cardholders' and
              'Edit Cardholders' let you set most cardholder fields, but not notes.

              Because of the potential size of the notes field, the server does not return it unless
              you ask for it with `fields=notes`.
            example: ""
          notifications:
            type: object
            properties: {}
            description: |-
              This block shows the cardholder's notification settings.  It deserves some explanation.

              The `enabled` bool is correct at the time of your call.  If false, CC will not be
              sending your cardholder any notifications.

              The `from` and `until` date-times show if and when `enabled` will change.  When the
              `from` date-time passes, `enabled` will flip, the `from` date-time will take the
              `until` value, and `until` will become null.  This continues until `from` is null.

              You can set `from` with a null `until`, but not `until` with a null `from`.  They must
              both be in the future or null, and `from` must be before `until`.

              If you want to simply turn a person's notifications on or off without any changes
              scheduled for the future, set `enabled` true or false and both `from` and `until`
              null.
            example:
              enabled: true
              from: 2017-10-10T14:59:00Z
              until: 2017-10-17T14:59:00Z
          relationships:
            type: array
            description: |
              This is a list of the roles that other cardholders perform for this cardholder.

              Since only one cardholder can perform a given role for another, there will be no more
              elements in this array than there are roles on the site.

              The example shows that this cardholder has one supervisor.
            items:
              $ref: '#/components/schemas/CardholderRelationship'
          lockers:
            type: array
            description: |
              All the cardholder's locker assignments.
            items:
              $ref: '#/components/schemas/CardholderLocker'
          elevatorGroups:
            type: array
            description: |
              The cardholder's elevator group properties. They may have one per elevator group.

              Added in 8.50.
            items:
              $ref: '#/components/schemas/CardholderElevatorGroup'
          updates:
            type: object
            properties: {}
            description: |
              Cardholders include an `updates` block, as other items do, that allows monitoring one
              cardholder per TCP session in a long poll.  However the [Cardholder
              changes](#tag-Cardholder-changes) methods are a far more efficient way of monitoring
              your cardholders.
            example:
              reserved: for future use
          redactions:
            type: array
            description: |
              All the cardholder's scheduled redactions.

              Because this is relatively expensive to compute, this field does not appear by
              default.  You must ask for it with `fields=redactions` or
              `fields=redactions.href,redactions.type,redactions.when`, for example.

              Added in 8.80.
            items:
              $ref: '#/components/schemas/CardholderRedaction'

######################################################################

    CardholderPDF:
      description: |
        A personal data definition and its value for a cardholder.  Each definition is an object
        containing one property named after the PDF (plus a leading '@'), which in turn contains its
        value and notifications flag for the containing cardholder and an object containing some of
        the PDF definition's basic fields.

        This is returned as part of a [cardholder](#definition-Cardholder-detail), and you can send it
        in a [POST](#definition-Cardholder-POST-example) or a
        [PATCH](#definition-Cardholder-PATCH-example) to set the PDF's value and notification flag for
        a cardholder.  The server will ignore the `definition` block if you send it back.  It uses the
        name of the block (minus its leading `@`) to find the PDF to change.

        While you can use this structure to change the value of a cardholder's PDF, it may be simpler
        to put a property in the root of the payload named after the PDF with a leading '@'.
      type: object
      additionalProperties:
        $ref: "#/components/schemas/CardholderPDFContent"

      example:
        '@cellphone':
          href: https://localhost:8904/api/cardholders/325/personal_data/9998
          definition:
            href: https://localhost:8904/api/personal_data_fields/9998
            name: cellphone
            id: "9998"
            type: mobile
          value: a@b.com
          notifications: false

    CardholderPDFContent:
      description: |
        A personal data definition and its value for a cardholder.  Each definition is an object
        containing the PDF's value (if it is scalar), a link to its value (for image PDFs), and the
        notifications flag for the containing cardholder with an object containing some of the PDF
        definition's basic fields.

      type: object
      properties:
        href:
          type: string
          description: |
            GET this link to receive this cardholder's value for this PDF.  If it is an image you will
            receive the raw image data with an appropriate content-type.  A browser will render it
            correctly.  If the PDF is not an image the content type will be text/plain, encoded (like
            everything else in this API) as UTF-8.

            It is read-only:  do not send it in a PATCH or POST.
          format: url
          readOnly: true
        definition:
          type: object
          properties:
            href:
              type: string
              description: |
                This is the href of the PDF's definition, common to all cardholders who hold a value
                for this PDF.
              format: url
            name:
              type: string
              description: |
                The PDF's name, without an '@' prefix.
            id:
              type: string
              description: |
                Short alphanumeric identifier used elsewhere in the API to filter cardholder searches
                and add PDF values to alarm and event GETs.
            type:
              type: string
              enum:
              - string
              - image
              - strEnum
              - numeric
              - date
              - address
              - phone
              - email
              - mobile
          description: |
            The definition object is read-only:  do not send it in a PATCH or POST.
          readOnly: true
        value:
          type: string
          description: |
            In a GET response for text and numeric PDFs this will be a scalar containing their actual
            value, but for image PDFs it will be an object containing a copy of the `href` field
            above.

            In versions up to and including 8.60, if a cardholder did not have an image PDF captured
            (in other words they were a member of an access group that included an image PDF, but they
            did not have a value for it) the API returned the string 'Not captured' in the `value`
            field.  Versions 8.70 and later will not return the `value` field at all if there is no image.

            In a POST or PATCH send text PDFs (including dates) as strings, numeric PDFs as numbers or
            strings that parse to numbers, and image data Base64-encoded into a string.
        notifications:
          type: boolean
          description: |
            In a GET response, this will only appear for email and mobile PDF types.  In a POST or
            PATCH, it only makes sense for the same types.

            If true, cardholder notifications will go to the telephone number or email address held by
            this PDF.  Cardholders can have their notifications go to as many contacts as they wish.

      example:
        '@cellphone':
          href: https://localhost:8904/api/cardholders/325/personal_data/9998
          definition:
            href: https://localhost:8904/api/personal_data_fields/9998
            name: cellphone
            id: "9998"
            type: mobile
          value: a@b.com
          notifications: false

######################################################################

    CardholderCard:
      type: object
      properties:
        href:
          type: string
          description: |
            DELETE this link to delete a card.

            Do not specify it when creating a card.

            DELETE is the only verb you can use on this URL.  GET will always return a 404 in the
            current versions of Command Centre.
          format: url
          example: https://localhost:8904/api/cardholders/325/cards/97b6a24ard6d4500a9
        number:
          type: string
          description: |
            For a physical access card, this is its card number.  It must be unique across all cards
            of the same card type.  If you leave it blank when creating a card of a type that has a
            decimal number format, Command Centre will use the next available number.

            Card numbers for a mobile credential need not be unique.  They are strings, and are not
            used by Command Centre except for display.

            Card numbers for digital IDs are GUIDs.

            This field is mandatory for card types with text or PIV number formats.  If the card type
            has a text card number format with a regular expression and you supply a card number that
            does not match that regex, Command Centre will reject your update.

            PIV card numbers must be the same as the card's FASC-N.  PIV-I card numbers must not.

            One rule is common across all card types:  you cannot change the number of an existing
            card or credential.
          example: "1"
        cardSerialNumber:
          type: string
          description: |
            The serial number (CSN, MIFARE UID) of a physical access card as a hex string without a
            leading '0x'.

            The example in this example shows a seven-byte serial in the order you can expect in a
            GET and should use in a PATCH or POST.  Those on NXP MIFARE cards start with 04 and end
            with 80.

            Four-byte serial numbers are in the same format, but shorter: `"EBD62D25"`, for example.

            This may not be not present on older cards.

            This field was read-only until 7.90.  It is read-write in 8.00 and later.
          example: 045A5769713E80
        issueLevel:
          maximum: 15
          minimum: 0
          type: integer
          description: |
            The issue level of a physical access card.  If two cards have the same number
            but different issue levels, only the one with this issue level will gain access.

            If you leave it blank when creating a card, Command Centre will pick an appropriate value.

            If you increase it when modifying a card, all cards with lower issue levels will stop working.

            Do not specify one when creating or updating a mobile credential or digital ID.  They do
            not have issue levels.
          example: 1
        status:
          type: object
          properties:
            value:
              type: string
              description: |
                This card's state, taken from the card type's state set.  The default card
                state set contains 'Active', 'Disabled (manually)', 'Lost', 'Stolen', and
                'Damaged', or translations of those into the server's language.  Your card state sets may
                differ, as they are customisable. PIV cards have extra values covered [in the PIV
                supplement](piv.html#definition-PIV-GET-example).

                In addition to the values in the card type's state set, it will be 'Not Yet Activated'
                if the card's activation date is in the future, 'Expired' if its deactivation date has
                passed, or 'Disabled (by inactivity)' if that is the site's policy.

                Because the values of the `value` field is set by site administrators, you
                should not use it for programmatically determining whether a card is active.
                Use `type` instead.  Use `value` for display.

                When creating or updating a card, set `value` to one of the valid card states from the
                card state set.  Command Centre is not fussy about case.  If you omit it when you
                create a card, Command Centre will use the default for the card state set ('active',
                for the factory state set).
              example: Disabled (manually)
            type:
              type: string
              description: |
                This will be 'pending' if the activation date (`from`) is in the future,
                'expired' if its deactivation date (`until`) is in the past, or 'inactive'
                if it is disabled for one of the reasons given in the card state.

                Never send `type`:  Command Centre always infers it.
              readOnly: true
              example: inactive
              enum:
              - pending
              - active
              - expired
              - inactive
          description: |
            Each card has two status codes:  `value`, and `type`, covered in separate sections below.

            `value` is human-readable.  It comes from the _Card State Set_ configured by the site, and
            could be adjusted according to the card's activation dates.  The REST API and this
            document do not cover card state sets because in most cases, the default set is
            sufficient.  See the online help for the Command Centre client if you wish to create your
            own.

            The second field, `type`, comes from a fixed enumeration, and so is better suited than
            `value` for integrations.  Command Centre derives it from the card's state and activation
            dates.
        type:
          type: object
          properties:
            href:
              type: string
              format: url
              example: https://localhost:8904/api/card_types/354
            name:
              type: string
              example: Card type no. 1
          description: |
            The name of the card type from the site configuration, and a link to the card type object.

            When creating a card, the href must be a card type that makes sense for the other values
            you placed this object.

            You cannot change a card's type once it is created.
        invitation:
          type: object
          properties:
            email:
              type: string
              description: |
                The email address to which Command Centre will send or did send an invitation for this
                credential.
              example: nick@example.com
            mobile:
              type: string
              description: |
                The telephone number to which Command Centre will send or did send an SMS containing a
                confirmation code for this invitation.
              example: "02123456789"
            singleFactorOnly:
              type: boolean
              description: |
                If you set this true Command Centre will not require a PIN or fingerprint from the
                cardholder when they enrol.  Be aware that without that second authentication factor,
                zones in modes that require a PIN and readers that always require a second factor will
                not grant access to the cardholder.

                `singleFactorOnly` will only be in the result of a GET if it is true.  If it is false,
                the field will be missing.
              example: true
              default: false
            status:
              type: string
              description: |2

                - `sent` means Command Centre is waiting for the user to accept the invitation, either
                  in Gallagher Mobile Connect or another app that uses the Mobile Connect SDK.

                - `accepted` means that the credential is ready for use.

                - `notSent` means the credential is only a few seconds old or Command Centre is having
                  trouble contacting the cloud.

                - `expired` means that Command Centre did not receive a response in time.
              readOnly: true
              example: sent
              enum:
              - notSent
              - sent
              - expired
              - accepted
            href:
              type: string
              description: |
                Mobile applications use this URL to accept this invitation.  See the Mobile Connect
                SDK documentation for how to do that in your own applications.

                Only present if 'status' is 'sent'.
              format: url
              readOnly: true
              example: https://security.gallagher.cloud/api/invitations/abcd1234defg5678
          description: |
            Command Centre will only return this object for a mobile credential, and you should send
            it only when creating one.  In the interests of security you cannot modify the invitation
            block of an existing credential.  Someone's thumb might be on its way to accept it, after all.
            If there was something wrong with it you should delete it and start afresh.

            Whether you should send `mobile` or `email` when creating a mobile credential depends on
            whether you are using the Gallagher mobile apps or your own.

            If you specify either `mobile` or `mail` to early-version servers you must also supply the
            other so that Command Centre can send both an email invitation and a confirmation SMS.  It
            is an error to only specify one on those servers.

            Later versions of Command Centre made the SMS verification optional to better support
            installations that use the Gallagher apps but dependence on cellular connectivity is
            undesirable.  You do not need to send a mobile number when creating such a credential.

            If you do not give an email address Command Centre cannot send an invitation to the
            cardholder.  It will be up to another application to complete the creation of this
            credential using the Mobile Connect SDK.

            You should not send a mobile number when creating a credential for use by third-party apps
            that use the Mobile Connect SDK.  SMS is not supported there.

            For more detail on using the Mobile Connect SDK, including more complete coverage of how
            an email address and mobile number are used in the provisioning process, see its
            documentation at [gallaghersecurity.github.io](https://gallaghersecurity.github.io).

        from:
          type: string
          description: |
            The start of the time period during which this card is active.  If this time is in the
            future, the card is not active.

            When it is not set, Command Centre acts as though it is set to a time in the distant past.

            When modifying a card, send a null string `""` to reset it.

            It must be before midnight on the morning of January 1, 2100 _local_ time (so servers with
            positive timezone offsets have maximums during December 31 2099), and it must be less than
            or equal to than the `until` time.  A future version of Command Centre will clamp too-high
            values to December 31 2099 and return a 2xx (success) instead of 400 in that case.

            The server will reject timestamps in card updates that are not in an acceptable format.
            But in requests to create a card, rather than modify an existing card, the server will
            ignore such strings and use the card type's defaults.  This is undesirable behaviour and
            will change in a future version of Command Centre.
          format: date-time
          example: 2017-01-01T00:00:00Z

        until:
          type: string
          description: |
            The end of the time period during which this card is active.  If this time is in the past,
            the card is not active.

            When it is not set, Command Centre acts as though it is set to a time in the distant future.

            When modifying a card, send a null string `""` to reset it.

            It must be before midnight on the morning of January 1, 2100 _local_ time (so servers with
            positive timezone offsets have maximums during December 31 2099), and it must be greater
            than or equal to the `from` time.  A future version of Command Centre will clamp too-high
            values to December 31 2099 and return a 2xx (success) instead of 400 in that case.

            The server will reject timestamps in card updates that are not in an acceptable format.
            But in requests to create a card, rather than modify an existing card, the server will
            ignore such strings and use the card type's defaults.  This is undesirable behaviour and
            will change in a future version of Command Centre.
          format: date-time
          example: 2017-12-31T11:59:59Z

        credentialClass:
          type: string
          description: |
            This indicates the type of the card.  It comes from an enumeration, and is a reliable way
            of determining the credential's type.

            Added in 8.00.

            The experimental `applePass` was added in 9.10.  Its name may change in future versions.

            The `govPass` credential class will change its name in 9.30.
          readOnly: true
          example: mobile
          enum:
          - card
          - digitalId
          - govPass
          - mobile
          - piv
          - pivi
          - trackingTag
          - transact

        trace:
          type: boolean
          description: |
            If set, using this credential will generate an event.

            This field is not in the default set so you will not see it unless you ask for it using
            the `fields` query parameter.

            Added in 8.30.
          example: false

        lastPrintedOrEncodedTime:
          type: string
          description: |
            The date and time this card was last printed or encoded.  It will not come out by
            default - you need to ask for it with `fields=cards.lastPrintedOrEncodedTime`.

            Added in 8.40.
          format: date-time
          readOnly: true
          example: 2020-08-10T09:20:50Z
        lastPrintedOrEncodedIssueLevel:
          maximum: 15
          minimum: 1
          type: integer
          description: |
            The issue level of this card when it was last printed or encoded, provided it was
            non-zero.  It will not come out by default - you need to ask for it with
            `fields=cards.lastPrintedOrEncodedIssueLevel`.

            Added in 8.40.
          readOnly: true
          example: 1
        pin:
          type: string
          description: |
            Even though this appears in the example of a cardholder GET, this is a write-only field.
            You can use it in POSTs and PATCHes but the server will not send it to you.

            Being numeric, you might be tempted to send PINs to the server without surrounding quotes.
            However if you do that, leading zeros will be lost when the server converts them to
            integers.  Putting quotes around the PIN forces the server to treat them as strings, which
            preserves any leading zeros.

            8.90 servers will reject your request if the card's `credentialClass` is not `card`,
            `piv`, `piv-i`, or `govPass`.  More recent servers will issue a warning in that case, and
            will not set the PIN, but will allow the rest of the update.

            PINs were added to the API in 8.90.
          example: "153624"
        visitorContractor:
          type: boolean
          description: |
            This is a credential property only for GovPass, indicating that the enrolled credential is
            for a visitor / contractor.

            It is a write-once field new to 9.00.
          example: false
        ownedBySite:
          type: boolean
          description: |
            This is a credential property only for GovPass, indicating if the site is the owner of the
            card.

            It is a read-only field new to 9.00.
          readOnly: true
          example: false
        credentialId:
          type: object
          description: Reserved for use by Gallagher applications.
          example: reserved
        bleFacilityId:
          type: object
          description: Reserved for use by Gallagher applications.
          example: reserved
      description: |
        A _card_ is an access credential, including physical cards and mobile (Bluetooth and NFC)
        credentials and digital IDs.  The server returns it as part of a [cardholder's
        details](#definition-Cardholder-detail), and you supply it when creating or modifying a card
        or credential on a cardholder.

        Every card has a type, a status, and a validity period.  Its type determines other fields of
        relevance, described below.

        PIV cards are complex enough to warrant a [document of their own](piv.html).

######################################################################
######################################################################
    CardholderAccessGroup:
      title: Cardholder access group
      type: object
      properties:
        href:
          type: string
          description: |
            DELETE this URL to remove this group membership, and use it in the body of a PATCH to a
            cardholder to identify memberships you want to modify.

            Note that changing an access group membership with a PATCH will change this href.  Do not
            cache it.

            DELETE is the only verb you can use on this URL.  GET returns a 404.
          format: url
          example: https://localhost:8904/api/cardholders/325/access_groups/D714D8A89F
        accessGroup:
          type: object
          description: |
            An object containing a link to this group's detail page and (when sent by the the server)
            its name.  You should not send it when modifying a group membership because you cannot
            change a group membership's group; you can only change its dates.  But you must send it
            when adding a new group membership, of course, because it identifies the cardholder's new
            group.  Just send the href:  don't bother with the name.

            8.70 and later will not return the link if your operator does not have the privilege to
            view the access group (given by 'View access groups', for example).
          example: { name: "R&D special projects group", href: "https://localhost:8904/api/access_groups/352" }
        status:
          type: object
          properties:
            value:
              type: string
              description: |
                The state of this cardholder's access group membership, in the site's language.  In an
                English locale, the value is the same as the type, but capitalised.
              readOnly: true
              example: Pending
            type:
              type: string
              description: |
                The state of this cardholder's access group membership.

                This will be 'pending' if the activation date is set and in the future,
                'expired' if its deactivation date is set and in the past, or 'active'.
              readOnly: true
              example: pending
              enum:
              - pending
              - active
              - expired
          description: |
            The two fields in this block are read-only because they are determined by the `from` and
            `until` dates.
          readOnly: true
        from:
          type: string
          description: |
            The start of the time period during which this group membership is active.  If
            this time is in the future, the card will be inactive.

            When sending this to a server of version 7.90.883 or earlier, use UTC with a trailing 'Z'.
            More recent versions understand timezone offsets.
          format: date-time
          example: 2017-01-01T00:00:00Z
        until:
          type: string
          description: |
            The end of the time period during which this group membership is active.  If
            this time is in the past, the card will be inactive.

            When sending this to a server of version 7.90.883 or earlier, use UTC with a trailing 'Z'.
            More recent versions understand timezone offsets.
          format: date-time
          example: 2017-12-31T11:59:59Z
      description: |
        An _access group_ is an object in Command Centre.  This section is about a connection between an access group and
        a cardholder, called a _membership_.  A cardholder can be a member of many groups, and groups
        can have any number of members.

        Less obvious is that a cardholder can have many memberships to the same group.  This is useful
        because a membership has a validity period, expressed with `from` and `until` date-times.
        Outside those moments Command Centre does not regard the cardholder as being a member of the
        group.  If there exists one membership with `from` in the past or unset and `until` in the
        future or unset, the cardholder is a member.

        Presence in an access group affects physical access rights and possession of PDFs, among other
        things.

        The membership object can come from the server in a cardholder's details, and you send it to
        the server when modifying a cardholder's group memberships.  All uses are described below.

######################################################################
    CardholderOperatorGroup:
      type: object
      properties:
        href:
          type: string
          description: |
            DELETE this URL or use it in the 'operatorGroups' block of a [cardholder
            PATCH](#operation--api-cardholders--id--patch) to remove this operator group membership.

            DELETE is the only verb you can use on this URL.  GET will always return a 404.
          format: url
          example: https://localhost:8904/api/cardholders/325/operator_groups/EBDRSD
        operatorGroup:
          type: object
          description: |
            An object containing a link to this operator group's detail page and its name.  It is
            marked read-only because you do not send it to the server when managing a cardholder's
            operator groups:  you cannot change a group membership's group.

            The link will be absent if your operator does not have the privilege to view the operator
            group ('View operators' or 'Edit operators', for example).
          readOnly: true
          example: { name: "Locker admins", href: "https://localhost:8904/api/operator_groups/532" }
      description: |
        An _operator group_ is an object in Command Centre.  The connection between an operator group
        and a cardholder is a _membership_.  A cardholder can be a member of many different operator
        groups, and operator groups usually have more than one member, but a cardholder can only have
        one membership to a given operator group at a time.  This is because an operator group
        membership, unlike an access group membership, does not have start and end dates.

        Presence in an operator group affects software access.  Your REST operator, for example, must
        be in an operator group that grants privileges otherwise it will receive nothing but 404s.

        Added to the API in 8.50.

######################################################################
    CardholderCompetency:
      type: object
      properties:
        href:
          type: string
          description: |
            Use this URL as the target of a DELETE to remove a cardholder's competency, or in the body
            of a cardholder PATCH to modify it.

            DELETE is the only verb you can use on this URL.  GET will always return a 404.
          format: url
          readOnly: true
          example: https://localhost:8904/api/cardholders/325/competencies/2dc3p0
        competency:
          type: object
          properties:
            href:
              type: string
              format: url
          description: |
            This contains the competency's name and its href.  They are read only because they
            belong to the competency itself, not the cardholder's link to it.
          readOnly: true
          example:
            href: https://localhost:8904/api/competencies/2354
            name: Hazardous goods handling
        status:
          type: object
          properties: {}
          description: |
            This object contains two strings.  Both are read-only, so do not specify them when
            assigning or updating a cardholder's competency.  `value` is taken from the site's
            language pack, suitable for display. `type` comes from a fixed enumeration.  It will be
            `expiryDue` or `active` when the cardholder carries this competency; anything else means
            no.  A fuller explanation follows.

            A competency can be disabled, expired, both, or neither.  Whether it is _enabled_ is a
            flag on the cardholder's holding of the competency.  Whether it is _expired_ is derived from an expiry
            timestamp (accurate to the second):  if it is in the past, Command Centre considers the
            competency expired.

            A competency can also have an `enablement` date.  If that date (timestamp) passes while the
            competency is disabled, Command Centre will enable the competency.  It will leave the date on
            the item for future reference, though it will not affect the competency again.

            If the competency is disabled, the status `type` will be `inactive` when there is no
            enable date or it is in the past, and `pending` when the enable date is in the future
            (i.e., there is an automatic re-enablement coming).

            If the competency is not disabled, the `expiry` time is important.  If it is in the past,
            `type` will be `expired`.

            All of those cases are negative.  Two remain, when our cardholder is blessed with an
            enabled and active competency.  `type` will be `expiryDue` if the `expires` time is in the
            future but within the competency's advance notice period, or `active` if the `expires`
            time is beyond the advance notice period or not set at all.

            You can see and set the enabled flag, the enable date, and the expiry date via this
            API.

            When creating a cardholder or updating a competency on an existing cardholder, you should
            set the `enabled` field one way or the other, and the `enablement` and `expiry` dates if
            you wish.  They will determine the contents of this status block.

            Here it is in table form.  The first two rows are the positive cases, when Command Centre
            would grant access to a competency-enforced zone.

            | Enabled flag | Enablement date | Expiry date | `status.type`
            | ------------ | -------------- | --------| ----- |
            | true | - | Far future | active |
            | true | - | Near future | expiryDue |
            | true | - | Past | expired |
            | false | Future | - | pending |
            | false | Past | - | inactive |
            | false | Unset | - | inactive |
          readOnly: true
          example:
            value: Pending
            type: pending

        expiryWarning:
          type: string
          description: |
            The time at which the cardholder will (or did) receive a warning about the
            competency expiring.  If this time is set and in the past but the competency has
            not yet expired and is still enabled, the status type will be `expiryDue`.
          format: date-time
          readOnly: true
          example: 2017-03-06T15:45:00Z
        expiry:
          type: string
          description: "The time at which the competency will expire.  If this time\
            \ is set, in the past, and the competency is enabled, status type will\
            \ be `expired`."
          format: date-time
          example: 2017-03-09T15:45:00Z
        enablement:
          type: string
          description: "The time at which the competency will be re-enabled.  If set\
            \ and in the future, and the competency is disabled, the status type will\
            \ be `pending`."
          format: date-time
          example: 2018-03-09T15:45:00Z
        comment:
          type: string
          description: The comment appears in the management clients when viewing
            the cardholder.
          example: CPR refresher due March.
        limitedCredit:
          type: boolean
          description: |
            If false, Command Centre's 'Pre-pay Car Parking' feature (available under its own licence)
            will not reduce the current credit.

            This field will be in the results if its value is true.
          example: true
        credit:
          type: integer
          description: |
            The balance, or amount of credit left on this competency for use by Pre-pay Car Parking.
            It can be negative.

            This field will be in the results if its value is not zero.
          example: 37
      description: |
        A _competency_ is an object in Command Centre with some basic fields like a name and a notice
        period.  Its purpose is to allow a site to refuse access to cardholders who do not meet a
        special requirement.

        This section describes the link between a cardholder and a competency.  The status of that link
        determines whether they "hold" the competency for the purposes of access control decisions at
        the door.  When we talk about updating, adding, or deleting a competency in the cardholder
        API, we do not mean the competency object itself, but rather the link a cardholder has to the
        competency.

        The link is a block in the cardholder detail.  You can also put it in the results of a
        cardholder search by putting `competencies` in the `fields` parameter.

        This particular section describes what you receive from a GET.  The [Cardholder competency
        update](#definition-Cardholder-competency-update) describes what you should send in a POST or
        PATCH to set or update a cardholder's link to a competency.

######################################################################

    CardholderRelationship:
      description:  |
        A _role_ is an object in Command Centre.  They are usually named using nouns such as
        'supervisor', 'manager', or 'team leader'.

        The operator clients and the REST API allow you to create a link between two
        cardholders, called a relationship, using a role.  The link is directional:  we
        refer to the cardholder who 'has' the role as the child, and the cardholder who
        performs or 'is' the role as the parent.

        A parent can perform a role for any number of child cardholders, but a child can only have one
        relationship (parent) for each role.  Command Centre will reject your submission if you try to
        create a relationship when one already exists for the same child and role.

        For example, a role on your system might be 'supervisor'.  A cardholder can be a supervisor
        for any number of others, but will only have one supervisor.

        Loops are possible:  two cardholders can supervise each other, for example.

        The REST API manages relationships through the child cardholder.  You can create them at the
        same time as creating the child in a POST, or add them later in a PATCH.

        There is currently no way to list all a cardholder's children in one request (everyone a
        particular cardholder is supervising, for example).  You would achieve that by iterating
        through all cardholders, after re-reading the efficiency tips, and checking their
        relationships - quite easily done in JSONPath.

        This section describes the object you receive in a cardholder's detail page and you will send
        in a POST or PATCH.  The child cardholder does not appear in it because he or she is
        identified by the URL of the request.

      properties:
        href:
          type: string
          format: url
          description: |
            DELETE this link, or put it in `relationships.remove.href` of a PATCH, to sever the
            relationship between the two cardholders.  Specify it in `relationships.update.href` of a
            PATCH to update the relationship.

            Do not specify it when creating a new relationship.

            DELETE is the only verb you can use on this URL.  GET will always return a 404.

          example: "https://localhost:8904/api/cardholders/325/relationships/179lah1170"
        role:
          type: object
          description: |
            This is the role that the parent identified in the next block performs for the cardholder
            identified by the request URL.

            Once set, this cannot be changed.  Command Centre will ignore it if you send it
            in an update PATCH.  If you need to swap a parent from one role to another, send
            an add and a delete in the same PATCH.
          example:
            href: "https://localhost:8904/api/roles/5396"
            name: "Supervisor"
        cardholder:
          type: object
          description: |
            The href and name of the cardholder that performs this role.

            The three name fields are read-only:  Command Centre sends them to you in the body of a
            GET but will ignore them if you send them in the body of a POST or PATCH.

            This block and the href in it are unnecessary when deleting a relationship.  The href is
            required when creating one, and optional when updating, but strongly advised since the
            cardholder is the only thing about a relationship you can change.

            `firstName` and `lastName` appeared in 8.20.

          example:
            href: "https://localhost:8904/api/cardholders/5398"
            name: "Miles Messervy"
            firstName: "Miles"
            lastName: "Messervy"

######################################################################

    CardholderLocker:
      description: |
        These appear in an array in a cardholder detail, showing the cardholder's allocated lockers.
        Each allocation has `from` and `until` dates, much like cards and access group memberships,
        outside of which the allocation is inactive.

        A locker can have allocations to more than one cardholder, with separate or overlapping
        periods.  Unlike access groups, however, one cardholder cannot have more than one allocation
        to the same locker.

      properties:
        href:
          type: string
          format: url
          description: |
            DELETE this to end a cardholder's use of a locker, or use it to identify the
            allocation you wish to modify in a [cardholder
            PATCH](#operation--api-cardholders--id--patch).

            DELETE is the only verb you can use on this URL.  GET will always return a 404.

          example: "https://localhost:8904/api/cardholders/325/lockers/t1m4"
        locker:
          description: |
            This href in this object is a link to the allocated locker, and is the identifier to use
            when allocating the same locker to another cardholder.

            The object also contains the name and short name of the locker, and the name and
            identifying href of its bank.

          type: object
          example:
            name: "Bank A locker 1"
            shortName: "A1"
            lockerBank:
              href:  "https://localhost:8904/api/locker_banks/4567"
              name: "Bank A"
            href:  "https://localhost:8904/api/lockers/3456"
        from:
          description: |
            The start of the time period during which the cardholder has access to this locker.

            Send an empty string `""` to reset it.
          type: string
          format: date-time
          example: "2017-01-01T00:00:00Z"
        until:
          description: |
            The end of the time period during which the cardholder has access to this locker.

            Send an empty string `""` to reset it, making the allocation permanent.
          type: string
          format: date-time
          example: "2018-12-31T00:00:00Z"

######################################################################

    CardholderElevatorGroup:
      description: |
        These appear in an array in a cardholder detail, showing the cardholder's elevator
        group properties.

        A cardholder can have one default floor per elevator group. The elevator system will
        prepare a car to carry that cardholder to the access zone shown here when the cardholder
        badges a card at an appropriately configured kiosk.

        Elevator system features can be activated by enabling the feature for an elevator group.
        For example, 'VIP features' gives exclusive access to an elevator car to the passenger.

      properties:
        href:
          type: string
          format: url
          description: |
            The href of this cardholder's elevator group entry.  DELETE this to remove it from the
            cardholder.
          example: "https://localhost:8904/api/cardholders/325/elevator_groups/567"
        elevatorGroup:
          description: |
            The href and name of the elevator group for which this cardholder has a default
            floor or passenger types.
          example: {
            href: "https://localhost:8904/api/elevator_groups/635",
            name: "Main building lower floors" }
        accessZone:
          description: |
            The href and name of the access zone (floor) to which this cardholder is most
            likely to want to travel after entering the group's main elevator lobby. This 
            property will be missing if the cardholder does not have a default floor for this elevator group.
          example: {
            href: "https://localhost:8904/api/access_zones/637",
            name: "Lvl 1 lift lobby"}
        enableCaptureFeatures:
          type: boolean
          description: |
            Cardholders can select and recall specific elevators to specific floors using
            a kiosk. Once captured, the elevator car can be placed on independent service to
            give users control of the car to clean the interior or perform maintenance.
          example: true
        enableCodeBlueFeatures:
          type: boolean
          description: |
            A special elevator mode which is commonly found in hospitals. It allows an elevator
            to be summoned to any floor for use in an emergency situation.
          example: false
        enableExpressFeatures:
          type: boolean
          description: |
            Allows the cardholder to program selected elevators to cycle continuously between two
            floors for a pre-determined duration. For example, this feature can help hotels transport
            food efficiently from their kitchen to a ballroom on another floor. You can also prevent
            other guests from boarding to provide your banquet guests with VIP treatment.
          example: true
        enableServiceFeatures:
          type: boolean
          description: |
            Service personnel can use this function to call an empty elevator and ride it nonstop
            to their destination floor. The user simply registers a call via a card swipe or PIN entry
            that is pre-programmed to grant access.
          example: false
        enableService2Features:
          type: boolean
          description: |
            Service personnel can use this function to call an empty elevator and ride it nonstop
            to their destination floor. The user simply registers a call via a card swipe or PIN entry
            that is pre-programmed to grant access.
          example: true
        enableService3Features:
          type: boolean
          description: |
            Service personnel can use this function to call an empty elevator and ride it nonstop to
            their destination floor. The user simply registers a call via a card swipe or PIN entry
            that is pre-programmed to grant access.
          example: true
        enableVipFeatures:
          type: boolean
          description: |
            VIP operation allows cardholders to swipe a card or enter a PIN to isolate the elevator
            and provide uninterrupted access to their designated floor.
          example: false

######################################################################

    CardholderPOST:
      description: |
        ***TODO*** reword as the schema, not as an example

        This is an example of a POST you could use to create a cardholder in a specific division and
        access group, with an access card, another cardholder as a supervisor, a competency, a student
        ID and a photo held in personal data fields, and two lockers.

        There are plenty more fields than shown in this example.  For a complete list please see the
        schema for the detailed [cardholder object](#definition-Cardholder-detail) that you receive
        from a cardholder href.

      required: [ division ]
      properties:
        firstName:
          type: string
          description: You must supply either this or the last name when creating a cardholder.
          example: "Algernon"
        lastName:
          type: string
          description: You must supply either this or the first name when creating a cardholder.
          example: "Boothroyd"
        shortName:
          type: string
          example: "Q"
        description:
          type: string
          example: "Quartermaster"
        authorised:
          description: |
            Remember to set this true, as shown here in the POST, or later in a PATCH.  Otherwise your
            new cardholder will never get through a door.
          type: boolean
          example: true
        division:
          type: object
          description:  |
            Mandatory when creating any cardholder.  In this example, we want all students
            in division 5387.
          example:
            href: "https://localhost:8904/api/divisions/5387"
        "@email":
          description: |
            An example PDF value.  In this example, access group 352 must include a PDF
            called 'email' otherwise this will appear to have no effect.

          type: string
          example: "user@sample.com"
        "@headshot":
          description: |
            An example image PDF encoded to Base64.  Access group 352 must include this PDF as well.
            As a quick visual check on your encoding, JPEGs start with `/9j/`.
          type: string
          example: "/9j/4A...=="
        personalDataDefinitions:
          description: |
            This is how you set and unset the notifications flags on PDFs.  If you do not do it here
            when you first give a cardholder a PDF, it will come from the PDF's definition.
          type: array
          items: {$ref: '#/components/schemas/CardholderPDF'}
          example:
            - "@email": {notifications: true}
        cards:
          description: |
            This example creates one physical card of type 600 with a PIN and a system-generated card
            number, and
            another of type 654 which--judging by the invitation block--must be a mobile credential.
            Command Centre will send an invitation to Nick at those coordinates.

            Card PINs were added to the API in 8.90.
          type: array
          items: {$ref: '#/components/schemas/CardholderCard'}
          example:
            - type: {href: "https://localhost:8904/api/card_types/600"}
              pin: "153624"
            - type: {href: "https://localhost:8904/api/card_types/654"}
              number: "Nick's mobile"
              invitation:
                email: "nick@example.com"
                mobile: "02123456789"
                singleFactorOnly: true

        accessGroups:
          type: array
          items: {$ref: '#/components/schemas/CardholderAccessGroup'}
          description:  |
            Here you can add the access groups necessary to give your new cardholder the
            PDFs and access he or she needs.  In this example we set the activation date of
            the access group membership to the first of January 2019.
          example:
            - accessgroup:
                href: "https://localhost:8904/api/access_groups/352"
              from: "2019-01-01"
        operatorGroups:
          type: array
          items: {$ref: '#/components/schemas/CardholderOperatorGroup'}
          description:  |
            Here you can add the operator groups necessary to give your new cardholder the
            software access he or she needs.  Added in 8.50.
          example:
            - operatorgroup:
                href: "https://localhost:8904/api/operator_groups/523"
        competencies:
          type: array
          items: {$ref: '#/components/schemas/CardholderCompetency'}
          description: |
            In this example we are giving our new cardholder a disabled competency, set to enable in
            January 2019.
          example:
            - competency:
                href: "https://localhost:8904/api/competencies/2354"
              enabled: false
              enablement: "2019-01-01"

        notes:
          type: string
          example: ""
        notifications:
          type: object
          description: "You can set or update any of the three fields in this block."
          example:
            enabled: true
            from: "2017-10-10T14:59:00Z"
            until: "2017-10-17T14:59:00Z"
        relationships:
          type: array
          items: {$ref: '#/components/schemas/CardholderRelationship'}
          description: |
            Here you would set the cardholders who will perform roles for this cardholder.

            The example shows that this cardholder will have cardholder 5398 performing role 5396.

            Remember that you can supply an array of these objects if your cardholder is having more
            than one role filled.
          example:
            - role:
                href: "https://localhost:8904/api/roles/5396"
              cardholder:
                href: "https://localhost:8904/api/cardholders/5398"
        lockers:
          type: array
          description: |
            Here you set all the cardholder's locker assignments.  Ensure you are only attempting to
            give your cardholder a locker according to site policy (one locker per locker bank, for
            example), otherwise the POST will fail.

            The example shows our cardholder receiving two lockers.
          items: {$ref: '#/components/schemas/CardholderLocker'}
          example:
            - locker:
                href:  "https://localhost:8904/api/lockers/3456"
            - locker:
                href:  "https://localhost:8904/api/lockers/3457"

        elevatorGroups:
          type: array
          description: |
            Here you set all the new cardholder's default elevator floors and passenger types. Passenger type properties
            are false by default.

            The example shows our cardholder receiving a default floor for the first elevator group,
            with the Code Blue feature enabled in the second group.

            Added in 8.50.
          items: {$ref: '#/components/schemas/CardholderElevatorGroup'}
          example:
            - elevatorGroup:
                href:  "https://localhost:8904/api/elevator_groups/635"
              accessZone:
                href:  "https://localhost:8904/api/access_zones/637"
            - elevatorGroup:
                href:  "https://localhost:8904/api/elevator_groups/639"
              enableCodeBlueFeatures: true

######################################################################

    CardholderUpdateLocationPOSTExample:
      description: |

        ***TODO*** reword as the schema rather than an example
        
        This is an example of a POST you could use to move a cardholder to a target access zone.

      properties:
        accessZone:
          type: object
          properties:
            href:
              type: string
              format: url
              example: "https://localhost:8904/api/access_zones/412"
              description: |
                The href of the access zone into which you want to move your cardholder.  This example
                came from the [access zones
                controller](rest.html#operation--api-access_zones-update_cardholder_location-get), but
                you can also use an href from the [items controller](events.html#tag-Items) if you do
                not have a RESTStatus or (in 8.60) RESTOverrides licence.

######################################################################

    CardholderPATCHExample:

      description: |

        ***TODO*** reword as the schema rather than an example

        Send one of these in a PATCH to `/api/cardholders/{id}` to modify the cardholder at that URL,
        or to add and modify cards, competencies, groups, and relationships.

        All the cardholder fields you can supply are described in the [cardholder
        detail](#definition-Cardholder-detail).

        This example:

          - sets 'authorised' true,
          - sets a PDF holding an employee ID,
          - changes the notification flags on two PDFs,
          - adds two new credentials, one card and one mobile,
          - changes the issue level with `Stolen` as the reissue reason and clears the until date on another credential,
          - deletes a third credential with `Lost` as the remove reason,
          - adds two access group memberships, one unending and one with an until date,
          - clears the until date on another access group membership,
          - removes a fourth access group membership,
          - adds a competency, inactive, with a future enablement date,
          - activates a competency that the cardholder already had,
          - adds one relationship,
          - changes the cardholder on another,
          - adds one locker assignment with a from date,
          - sets the until date on another locker assignment,
          - removes a third locker assignment,
          - adds two operator group memberships,
          - removes a third operator group membership,
          - adds an elevator group with a default floor,
          - modifies another elevator group, turning the 'code blue' feature on and the VIP feature off, and
          - removes a third elevator group.

        This is also the method you use for changing a cardholder's name, description, notes, user
        code, etc.

        In addition to those fields, this PATCH format accepts five arrays:  'cards',
        'accessGroups', 'competencies', 'relationships', and (in 8.50) 'operatorGroups'.

      properties:
        authorised:
          type: boolean
          example: true
          description: |
            You can modify [all the fields](#definition-Cardholder-detail) on a cardholder, provided
            you have the necessary privileges,
        "@employeeId":
          type: string
          example: THX1139
          description: |
            Replace PDF values as though they were flat fields on a cardholder.  Prefix the name of
            the PDF with `@`, and Base64-encode images.  Send 'null' if you want to delete a PDF value.

            Remember that a cardholder's record will not return a PDF if he or she is not a member of
            the access group that grants that PDF.  In this example, one or both of access groups 352
            and 124 are attached to 'employeeId'.
        personalDataDefinitions:
          description: |
            This is how you set and unset the notifications flags on PDFs.  Presumably this cardholder
            wants to receive notifications at the email address stored in the 'email' PDF rather than
            by SMS.
          type: array
          items: {$ref: '#/components/schemas/CardholderPDF'}
          example:
            - "@email": {notifications: true}
            - "@cellphone": {notifications: false}

        cards:
          type: object
          description: |
            This object can contain three arrays, named 'add', 'update', and 'remove'.  Every element
            you put in those arrays should be in the [card schema](#definition-Cardholder-card).

            Each element of the 'add' array will need a 'type' member, at the very least.  Every card
            field makes sense here except 'href'.  Only existing cards have hrefs.  This example adds
            two cards:  one has nothing more than the type, so it will receive blank 'from' and
            'until' dates and a computed number and issue level.  The other is a mobile credential (it
            has an 'invitation' block) with a custom initial state.

            Each element of the 'update' array should be a card to modify.  It will need the href of
            that card, plus the fields you want to change.  Remember you cannot change a card's type.
            The example changes the issue level and resets the 'until' date.

            The only field that makes sense in an element of the 'remove' array is 'href' and 'status'.

            You can remove and add cards in the same PATCH.  In fact you should do that in preference
            to making multiple API calls.  That is a good way of reissuing a mobile credentials, for
            example:  put the href to the old one in the 'remove' array and a new invitation in the
            'add' array.  The new credential should have the same card number and the same 'type' and
            'invitation' blocks as the credential you're re-issuing.

            Do not put the same href in both the 'update' and 'remove' arrays.

            In version 8.90 and later you can specify a card state in the `value` field inside the
            `status` block when removing a card or changing its issue level.  It becomes the final
            state of the card if you remove it or the final state of the card with the previous issue
            level if you re-issue it, so it must be one of the valid states for the card type.  The
            Gallagher clients and the resulting event call this state the 'reason' for the re-issue or
            removal.  By default it will be the same as the card's current state.

          example:
            add:
              - type:
                  href: "https://localhost:8904/api/card_types/354"
                pin: "153624"
              - type:
                  href: "https://localhost:8904/api/card_types/600"
                number: "Jock's iPhone 8"
                status: { value: "Pending sign-off"}
                invitation: { email: "jock@example.com" }
            update:
              - href: "https://localhost:8904/api/cardholders/325/cards/97b6a24ard6d4500a9d"
                issueLevel: 2
                until: ""
                status: { value: "Stolen" }
                pin: "153624"
            remove:
              - href: "https://localhost:8904/api/cardholders/325/cards/77e8affe7c7e4b56"
                status: { value: "Lost" }

        accessGroups:
          type: object
          description: |
            Like the 'cards' object, this can contain three arrays named 'add', 'update', and
            'remove'.  Every element you send in those arrays should be in the [access group
            schema](#definition-Cardholder-access-group).

            This operation does not modify access groups in Command Centre; it works on a cardholder's
            memberships to those groups.

            Each element of the 'add' array will need an 'accessGroup' member containing an href
            identifying the group to which you wish to add the cardholder.  The other fields are
            optional.  If you omit 'from', the membership will take effect immediately.  If you omit
            'until', it will be unending.

            Each element of the 'update' array will need an href identifying the membership (not the group!) to update,
            and one or both of the 'from' and 'until' date-times with new values.  You cannot
            change the group:  just the activity period.  The example removes the until date, effectively making
            the group membership unending.

            In version 7.90.883 or earlier, 'from' and 'until' should be in UTC with a
            trailing 'Z'.  Releases after 883 understand different timezones here.

            Note that updating a cardholder's group membership will change its href, so do not cache
            it.

            The only field that makes sense in an element of the 'remove' array is the href.

            Do not put the same href in both the 'update' and 'remove' arrays.

          example:
            add:
              - accessGroup:
                  href: "https://localhost:8904/api/access_groups/352"
              - accessGroup:
                  href: "https://localhost:8904/api/access_groups/124"
                until: "2019-12-31"
            update:
              - href: "https://localhost:8904/api/cardholders/325/access_groups/10ad21"
                until: ""
            remove:
              - href: "https://localhost:8904/api/cardholders/325/access_groups/10ed27"

        competencies:
          type: object
          description: |
            Like the cards and accessGroups objects, this can contain three arrays named 'add',
            'update', and 'remove'.  Every element should be in the [cardholder competency
            schema](#definition-Cardholder-competency).

            This operation does not modify Command Centre's competencies:  it works on a cardholder's
            holdings of those competencies.

            Each element of the 'add' array will need a 'competency' block containing an href member
            identifying the competency you wish to grant the cardholder.  All other fields are optional.
            Note that attempting to give a cardholder a competency he or she already has
            will result in an error or an alarm depending on the server version.

            Each element of the 'update' array will need an href identifying the
            cardholder/competency link to update, and one or more of the 'expiry', 'enabled',
            'enablement', 'comment', 'limitedCredit', and 'credit' fields.

            The only field that makes sense in an element of the 'remove' array is the href
            of the link between the cardholder and the competency.

            Do not put the same href in both the 'update' and 'remove' arrays.

            In this example we are giving the cardholder a disabled competency which will enable
            in 2021, and activating another competency.

          example:
            add:
              - competency:
                  href: "https://localhost:8904/api/competencies/2354"
                enabled: false
                enablement: "2021-01-01T08:00+13"
            update:
              - href: "https://localhost:8904/api/cardholders/325/competencies/2dc3"
                enabled: true

        relationships:
          type: object
          description: |
            It should be no surprise that this can contain three arrays named 'add', 'update', and
            'remove', and that every element should be in the [relationship
            schema](#definition-Cardholder-relationship).

            This operation does not modify Command Centre's roles:  it works on the relationships
            between two cardholders.

            Each element of the 'add' array will need a 'role' member containing an href identifying
            the type of relationship you wish to establish, and a 'cardholder' member containing an
            href identifying the other party (the one who will perform the role for the cardholder at
            the URL you are PATCHing).  There are no optional fields.

            Each element of the 'update' array will need an href identifying the relationship to
            update, and one or both of the 'role' and 'cardholder' blocks containing the updated
            values.  The example leaves the role but changes the cardholder - a new supervisor,
            presumably.

            The only field that makes sense in an element of the 'remove' array is the href.

            Do not put the same href in both the 'update' and 'remove' arrays.

          example:
            add:
              - role:
                  href: "https://localhost:8904/api/roles/5396"
                cardholder:
                  href: "https://localhost:8904/api/cardholders/5398"
            update:
              - href: "https://localhost:8904/api/cardholders/325/roles/1799lah1170"
                cardholder:
                  href: "https://localhost:8904/api/cardholders/10135"

        lockers:
          type: object
          description: |
            With you well in the habit by now, each element of your three arrays should be in the
            [cardholder locker schema](#definition-Cardholder-locker).  They will allocate lockers to
            cardholders, de-allocate them, and adjust validity periods.

            Each member of the 'add' array will need a 'locker' member containing an href identifying
            the locker to allocate.  The cardholder you will allocate it to is identified by the
            request URL, remember.

            Each member of the 'update' array will need an href identifying the allocation to update,
            and one or both of the 'from' and 'until' date-times.

            The validity period is all you can change about a locker allocation.  If you want to
            change the locker, delete the old one and add a new.  You can do that in the same PATCH,
            with one element in each of the 'add' and 'remove' arrays.

            This example allocates one locker starting in January 2019, sets the end-date of an
            existing allocation to the end of February 2020, and removes another entirely.

          example:
            add:
              - locker:
                  href: "https://localhost:8904/api/lockers/1200"
                  from: "2019-01-01"
            update:
              - href: "https://localhost:8904/api/cardholders/325/lockers/wxyz1234"
                until: "2020-02-29"
            remove:
              - href: "https://localhost:8904/api/cardholders/325/lockers/abcd4321"

        operatorGroups:
          type: object
          description: |
            This can contain two arrays named 'add' and 'remove'.  Every element you send in those
            arrays should be in the [cardholder operator group
            schema](#definition-Cardholder-operator-group).

            Each element of the 'add' array will need an 'operatorGroup' member containing an href
            identifying the operator group to which you wish to add the cardholder.  Supported in 8.50
            and later.

            The only field that makes sense in an element of the 'remove' array is the href.  Make
            sure it is the href of the membership, not of the operator group.  Supported in 8.90 and
            later.

            There is nothing about an operator group membership that you can change so there is no
            point to an 'update' array.  Operator group memberships are, or are not:  there is no
            update.

          example:
            add:
              - operatorGroup:
                  href: "https://localhost:8904/api/operator_groups/532"
              - operatorGroup:
                  href: "https://localhost:8904/api/operator_groups/535"
            remove:
              - href: "https://localhost:8904/api/cardholders/325/operator_groups/EBDRSD"

        elevatorGroups:
          type: object
          description: |
            This can contain three arrays named 'add', 'update', and
            'remove', each containing an element in the [cardholder elevator group
            schema](#definition-Cardholder-elevator-group).

            The 'elevatorGroup' block only makes sense in the 'add' array.  The 'update' array is for
            changing the cardholder's default floor and passenger types on an existing elevator group
            assignment.

            The server will ignore all fields in the elevatorGroup and accessZone objects except 'href'
            if you place them in the body of your PATCH.

            Remove the default floor in an update by supplying an accessZone block with the href set
            to null or "".

            Change a passenger type in an update by supplying the new value. The passenger type will
            be unchanged otherwise.

            As with cards and access group memberships etc., the server ignores root-level hrefs in
            the elements of an 'add' array, requires them in the 'update' array (since they indicate
            the entries to work on), and ignores everything but them in the 'remove' array.

            The example shows our cardholder receiving a default floor for one elevator group and
            updating the Code Blue and VIP passenger types for another elevator group.

            Added in 8.50.
          example:
            add:
              - elevatorGroup:
                  href:  "https://localhost:8904/api/elevator_groups/635"
                accessZone:
                  href:  "https://localhost:8904/api/access_zones/637"
            update:
              - href: "https://localhost:8904/api/cardholders/325/elevator_groups/1268613268"
                enableCodeBlueFeatures: true
                enableVipFeatures: false
            remove:
              - href: "https://localhost:8904/api/cardholders/325/elevator_groups/3498734"

    CardholderChanges:
      description: |
        An array of cardholder changes, described in the next section, and a `next` link for more.
      properties:
        results:
          type: array
          description: An array of cardholder changes.
          items: { $ref: '#/components/schemas/CardholderChange' }

        next:
          type: object
          description: |
            The link to the next page of changes.  This will always be present, because (unlike items)
            changes never run out.

            Because the `next` link is a pointer to the head of a queue of changes, and new changes
            are being added to that queue which will not suit your filter or privileges, it will
            change even when there are no results.

            Therefore you should always use this link for your next query.  Do not be tempted to
            re-use a URL after `results` comes back empty, thinking you merely need to ask the same
            question again.  Doing that will cause the server unnecessary work, skipping over changes
            that did not pass your filter or privilege checks on the previous call.

          properties:
            href: { type: string, format: url }
          example:
            href: "https://localhost:8904/api/cardholders/changes?pos=SWEp9"

    CardholderChange:
      description: |
        `/api/cardholders/changes` returns an array of these.  Each contains a description of a change
        made to a cardholder.

        In this example a cardholder has had his name changed from Craig to Gavin, has had an
        enablement date set on a competency, and has had a card and access group membership added.

        ### Notes

        - Changes to an access group membership will have a different href in the `oldValues` and
          `newValues` blocks, because modifying a group membership changes its ID.

        - The API will not notify changes to a competency's `credit` integer or `limitedCredit`
          boolean.  These fields are part of a separate Command Centre feature and are not supported
          by the changes API.

        - The API will report a spurious change to a PDF value when a cardholder rejoins an access
          group he or she was previously a member of, provided that access group carried a PDF with no
          default and the cardholder did not have a value for it.

        - This API will not notify changes to `lastSuccessfulAccessTime` or
          `lastSuccessfulAccessZone`.

      properties:
        href:
          type: string
          format: url
          description: |
            Command Centre's identifier for this change.  This has no use in the API:  you cannot use
            it as a URL, but you may like to use it to track the changes you have seen.
          example: "https://localhost:8904/api/cardholders/changes/f4e67a"
        time:
          type: string
          format: date-time
          description: The time that this change occurred.
          example: "2020-01-14T03:14:33Z"
        type:
          description: |
            'add' if this change added a cardholder, 'update' if it modified a cardholder, or 'remove'
            if it deleted a cardholder.
          type: string
          enum: [ add, update, remove ]
          example: "update"
        item:
          description: |
            A block containing the href of the changed cardholder.  You can GET this URL to find the
            cardholder's current state, or you could add the cardholder block to the change using
            `fields=cardholder` in the query.  Note that you can add individual cardholder fields such
            as PDFs using `fields=defaults,cardholder.personalDataFields`.
          type: object
          example: {"href":"https://localhost:8904/api/cardholders/525"}
        operator:
          description: |
            A block containing the href and current name of the operator who made this change.

            Because building this block requires more work from the server it is not in the default
            field set.  If you need it you must ask for it using the fields parameter:
            `fields=defaults,operator`.
          type: object
          example: {"name": "System Operator", "href": "https://localhost:8904/api/items/1"}
        oldValues:
          description: |
            A block containing the values of the changed fields before the change, if Command Centre
            still has them, in the same format as a [cardholder
            detail](#definition-Cardholder-detail).  If a value is blank, it means that the value was
            null before the change or the server no longer has it.

            Because this requires extra effort from the server, you may like to omit this block using
            something like `fields=time,type,item,operator` unless you are particularly interested in
            historical data.

          example:
            firstName: "Craig"
            competencies:
            - "enablement": ""
              "href": "https://localhost:8904/api/cardholders/525/competencies/3910e4"
        newValues:
          description: |
            A similar block containing the values of the changed fields after the change, if the
            server has them.

            Generally, this block is less useful than the current state of the cardholder, described
            next.  It also requires extra effort from the server, so you may like to omit this block
            using `fields`.

          example: {
            firstName: "Gavin",
            competencies: [
              {
                "enablement": "2020-02-29T00:00:00Z",
                "href": "https://localhost:8904/api/cardholders/525/competencies/3910e4"
              }
            ],
            cards: [
              {
                "number": "2",
                "cardSerialNumber": "",
                "issueLevel": 1,
                "from": "",
                "until": "",
                "href": "https://localhost:8904/api/cardholders/525/cards/285f779af1ef49abbba"
              }
            ],
            "accessGroups": [
            {
            "accessGroup": {
              "name": "Access Group 1",
              "href": "https://localhost:8904/api/access_groups/499"
              },
              "from": "",
              "until": "2020-01-15T04:39:00Z",
              "href": "https://localhost:8904/api/cardholders/525/access_groups/f9cb328b4"
              }
            ] }
        cardholder:
          description: |
            A block containing the current fields on the cardholder, provided the cardholder has not
            been deleted.  This is in the same format as a [cardholder
            detail](#definition-Cardholder-detail).

            Because building this requires more work from the server it is not in the default result
            set.  If you need it you must ask for it using the `fields` parameter.  While the server
            has a default field set for cardholders, your query will be more efficient if you ask for
            just the fields you need:
            `fields=defaults,cardholder.firstName,cardholder.lastName,cardholder.cards`, etc.  Note
            how you must prefix each field with `cardholder` since they are all inside a block with
            that name.
          example: {
            firstName: "Gavin",
            cards: [
              {
                "number": "2",
                "cardSerialNumber": "",
                "issueLevel": 1,
                "from": "",
                "until": "",
                "href": "https://localhost:8904/api/cardholders/525/cards/285f779af1ef49abbba"
              }
            ] }

######################################################################

    CardTypeSearch:
      description: |
        An array of card types, and a `next` link for more.  Sites generally have only a handful of
        card types, so when retrieving them you should set your 'top' parameter high enough that you
        do not need the 'next' link.
      properties:
        results:
          type: array
          description: An array of card types.
          items: { $ref: '#/components/schemas/CardType' }

        next:
          type: object
          description: The link to the next page.  Absent if you have retrieved them all.
          properties:
            href: { type: string, format: url }
          example:
            href: "https://localhost:8904/api/card_types/assign?skip=1000"

    CardType:
      description: |
        This object describes a single Card Type.  "Credential type" would be a better name, as it
        includes mobile credentials.
      properties:
        href:
          type: string
          format: url
          example: "https://localhost:8904/api/card_types/600"
          description: |-
            This is the identifier to use when assigning a card to a cardholder in a cardholder
            [PATCH](#operation--api-cardholders--id--patch) or
            [POST](#definition-Cardholder-POST-example).

            This is also the URL for the card type's detail page.  GETting it will return you a 404 if
            you do not have 'View site' or 'Configure site' on the card type's division.

        id:
          type: string
          example: "600"
          description: |
            The API does not use this field.  Nor should you.
        name: {type: string, example: "Red DESFire visitor badge"}
        division:
          type: object
          description: |
            The division that contains this card type.  Required when creating a card type.

            New to 8.50.
          example:
            href: "https://localhost:8904/api/divisions/2"

        notes:
          type: string
          example: "Disabled after 7d inactivity, 6-char PIN"
          description: |
            Free text.

            Because of its potential size, the server does not return the notes field by default.  You
            need to ask for it with `fields=notes`.
        facilityCode:
          type: string
          description: |
            A facility code is a letter (A-P) followed by up to five digits.  It is encoded onto cards
            so that they only work at sites with the correct facility code.

            PIV cards, PIV-I cards, and mobile credentials do not have a facility code.

            Most credential classes require a facility code on creation.  But it cannot be changed
            once set, so this field is ignored in a PATCH.
          example: "A12345"
        availableCardStates:
          readOnly: true
          type: array
          items: {type: string, enum: ['Active', 'Disabled (manually)', 'Lost', 'Stolen', 'Damaged']}
          description: |
            All credential types have a set of card states.

            If you need this, ask for it using the `fields` parameter.

            This field is read-only:  it is derived from the card type's card state set (also known as
            a workflow).  If you send it in a POST or a PATCH, the server will ignore it.
          example:
          - "Active"
          - "Disabled (manually)"
          - "Lost"
          - "Stolen"
          - "Damaged"
        credentialClass:
          type: string
          description: |
            Required when creating a new card type but ignored when modifying one since a credential's
            type cannot be changed once set.
          enum: [ "piv", "pivi", "card", "mobile", "digitalId", "govPass", "trackingTag", "transact" ]
          example: card
        minimumNumber:
          description: |
            For card types with integer card numbers, this is the minimum.  Must be non-negative.
          type: string
          example: "1"
        maximumNumber:
          description: |
            For card types with integer card numbers, this is the maximum.  Must be non-negative.
          type: string
          example: "16777215"
        serverDisplayName:
          readOnly: true
          <<: *SERVER
        regex:
          description: |
            This is the regular expression that a text card number
            must match before Command Centre will accept it. 
          type: string
          example: "^[A-Za-z0-9]+$"
        regexDescription:
          description: Regular expressions often need explaining to your users.
          type: string
          example: "Only alphanumeric characters"

    CompetencySearch:
      description: An array of competency summaries, and a `next` link for more.
      properties:
        results:
          type: array
          description: An array of competency summaries.
          items: { $ref: '#/components/schemas/CompetencySummary' }

        next:
          type: object
          description: The link to the next page.  Absent if you have retrieved them all.
          properties:
            href: { type: string, format: url }
          example:
            href: "https://localhost:8904/api/competencies?skip=1000"

    CompetencySummary:
      description: |
        The competency search at `/api/competencies` returns an array of these.  The object contains
        some of what you get from a competency's detail page at `/api/competencies/{id}`, linked as
        the href in this object.
      properties:
        href:
          type: string
          format: url
          example: "https://localhost:8904/api/competencies/2354"
          description: |-
            This is the identifier to use when assigning a competency to a cardholder in a cardholder
            [PATCH](#operation--api-cardholders--id--patch) or
            [POST](#definition-Cardholder-POST-example).

        id: {type: string, example: "2354"}
        name: {type: string, example: "Hazardous goods handling"}
        description: {type: string, example: "Required for access to chem sheds."}
        serverDisplayName: {type: string, example: "ruatoria.satellite.net"}
        notes: {type: string, example: ""}

    CompetencyDetail:
      description: |
        [/api/competencies/{id}](#operation--api-competencies--id--get) returns one of these.  It
        contains the same fields you see when you view or edit a competency in the Configuration
        client.
      properties:
        href: {type: string, format: url, example: "https://localhost:8904/api/competencies/2354"}
        id: {type: string, example: "2354"}
        name: {type: string, example: "Hazardous goods handling"}
        description: {type: string, example: "Required for access to chem sheds."}
        serverDisplayName: {type: string, example: "ruatoria.satellite.net", readOnly: true}
        division:
          type: object
          description: The division containing this competency.
          example: {id: "2", href: "https://localhost:8904/api/divisions/2" }
        notes: {type: string, example: ""}
        shortName: {type: string, example: ""}
        expiryNotify:
          type: boolean
          example: false
          description: |
            Set if notifications should go out before a cardholder loses this competency.  How long
            before is in the 'noticePeriod' block.  Who the notification goes to, in addition to the
            cardholder holding the competency, depends on the cardholder's relationships and what
            notifications are set on the relationship's role.
        noticePeriod:
          description: |
            How long before expiry Command Centre should send its notification and display 'expiry
            due' messages on display devices such as a T20 and through this API.

            A zero-length notice period means there will be no warning notification.
          properties:
            units:
              type: string
              enum: [ "days", "weeks", "months", "years" ]
              example: "weeks"
            number: {type: integer, minimum: 0, maximum: 999, example: 2, default: 0 }
        defaultExpiry:
          type: object
          description: |
            In this block, 'expiryType' and 'expiryValue' tell you the expiry time Command Centre will
            use if the operator does not specify one when assigning this competency to a cardholder.
            It can be unset (meaning the assignment will be unending), a fixed date, or a time period.

            In this example, cardholders will hold the 'Hazardous goods handling' competency
            for six months after an operator first gives it to them.  In practice, the
            operator should enter the closest end date of the qualifications that allow them
            to handle hazardous goods.  Safety and first aid training, presumably.
          properties:
            expiryType:
              type: string
              enum: [ "none", "durationdays", "durationweeks", "durationmonths", "durationyears", "date" ]
              example: "durationmonths"
              default: none
              description: If 'none', there is no default expiry.

            expiryValue:
              description: |
                This field will be missing if 'expiryType' is 'none', a string containing a date-time
                if 'expiryType' is 'date', or an unquoted integer between zero and 999 otherwise.

                Zero is a valid value.  Because durations are always rounded up to shortly before
                midnight, an expiryValue of zero means that the competency will be active for the rest
                of the day on which the operator grants it.
              example: 6
        defaultAccess:
          type: string
          example: "fullAccess"
          enum: [ "noAccess", "readOnly", "fullAccess" ]
          default: "fullAccess"
          description: |
            This is the access that operators will have to cardholders' assignments of this competency
            if the operator is not a member of an operator group that overrides it.  Check the
            operator group's 'Competency' tab in the Configuration Client.

    Divisions:
      type: object
      properties:
        results:
          type: array
          description: An array of division objects.
          items:
            $ref: '#/components/schemas/Division'
        next:
          type: object
          properties:
            href:
              type: string
              format: url
              example: https://localhost:8904/api/divisions/view_events?skip=10
          description: |
            A site generally does not have too many divisions.  You should be able to collect them all
            in one request by using the `top` parameter.  If not, follow this link to get the next
            page of divisions.
      description: |
        Calls inside `/api/divisions/` return this object, which is simply a named array of
        objects each containing some information about a division.

    Division:
      type: object
      properties:
        href:
          type: string
          description: A self reference.
          format: url
          example: https://localhost:8904/divisions/2
        id:
          type: string
          description: |
            The alphanumeric ID of the division.  Use this ID in the `division` filter when requesting
            events.
          example: "2"
        name:
          type: string
          description: The division's name.
          example: Root division
        description:
          type: string
          description: The division's description.  New in 8.50.  Not sent by default;  ask
            for it with `fields`.
          example: Contains all other divisions
        serverDisplayName:
          $ref: "#/x-common-blocks/server"
        parent:
          type: object
          properties:
            href:
              type: string
              format: url
              example: https://localhost:8904/divisions/2
          description: An object containing an href to the division entity representing
            the current division's parent. GET the href for full details.
        visitorManagement:
          type: object
          properties:
            active:
              type: boolean
              description: |
                If present and true, this division has its own visitor management configuration.
                Otherwise it uses its parent's.  That is also indicated by the presence or absence of
                the `visitorTypes` block.
              example: true
            visitortypes:
              type: array
              description: |
                This is an array of items, each containing a 'visitor type'.  A visitor type comprises
                three things:  an access group, to which visitor management will add every visitor as
                soon as they are on the visit, host access groups, to one of which the host cardholder
                must belong, and visitor access groups, to which Command Centre will add a visitor when
                they sign in.

                When creating a visit you must pick a visitor type that is in the same division as the
                visit's reception.  The visitor type you pick determines which host you can assign (he
                or she must be a member of at least one of the visitor type's host access groups) and
                which visitor access groups you can assign (they must be in the visitor type's list of
                visitor access groups).
              items:
                type: object
                properties:
                  href:
                    type: string
                    description: |
                      This is the href you should use for a visitor type when you create or update a
                      visit.

                      It is only used for identification:  GETting it will 404.
                    format: url
                    example: https://localhost:8904/api/divisions/2/visitor_types/925
                  accessGroup:
                    type: object
                    properties:
                      name:
                        type: string
                        example: Visitor access group 1
                      href:
                        type: string
                        format: url
                        example: https://localhost:8904/api/access_groups/925
                    description: |
                      The name and href of an access group.

                      Command Centre will add cardholders to this access group as soon as you add them
                      to a visit of this type.  The purpose of this group is to grant access to PDFs
                      for personal data that will help them sign in on the day, such as passport and
                      driver's licence numbers, and photos.
                  hostAccessGroups:
                    type: array
                    description: |
                      Names and hrefs of more access groups.  When you create or modify a visit of
                      this type, its host cardholder must belong to one of these.

                      A host is the cardholder Command Centre notifies when a visitor arrives, and is
                      ultimately responsible for the visitor while on site.
                    items:
                      type: object
                      properties:
                        accessGroup:
                          type: object
                          properties:
                            name:
                              type: string
                              example: Host access group 1
                            href:
                              type: string
                              format: url
                              example: https://localhost:8904/api/access_groups/938
                  visitorAccessGroups:
                    type: array
                    description: |
                      An array of access groups.

                      Command Centre will add visitors to a visit's 'visitor access groups' when they
                      sign in.  Their purpose is to grant visitors access through the site's doors so
                      that they can move around the site.

                      When creating a visit using this visitor type, you can only pick visitor access
                      groups from this list.

                      The server puts each group's name and href inside a block called `accessGroup`,
                      rather than in the root of the array element, to allow for expansion in a future
                      version.
                    example:
                    - accessGroup:
                        name: Access group 22
                        href: https://localhost:8904/api/access_groups/926
                    - accessGroup:
                        name: Access group 30
                        href: https://localhost:8904/api/access_groups/927
                    items:
                      type: object
                      properties:
                        accessGroup:
                          type: object
                          properties:
                            name:
                              type: string
                            href:
                              type: string
                              format: url
                          description: |
                            The name and href of an access group.  Command Centre will add the
                            visitors on the visit to this access group when they sign in.
          description: |
            An object containing the division's visitor management configuration.  It only appears if
            you ask for it with `fields=visitorManagement` and if your operator has the necessary
            privilege ('View Site', 'Edit Site', 'View Visits', 'Edit Visits', or 'Manage
            Receptions').
      description: |
        When a REST call returns the division of a Command Centre item such as a cardholder or access
        group, or when you ask it for the divisions in which an operator has a particular privilege,
        it will give an href inside `/divisions/`.  Following that href will return one of these.

    DivisionPatchAndPOSTExample:
      type: object
      properties:
        name:
          type: string
          description: |
            The division's name.  If you supply a name and another division already exists with that
            name, the call will fail.  If you leave it blank in a POST, Command Centre will pick value
            for you.
          example: Long division
        description:
          type: string
          description: The division's description.
          example: Quatermasters
        notes:
          type: string
          description: |
            A string, able to be much longer than `description`, suitable for holding notes about the
            division.
          example: A very long string.
        parent:
          type: object
          properties:
            href:
              type: string
              format: url
              example: https://localhost:8904/api/divisions/2
          description: |
            An object containing an href to the division entity representing the current division's parent.

            Required when creating a new division, because only root divisions can be unparented and
            you cannot create a new one of those.
      description: |
        This is an example of a PATCH you could use to update a division, and a POST you could use to create one.

        When POSTing, `parent` is mandatory.

  

    DoorSearch:
      description: An array of door summaries, and a `next` link for more.
      properties:
        results:
          type: array
          description: An array of door summaries.
          items: { $ref: '#/components/schemas/DoorSummary' }

        next:
          type: object
          description: The link to the next page.  Absent if you have retrieved them all.
          properties:
            href: { type: string, format: url }
          example:
            href: "https://localhost:8904/api/doors?skip=1000"

    DoorSummary:
      description: |
        `/api/doors` returns an array of these.  It is a subset of what you get from a
        door's detail page at `/api/doors/{id}` (linked as the href in this object).
      properties:
        href:
          type: string
          format: url
          description: |
            A link to a [door detail](#definition-Door-detail) object for this door.
          example: "https://localhost:8904/api/doors/332"
        id:
          type: string
          description: |
            An alphanumeric identifier, unique to the server.  This is the ID to use in the
            `source` parameter of [event filters](events.html#operation--api-events-get)
            when you are interested in events originating at this door.

          example: "332"
        name:
          type: string
          example: "Front door"

    DoorDetail:
      description: |
        [/api/doors/{id}](#operation--api-doors--id--get) returns one of these.

      allOf:
        - type: object
          properties:
            description:
              type: string
              example: "Main lobby doors."
            division:
              type: object
              description:  The division containing this door.
              example:
                href: "https://localhost:8904/api/divisions/2"
            entryAccessZone:
              type: object
              description: |
                The name and href of the access zone to which this door allows entry.
              properties:
                name: {type: string, example: "Roswell building 2 lobby"}
                href:
                  description: |
                    This is the address of the [access zone's detail](#definition-Access-Zone-detail)
                    page (which includes a link back here in its `doors` array).
                  type: string
                  format: url
                  example: "https://localhost:8904/api/access_zones/3280"
            exitAccessZone:
              type: object
              description: |
                The name and href of the access zone to which this door allows entry in the reverse
                direction (from its exit reader).

                It will not appear by default.  You need to ask for it with `fields=exitAccessZone`.

                New to 8.50.
              properties:
                name: {type: string, example: "Roswell building 2 cafeteria"}
                href:
                  description: |
                    This is the address of the [access zone's detail](#definition-Access-Zone-detail)
                    page (which includes a link back here in its `doors` array).
                  type: string
                  format: url
                  example: "https://localhost:8904/api/access_zones/50"
            notes: {<<: *NOTES}
            shortName: {<<: *SHORTNAME}
            updates:
              <<: *UPDATES
              example: { href: "https://localhost:8904/api/doors/332/updates/0_0_0" }
            statusFlags:
              <<: *STATUSFLAGS
              example: ["secure", "closed", "locked"]
            commands:
              type: object
              description: |
                An array of commands, each represented by a block containing an href that accepts a
                POST to send an override.  The only override you can send to a door is 'open'.

                If your operator is privileged to override the door's entry zone, and the zone only
                has one door, there will be 17 more links:  four each of the four access zone modes,
                plus 'cancel'.  Each zone mode has four variants:  with or without PINs, and with or
                without an end time.

                This block will only contain the links that your operator is privileged to perform.
                Examples of the privileges you need are in the documentation for the POSTs.

                The zone overrides are not repeated here.

              properties:
                open:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/doors/332/open"
                      description: "[POST](#operation--api-doors--id--open-post) to this to open this door."
                      type: string
                      format: url
            connectedController:
              type: object
              description: |
                This block describes this door's hardware controller.

                Retrieving it takes a little more time than the other fields so only ask for it if you
                need it, if your doors are legion.
              properties:
                name: {type: string, example: "Third floor C6000"}
                href:
                  type: string
                  format: url
                  example: "https://localhost:8904/api/items/508"
                  description: |
                    This is the REST API's identifier for the hardware controller.  It is only an
                    identifier, not a usable URL, because in 8.30 there is no interface for hardware
                    controllers.  GETting the URL will return a 404.
                id:
                  <<: *ID
                  example: "634"

        - $ref: "#/components/schemas/DoorSummary"

    ElevatorGroupSummary:
      description: |
        The [elevator group search](#operation--api-elevator_groups-get) returns an array of these, if
        you don't use the `fields` parameter to ask for more.  It is a subset of what you get from the
        'modify passenger details' search or the elevator group's detail page (which is linked as the
        href in this object).
      properties:
        href:
          type: string
          format: url
          description: |
            A link to a [elevator group](#definition-Elevator-Group-detail) object for this
            elevator group.
          example: "https://localhost:8904/api/elevator_groups/635"
        name:
          type: string
          example: "Main building lower floors"

    ElevatorGroupFloorAccessDetail:
      description: |
        The [modify passenger details search](#operation--api-elevator_groups-modify_passenger_details-get)
        returns an array of these.  It is everything you need to pick a default floor for a
        cardholder, but a subset of what you get from an elevator group's detail page (which is linked
        as the href in this object).
      allOf:
        - type: object
          properties:
            division:
              type: object
              description:  The division containing this elevator group.
              example:
                id: "2"
                href: "https://localhost:8904/api/divisions/2"
            floorAccess:
              description: |
                An array of objects describing the floors in this elevator group.

                This example only has one floor.  Expect more from production systems.
              type: array
              items:
                type: object
                properties:
                  floorNumber:
                    type: integer
                    minimum: 1
                    example: 1
                    description: |
                      This is Command Centre's internal identifier for the floor.  Passengers do
                      not see it.
                  frontService:
                    type: boolean
                    example: true

                    description: |
                      True iff the elevator car has a front-facing door and the elevator 
                      services the floor with the front of the elevator.

                      This field requires the RESTStatus licence in versions up to and including 8.50.
                      Starting with 8.60 it requires either the RESTStatus or the RESTOverrides
                      licence.
                  rearService:
                    type: boolean
                    example: true

                    description: |
                      True iff the elevator car has a rear-facing door and the elevator 
                      services the floor with the rear of the elevator.

                      This field requires the RESTStatus licence in versions up to and including 8.50.
                      Starting with 8.60 it requires either the RESTStatus or the RESTOverrides
                      licence.
                  floorName:
                    type: string
                    example: "Level 1"
                    description: |
                      This is a friendly name that Command Centre presents to operators as the name of the
                      floor.
                  frontAccessZone:
                    description: |
                      The access zone into which the elevator car's front door opens.  It will be
                      missing if the car's front door does not open on ths floor.
                    type: object
                    properties:
                      id:
                        <<: *ID
                        example: "637"
                      name: {type: string, example: "Lvl 1 lift lobby"}
                      href:
                        type: string
                        format: url
                        example: "http://localhost:8904/access_zones/637"
                  rearAccessZone:
                    description: |
                      The access zone into which the elevator car's rear door opens.  It will be
                      missing if the car's rear door does not open on this floor, or if the elevator
                      group's `rearAccessEnabled` is false.
                    type: object
                    properties:
                      id:
                        <<: *ID
                        example: "638"
                      name: {type: string, example: "Lvl 1 lift lobby rear"}
                      href:
                        type: string
                        format: url
                        example: "http://localhost:8904/access_zones/638"

        - $ref: "#/components/schemas/ElevatorGroupSummary"

    ElevatorGroupDetail:
      description: |
        [/api/elevator_groups/{id}](#operation--api-elevator-groups--id--get) returns one of these.

      allOf:
        - type: object
          properties:
            description:
              type: string
              example: "Main building lobby elevator group."
            notes: {<<: *NOTES}
            shortName: {<<: *SHORTNAME}
            elevatorGroupNumber:
              type: integer
              example: 1
              description: |
                The elevator system's internal identifier for this elevator group.

            elevatorSystem:
              type: object
              properties:
                id: {<<: *ID, example: "632"}
            rearAccessEnabled:
              description: |
                True only if the elevator group uses rear doors on its cars to service the other side
                of the shaft.
              type: boolean
              example: true
            groundFloorNumber:
              type: integer
              minimum: 1
              example: 1
              description: |
                The identifier of the floor that this elevator group calls 'ground'.

        - $ref: "#/components/schemas/ElevatorGroupSummary"

    EventSearch:
      description: "`/api/events` and `/api/events/updates` return this structure."

      type: object
      properties:
        events:
          type: array
          description: A list of event summaries.
          items: { $ref: "#/components/schemas/EventSummary" }
        previous:
          type: object
          description: |
            Follow this link to make a non-blocking call to collect the previous page of events (in
            order of arrival).  It will return an empty page if you have already received the first
            event in the database.
          properties:
            href:
              type: string
              format: url
              example: "https://localhost:8904/api/events/next?previous=True&pos=61320"
        next:
          type: object
          description: |
            Follow this link to make a non-blocking call to collect the next page of events, moving
            forward in arrival time.  It will return an empty page if no more events are available.

          properties:
            href:
              type: string
              format: url
              example: "https://localhost:8904/api/events/next?pos=61320"

        updates:
          type: object
          description: |
            This is a link to an [updates](#operation--api-events-updates-get) call.  Follow it to
            make a blocking call to collect more events.  If there are none, the call will block until
            one arrives or the call times out.  This link will contain your column select, pagination,
            and filtering parameters (`fields`, `top`, `after`, `before`, `source`, `type`, etc.) but it drops
            `deadline`.  You need to add that to each call.
          properties:
            href:
              type: string
              format: url
              example: "https://localhost:8904/api/events/updates?pos=61320"

    EventSummary:
      type: object
      description: |
        `/api/events` and `/api/events/updates` return an array of these, and `/api/events/{id}`
        returns one with more fields.

        The message and event type in this example indicate an operator attempting to log in with an
        incorrect password, but for the sake of illustration the example also contains references to
        items that would never appear on such an event.  The card, cardholder, and access zones, for
        example.

      properties:
        href:
          type: string
          format: url
          description: A link to this event's details.
          example: "https://localhost:8904/api/events/61320"
        id:
          type: string
          description: An alphanumeric identifier for this event, unique to the server.
          example: "61320"
        serverDisplayName:
          type: string
          description: |
            The host name of this event's origin server, if it was aggregated from a remote host.
            Absent for local events.

            Note that this is not the descriptive name of the remote server's item, but the host name
            used for address resolution.

            New to 8.40.
          example: "ruatoria.satellite.int"
        time: 
          type: string
          format: date-time
          description: The time the event occurred.
          example: "2016-02-18T19:21:52Z"
        message:
          type: string
          description: "The event's message."
          example: "Operator logon failed for FT Workstation on GNZ-PC1439"
        occurrences:
          type: integer
          description: |
            If an event arrives with the same essential properties as a previous event, the server
            will start counting them.  Each event is still individually addressable and will appear in
            the API as normal, but the first in the
            group will also have this property.  It only appears on the first, and it does not appear
            if the event is a singleton.

            If present on an event's detail or alarm page, there will also be a `lastOccurrenceTime`.

            Outside of the `alarm` block, which contains an alarm's state, this is the only field on
            an event that can change.
          minimum: 2
          example: 2
        priority:
          type: integer
          description: Numeric priority.  9 is critical and 0 is not an event.
          minimum: 0
          maximum: 9
          example: 3
        alarm:
          type: object
          description: |
            If an event is also an alarm, this object will contain
            its state and a link to its details page in the alarms controller.

            Only the first event in a group (see the `occurrences` field) can become an alarm.
          properties:
            state:
              description: Alarms start unacknowledged.  Acknowledging or processing them changes that.
              type: string
              enum: [ "unacknowledged", "acknowledged", "processed" ]
              example: "unacknowledged"
            href:
              type: string
              format: url
              description: Link to the alarm entity corresponding to the event. GET the href for full alarm details.
              example: "https://localhost:8904/api/alarms/61320"
        operator:
          description: |
            The href and name of the operator or system behind this event.  This will appear when an operator
            has modified an item.  New in v8.00.

            The item he or she modified will appear in the `modifiedItem` block (added in 8.40).

            *** Change is coming. ***

            The operator may not be a cardholder.  A version of Command Centre after 9.30 will
            return events where the operator item is of a different kind.  In that case, the
            `operator` block will also contain a `canonicalTypeName` field telling you what kind of
            item is at the other end of the href.

          type: object
          properties:
            href:
              type: string
              format: url
              description: Link to the operator who caused this event by editing an item.  New in 8.00.
              example: "https://localhost:8904/api/cardholders/325"
            name:
              type: string
              description: The name the operator held at the time.  New in 8.40.
              example: "Chong, Marc"
        source: 
          type: object
          description: ID and name of the source of the event, as recorded at the time of the event.
          properties:
            id:
              type: string
              description: |
                The alphanumeric ID of the event source item.  Search for events with the same source
                as this one with `source=321` in the query parameters.
              example: "321"
            name:
              type: string
              description: This could be different from the current name of the source item.
              example: "FT Workstation on GNZ-PC1439"
            href:
              type: string
              format: url
              description: Link to the source item.  New in 8.00.
              example: "https://localhost:8904/api/items/321"
        group: 
          type: object
          description: |
            ID and name of the event group this event belongs to.  Do not confuse this with an access
            group or operator group:  this is the event type group to which the event's type belongs.
            There are about 150 and you can list them at
            [/events/groups](#operation--api-events-groups-get).
          properties:
            id:
              type: string
              description: |
                The alphanumeric ID of the event group.  Search for events of the same rough category
                as this one with `type=35` in the query parameters.
              example: "35"
            name:
              type: string
              description: The name of the event group.
              example: "Invalid Logon"
        type:
          type: object
          description: |
            ID and name of the event's type.  There is a long list of them at
            [/events/groups](#operation--api-events-groups-get).
          properties:
            id:
              type: string
              description: |
                The alphanumeric ID of the event type.  To search for events of the same type as this
                example, put `type=23035` in the query parameters of
                [/events](#operation--api-events-get).
              example: "601"
            name:
              type: string
              description: The name of the event type.
              example: "Operator logon failed"
        eventType:
          <<: *EVENTTYPE
          example:
            id: "601"
            name: "Operator logon failed"
        division:
          type: object
          description: |
            ID, name, and href of the event's division (which is the division of the event's source
            item, for most event types).
          properties:
            id:
              type: string
              description: |
                The alphanumeric ID of the event's division.  Search for other events from items in
                the same division as this example by putting `division=2` in the query parameters.
              example: "2"
            href:
              type: string
              format: url
              description: The link to the division item.
              example: "https://localhost:8904/api/divisions/2"
            name:
              type: string
              description: The division's name.  Added in 8.40.
              example: "Root division"

        cardholder:
          type: object
          description: |
            Summary information about an event's cardholder, if there is one.  This will be the
            cardholder who badged their card at a door in an access event, or the cardholder an
            operator modified in an operator event.  Search for other events related to this example's
            cardholder with `cardholder=325` in the query parameters.
          properties:
            href:
              type: string
              format: url
              description: |
                Link to the cardholder entity representing the cardholder of the event.  GET the href
                for full details.
              example: "https://localhost:8904/api/cardholders/325"
            id:
              type: string
              description: The alphanumeric ID of the cardholder associated with this event.
              example: "325"
            name:
              type: string
              description: |
                In versions up to and including 8.10 this is the current name of the cardholder.  In
                8.20 it is the name of the cardholder at the time of the event.
              example:  "Bruce, Jennifer"
            firstName:
              type: string
              description: The current value of the firstName field of this cardholder.  Added in 8.20.
              example: "Jennifer"
            lastName:
              type: string
              description: The current value of the lastName field of this cardholder.  Added in 8.20.
              example: "Caitlin"

        entryAccessZone:
          description: |
            The name and href of the entry access zone related to the event.  In the case of card
            events, it is the zone into which a cardholder was attempting to gain access.

            That is true for successful entries, successful exits, and access denials.  Regardless of
            whether the cardholder badged at the entry or exit reader, this field refers to the zone
            that he or she attempted to access.

            For example, for 'Card entry granted' events this field will contain the door's entry
            zone, but for 'Card exit granted' events this field will contain the door's _exit_ zone,
            because 'exit granted' means the cardholder was in the door's entry zone, badged at its
            exit reader, and was granted access to its exit zone.  Think of it as going through a door
            in its reverse direction.

          properties:
            href:
              type: string
              format: url
              description: |
                Link to the access zone entity representing the entry access zone related to this
                event.  GET the href for the access zone's full details.  This will be missing if the
                server lacks the RESTStatus licence, or your operator lacks the necessary privileges
                (such as 'View Site').
              example: "https://localhost:8904/api/access_zones/333"
            name:
              type: string
              description: |
                The current name of the access zone.  Expect a future version of Command Centre to
                change this to change to the name of the access zone at the time of the event.

              example:  "Brookwood showroom"
            id:
              type: string
              description: Deprecated.
              example: "333"

        exitAccessZone:
          description: |
            The name and href of the exit access zone related to the event.  In card events, it is the
            zone from which a cardholder was attempting to leave, if the door had an exit zone
            configured (many do not).

            That is true for successful entries, successful exits, and access denials.  Regardless of
            whether the cardholder badged at the entry or exit reader, this field refers to the zone
            that he or she attempted to leave.

            For example, for 'Card entry granted' events this field will contain the door's exit zone,
            if there was one, but for 'Card exit granted' events this field will contain the door's
            _entry_ zone.

          properties:
            href:
              type: string
              format: url
              description: |
                Link to the access zone entity representing the exit access zone related to this
                event.  This will be missing if the server lacks the RESTStatus licence, or your
                operator lacks the necessary privileges (such as 'View Site').
              example: "https://localhost:8904/api/access_zones/913"
            name:
              type: string
              description: |
                The current name of the exit access zone.  Expect a future version of Command Centre
                to change this to change to the name of the exit access zone at the time of the event.
              example:  "Compressor room"
            id:
              type: string
              description: Deprecated.
              example: "913"

        door:
          description: |
            The name and href of the door related to the event.  These are not as common as you may
            think, because when a door is relevant (to card events, for example) it is usually the
            event's source, not its door, so it will be in the `source` block.

            New in 8.10.

          properties:
            href:
              type: string
              format: url
              description: |
                Link to the entity representing the door related to this event.  This will be missing
                if the server lacks the RESTStatus licence, or your operator lacks the necessary
                privileges (such as 'View Site').
              example: "https://localhost:8904/api/doors/745"
            name:
              type: string
              description: The name the door had when the event occurred.
              example:  "Main hoist door"

        accessGroup:
          description: |
            The href of the access group that a cardholder just gained or lost in a 'Membership
            Activated' or 'Membership Expired' event.  Those happen when a group membership's 'from'
            or 'until' time passes.

            DEPRECATED for the events generated when an operator creates, modifies, or deletes an
            access group.  Use the 'modifiedItem' field instead (new in 8.40).
          type: object
          properties:
            href:
              type: string
              format: url
              description: Link to the access group related to this event.
              example: "https://localhost:8904/api/access_groups/352"

        card:
          description: |
            Details of the card associated with the event.

            Versions prior to 8.60 returned this block and a card number of zero for all access
            events, even if they did not involve a credential (after a person entered their user code
            at a keypad, for example).  Version 8.60 does not return this block for such events.

          type: object
          properties:
            facilityCode:
              type: string
              description: |
                The card's facility code at the time of the event expressed as one letter followed by
                up to five digits.
              example: "A12345"
            number:
              type: string
              description: |
                The card's number at the time of the event.  Despite the name it may not necessarily
                be an actual number; mobile card numbers are arbitrary strings, for example.

                Note that card numbers are not guaranteed unique.  The combination of facility code,
                issue level, and card number will be unique for card types that have a facility code
                and issue level.

                Before 8.60 this number was a signed 32-bit integer, so numeric card numbers greater
                than 2^31 came out negative and mobile card numbers were arbitrary.  In 8.60 numeric
                card numbers are positive and mobile card numbers are their ID strings, which
                operators can set to anything, and default to GUIDs.

              example: "78745"
            issueLevel:
              type: integer
              example: 1
              description: |
                The issue level of the card at the time.

        modifiedItem:
          description: |
            The href and type of the item that an operator created, changed, or deleted, for those
            kinds of events.

            New in 8.40.
          type: object
          properties:
            href:
              type: string
              format: url
              description: |
                Link to the item that this event modified.  Watch for 404s:  this link will be here
                even for deleted items.
              example: "https://localhost:8904/api/cardholders/325"
            type:
              type: object
              properties:
                id:
                  type: string
                  example: "1"
                  description: |
                    A short alphanum identifying the item's type.
                name:
                  type: string
                  example: "Cardholder"
                  description: |
                    A human-readable name of the item's type, suitable for display.

                    This string is translated using the installation's language pack, and Gallagher
                    reserves the right to change item type names in new versions, so you should not do
                    anything with this string except show it to a person.

        next:
          description: |
            The URL to the search that will return the page of events following this one.  It will
            include your search filters and pagination parameters.

            This link is intended for integrations that take great gulps of events and send them to a
            downstream system.  If it suffers a problem in the middle of a result set, it needs to
            record where in the event trail it got up to so that when it restarts it will not miss or
            duplicate events.

            New to 8.70.
          type: object
          properties:
            href:
              type: string
              format: url
              example: "https://localhost:8904/api/events?pos=61320"
        previous:
          description: |
            The URL to the search that will return the page of events preceding this one.  It will
            include your search filters and pagination parameters.

            The `previous` link on the first event in a result set will be the same as the `previous`
            link outside the results, since they both indicate the latest event that preceded the
            result set.

            New to 8.70.
          type: object
          properties:
            href:
              type: string
              format: url
              example: "https://localhost:8904/api/events?pos=61320&previous=True"
        updates:
          description: |
            The URL to the [updates](#operation--api-events-updates-get) call that will return the
            page of events following this one, or wait for one to arrive if there are none.  It will
            include your search filters and pagination parameters.

            New to 8.70.
          type: object
          properties:
            href:
              type: string
              format: url
              example: "https://localhost:8904/api/events/updates?pos=61320"

    EventDetail:
      description: |
        [/api/events/{id}](#operation--api-events--id--get) returns one of these.  It contains
        everything from the event summary results, plus some extra fields that are too expensive to
        compute and return for large result sets.

        Like the example in the [summary](#definition-Alarm-summary), this example is forced:  no
        actual Command Centre event will contain all of these fields.

      allOf:
        - type: object
          properties:
            lastOccurrenceTime:
              type: string
              format: date-time
              description: |
                When the event has occurred multiple times due to flooding, this will show the time it
                occurred most recently.  It only appears with `occurrences`, and you will only see it
                on the first event in a group.
              example: "2016-02-18T19:21:59Z"
            details:
              type: string
              description: |
                The full alarm details text.  This may be up to 2048 UTF-8 characters, each of which
                could (theoretically) be four bytes long.
              example: "Originating IP address: 192.168.2.3"
            location:
              type: object
              description: |
                Added in 9.00, this block gathers together information present in about 80 different event
                types that contain a cardholder's location, presenting it in a consistent way.

                It allows a client that is interested in movements to extract what it needs
                without needing to know what event types to look for or how they represent:

                  * the cardholder whose location the event contains,
                  * the access zone that they started in before the event, and
                  * the access zone or reception where they ended up.

                The location block will only be in a result if you ask for it using the `fields` query
                parameter.

              properties:
                type:
                  type: string
                  enum: [ moved, observed, denied ]
                  example: "moved"
                  description: |

                    This enum divides location events into three types:

                    `moved` means a cardholder moved through a door from one zone to another.  Whether
                    an operator moved them using our software, or they did it themselves using a
                    plastic card, a mobile credential, biometrics, a QR code, a vehicle plate, or
                    something implemented by a third-party integration, provided they were granted
                    access, this field's value will be `moved`.

                    `observed` means they did something that indicated their location, such as logging
                    in to a workstation or an alarms terminal, but they did not move.

                    `denied` means the cardholder authenticated successfully and requested access at a
                    door but failed the access check.  It also appears on some event types where the
                    cardholder did not successfully authenticate; for those events there will be no
                    `cardholder` block, covered next.

                cardholder:
                  type: object
                  description: |

                    A block describing the cardholder whose location is recorded by the event.

                    It will be missing if the cardholder did not successfully authenticate:  perhaps
                    they used their card but did not complete a second factor.  In most cases, though,
                    if a cardholder does not authenticate properly (gets their PIN wrong, for example)
                    there will be no `location` block at all.

                  properties:
                    name:
                      type: string
                      description: "The cardholder's name at the time of the event."
                      example: "Jackson"
                    href:
                      type: string
                      format: url
                      description: |
                        The cardholder item's href.  This will only be present if the cardholder
                        has not been deleted and your operator has the right to view it.
                      example: "https://localhost:8904/cardholders/325"

                beforeLocation:
                  description: |
                    The href and name of the access zone or reception that the cardholder was in
                    before this event occurred.  Future versions of Command Centre may add more item
                    types as "before locations" so check its canonical type name, covered in the
                    `afterLocation` description below.

                    The before location is only useful (and present) for 'moved'-type events, which
                    happen when a cardholder changes location.  For 'observed' and 'denied'-type
                    events, which happen when a cardholder does not move, `afterLocation` shows where
                    they were.

                    The name was correct at the time of the event.  It may be missing.

                    The href will be missing if your operator does not have the right to view the
                    location.  That also happens when it is deleted.

                    If the cardholder moved from outside there will be a field in this block called
                    `outside` with the value `true`, and `canonicaltypeName` and `href` will be
                    missing.

                  example: {
                    href: "https://localhost:8904/api/access_zones/333",
                    name: "Lvl 1 lift lobby",
                    canonicalTypeName: "accesszone"}

                afterLocation:
                  description: |
                    The href and name of the item that indicates the cardholder's location after
                    the event.  For 'observed' and 'denied'-type events, this is also where they
                    started.

                    For 'moved' and 'denied' events in 9.00 it will be an access zone or reception.

                    For 'observed' events it could be a workstation or an alarms terminal at which the
                    person authenticated.

                    Future versions of Command Centre may add more item types.  So that you can branch
                    on them, this block and `beforeLocation` contain a field called
                    `canonicalTypeName`.  The values it returns are fixed:  it is safe to make
                    decisions based on the value.  We will add new values as Command Centre grows, but
                    after its first appearance an item type's `canonicalTypeName` will not change.

                    Common canonical type names are `accesszone`, `reception`, `workstation`, and (for
                    a T20 alarms terminal that uses the H-Bus protocol) `hbusterminal`.  You can get
                    the full list with the [item types](#operation--api-items-types-get).

                    If they moved "outside the system" (entering through a door with no entry zone, or
                    exiting through a door with no exit zone), there will be no href or canonical
                    type, but there will be a field called `outside` with the value `true`.

                    The href will also be missing if your operator does not have the right to view
                    their new location.

                    If present, the item's name was correct at the time of the event.  It may have
                    changed since.  It will be missing for some event types such as 15583, which
                    happens when an operator moves a cardholder outside the system using an
                    operational client.

                  example: { outside: true }

        - $ref: "#/components/schemas/EventSummary"

    EventPOSTBody:
      required: [type, eventType]
      properties:
        type:
          description: |
            A new event must contain either this or (if your server is running 8.90 or later) `eventType`.
            Without one of them, the POST will fail.

            The event type is mandatory because the server cannot assume a reasonable default.  It can
            for the other fields.

            If you send both a `type` block and an `eventType` block to a server running 8.90 or later
            it will use `eventType`.

          type: object
          properties:
            href:
              type: string
              format: url
              example: https://localhost:8904/api/events/types/4000
              description: |
                Take this href from the list of [event types](#operation--api-events-groups-get).
                Note that you can only use event types in one of the thirty external event groups with
                IDs 57-66 and 190-209.  Command Centre ships with one event type per group, IDs
                4000-4009 and 6010-6029, but you can create 970 more using the External Event Type
                Configuration utility.
        eventType:
          description: |
            Synonym for `type`, introduced in 8.90.
          properties:
            href:
              type: string
              format: url
              example: https://localhost:8904/api/events/types/4000
        source:
          description: |
            This block should contain the href of the item you wish to use as the source of your
            event.  It can be any site item to which your operator has view access including all
            hardware, access zones, fence zones, doors, lockers, car parks, servers, external systems,
            and many other item types.  If you do not supply one Command Centre will use the REST
            Client item identified by the API key in the `Authorization` header.

            Cardholders cannot be event sources.  To relate a cardholder to your event, use the
            `cardholder` block.

            Make sure that your operator has the 'Create Events and Alarms' privilege on this item's
            division.  8.90 and later insist on it.

            The API will use the source's division as the event's division.
          type: object
          properties:
            href:
              type: string
              format: url
              example: https://localhost:8904/api/doors/745
              description: |
                Get the href using the API controller for that item type (such as
                [doors](rest.html#tag-Doors)) or from `/items`.
        priority:
          type: integer
          minimum: 1
          maximum: 9
          example: 2
          description: |
            It is not possible to submit an event with priority zero in the body, but if you submit an
            event with no priority it will use the one on the event type's action plan, which can be
            zero.
        time:
          type: string
          format: date-time
          description: |
            Like all other fields in this POST apart from the type, this field is optional.  If you
            send it, it must be in the format described [here](cardholders.html#dates-and-times).

            If you do not send this, the server will use the time that it received your request
            (its "now").
          example: "2019-02-21T14:55:00Z"
        message:
          type: string
          example: "Glass break detected in southwest sauna"
          description: |
            This is the first thing an operator will see when they look at this event.  Some
            interactive clients do not give it a lot of room on screen so put the important
            parts of your message first.  It has a limit of 1024 characters.
        details:
          type: string
          description: |
            Command Centre will attach this string to event, as it does the message, but
            operators will have to look more closely at the event to see it.  On the upside,
            it can be longer than the message:  2048 characters in 8.10.
          example: ""
        cardholder:
          description: |
            If you wish to attach a cardholder to your event, link it here.  Reports can show or
            filter by the cardholder.
          type: object
          properties:
            href:
              type: string
              format: url
              example: https://localhost:8904/api/cardholders/325
              description: |
                This can be the href of any cardholder to which your operator has view access.  Get
                the href from the [cardholders controller](cardholders.html#tag-Cardholders).
        operator:
          description: |
            If you wish to attach an operator to your event, link it here.  Like the cardholder,
            reports can show or filter by the operator.
          type: object
          properties:
            href:
              type: string
              format: url
              example: https://localhost:8904/api/cardholders/5398
              description: |
                This can be the href of any cardholder to which your operator has view access.  It
                does not need to be an operator (a member of an operator group).
        entryAccessZone:
          description: |
            If you wish to attach an access zone to your event, link it here.  Reports can filter by
            and show the entry access zone on events.
          type: object
          properties:
            href:
              type: string
              format: url
              example: https://localhost:8904/api/access_zones/333
              description: |
                This can be the href of any access zone to which your operator has view access.  Get
                the href using the [access zones controller](rest.html#tag-Access-Zones) or from
                `/items`.
        accessGroup:
          description: |
            If you wish to attach an access group to your event, link it here.

            Unlike cardholders, operators, and entry access zones, access groups do not appear in
            Command Centre activity reports.  You can add a filter to restrict an activity report by
            access groups, but the group that allowed an event into the report will not appear in a
            column.

            Like all the other items you link to your event it will, of course, appear when you GET
            the event from the API later.
          type: object
          properties:
            href:
              type: string
              format: url
              example: https://localhost:8904/api/access_groups/352
              description: |
                This can be the href of any access group to which your operator has view access.  Get
                the href using the [groups](cardholders.html#tag-Access-groups) or [items](#tag-Items)
                controller.
        lockerBank:
          description: |
            If you wish to attach a locker bank to your event, link it here.

            Like an event's access group, you can filter a Command Centre activity report to events
            that involve a locker bank, but the bank will not appear in the report itself.

            If you link both a locker and a locker bank to an event, Command Centre does not require
            that the locker is in the locker bank, but you may find that downstream reporting software
            misbehaves when it is not.
          type: object
          properties:
            href:
              type: string
              format: url
              example: https://localhost:8904/api/locker_banks/4566
              description: |
                This can be the href of any locker bank to which your operator has view access.  Get
                the href using the [locker banks](cardholders.html#tag-Lockers) or
                [items](#tag-Items) controller.
        locker:
          description: |
            If you wish to link a locker to your event, do it here.  Like an event's access group and
            locker bank, you can filter a Command Centre activity report to events that involve a
            locker, but the locker will not appear in the report itself.
          type: object
          properties:
            href:
              type: string
              format: url
              example: https://localhost:8904/api/lockers/3456
              description: |
                This can be the href of any locker your operator can view.  Get the href from the
                [items](#tag-Items) controller or the `lockers` field of [a locker
                bank](cardholders.html#definition-Locker-bank-detail).
        door:
          description: |
            If you wish to link a door to your event for later extraction or a report filter, do it
            here.
          type: object
          properties:
            href:
              type: string
              format: url
              example: https://localhost:8904/api/doors/745
              description: |
                This can be the href of any door your operator can see.  Get the href using the
                [doors](rest.html#tag-Doors) or [items](#tag-Items) controller.

    EventPOSTExample:
      required: [type, eventType]
      description: |
        This is an example showing how you could create a new event.

        See the [POST](#operation--api-events-post) for where to get the address of the endpoint, the
        rules around event types and items, and what happens to your event after you create it, and
        see the [schema definition](#definition-EventPOSTBody) for a description of each field.

        Only `eventType` is required for the API to accept the POST, but an event is not much without
        a source item and a message string, and it never hurts to add some details.

        To make this example work on a server running 8.80 or earlier change `eventType` to `type`.
      example:
        eventType: { "href": "https://localhost:8904/api/events/types/4000" }
        source: { "href": "https://localhost:8904/api/doors/745" }
        message: "Glass break detected in southwest sauna"
        details: "Temperature dropping"

    EventGroups:
      description:  Calls to `/api/events/groups/` return this object, which is a named array of groups of event types.
      type: object
      properties:
        eventGroups:
          type: array
          description: An array of event group objects.  There will be about 150.  Most groups contain fewer than 100 event types;  one contains around 200.
          items:
            type: object
            properties:
              id:
                type: string
                description: The alphanumeric ID of the event group.  Use this ID in the `group` filter when requesting events.
                example: "35"
              name:
                type: string
                description: The name of the event group.
                example: "Invalid Logon"
              eventTypes:
                type: array
                description: An array of all the event types in the group.
                items: 
                  type: object
                  properties:
                    id:
                      type: string
                      description: The alphanumeric ID of the event type.  Use this ID in the `type` filter when requesting events.
                    name: {type: string}
          example:
            - id: 35
              name: Invalid Logon
              eventTypes:
                - href: https://localhost:8904/api/events/types/601
                  id: "601"
                  name: Operator logon failed
                - href: https://localhost:8904/api/events/types/20065
                  id: "20065"
                  name: "Terminal: Invalid User Code"
                - href: https://localhost:8904/api/events/types/23052
                  id: "23052"
                  name: Wrong Code only Code

  
    FenceZoneSearch:
      description: An array of fence zone summaries, and a `next` link for more.
      properties:
        results:
          type: array
          description: An array of Fence Zone summaries.
          items: { $ref: '#/components/schemas/FenceZoneSummary' }

        next:
          type: object
          description: The link to the next page.  Absent if you have retrieved them all.
          properties:
            href: { type: string, format: url }
          example:
            href: "https://localhost:8904/api/fence_zones?skip=1000"

    FenceZoneSummary:
      description: |
        `/api/fence_zones` returns an array of these.  It is a subset of what you get from a
        fence zone's detail page at `/api/fence_zones/{id}` (linked as the href in this
        object).
      properties:
        href:
          type: string
          format: url
          description: |
            A link to a [fence zone detail](#definition-Fence-Zone-detail) object for this fence
            zone.  This is Command Centre's identifier for this fence zone:  use it whenever you need
            to specify a fence zone in REST operations.
          example: "https://localhost:8904/api/fence_zones/8487"
        id:
          type: string
          description: |
            An alphanumeric identifier, unique to the server.

            This is the ID to use in the `source` parameter of [event
            filters](events.html#operation--api-events-get) if you want to limit your events
            to those coming from particular fence zones.
          example: "8487"
        name:
          type: string
          example: "Storage yard"

    FenceZoneDetail:
      description: |
        [/api/fence_zones/{id}](#operation--api-fence_zones--id--get) returns one of these.

      allOf:
        - type: object
          properties:
            description:
              type: string
              example: "Trailers and pallets."
            division:
              type: object
              description:  The division containing this Fence Zone.
              example:
                href: "https://localhost:8904/api/divisions/2"
            voltage:
              type: integer
              minimum: 0
              description: |
                The last known voltage on the fence, in volts, to the nearest 100 volts, provided the
                fence zone is online and the REST server is subscribed to its updates.  See the [item
                status](#topic-Item-status) section for how to make sure of that.

                This value is only up to date when the fence zone is on (shown in the status flags)
                and has emitted at least one pulse.

                Voltages are not displayed by default, because of the caveats around their use.  You
                must ask for them using the 'fields' parameter: `?fields=voltage,...`.
              example: 7300
            notes: {<<: *NOTES}
            shortName: {<<: *SHORTNAME}
            updates:
              <<: *UPDATES
              example: { href: "https://localhost:8904/api/fence_zones/8487/updates/0_0_0" }
            statusFlags:
              <<: *STATUSFLAGS
              example: ["on", "highVoltage", "voltageKnown"]
            connectedController:
              <<: *CONNECTEDCONTROLLER
            commands:
              type: object
              description: |
                A block of commands, each represented by a block containing an href that
                accepts a POST that will send an override to the fence zone, changing its
                state.

                It will be missing if your operator is not privileged to override the fence zone.

                See the section 'Creating a Fence Zone' in the Configuration client help
                for a description of fence zone states.
              properties:
                on:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/fence_zones/8487/on"
                      description: |
                        [POST](#operation--api-fence_zones--id--on-post) to this to energise this
                        fence zone.
                      type: string
                      format: url
                off:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/fence_zones/8487/on"
                      description: |
                        [POST](#operation--api-fence_zones--id--off-post) to this to deactivate this
                        fence zone.
                      type: string
                      format: url
                shunt:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/fence_zones/8487/shunt"
                      description: |
                        [POST](#operation--api-fence_zones--id--shunt-post) to this to shunt this
                        fence zone.
                      type: string
                      format: url
                unshunt:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/fence_zones/8487/unshunt"
                      description: |
                        [POST](#operation--api-fence_zones--id--unshunt-post) to this to restore
                        communication with fence zone.
                      type: string
                      format: url
                highVoltage:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/fence_zones/8487/high_voltage"
                      description: |
                        [POST](#operation--api-fence_zones--id--high_voltage-post) to this to set this
                        fence zone to 'high voltage' mode.
                      type: string
                      format: url
                lowFeel:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/fence_zones/8487/low_feel"
                      description: |
                        [POST](#operation--api-fence_zones--id--low_feel-post) to this to set this
                        fence zone to 'low feel' mode.
                      type: string
                      format: url
                cancel:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/fence_zones/8487/cancel"
                      description: |
                        [POST](#operation--api-fence_zones--id--cancel-post) to this cancel an
                        active override on the fence zone.

                      type: string
                      format: url

        - $ref: "#/components/schemas/FenceZoneSummary"

    InputSearch:
      description: An array of input summaries, and a `next` link for more.
      properties:
        results:
          type: array
          description: An array of input summaries.
          items: { $ref: '#/components/schemas/InputSummary' }

        next:
          type: object
          description: The link to the next page.  Absent if you have retrieved them all.
          properties:
            href: { type: string, format: url }
          example:
            href: "https://localhost:8904/api/inputs?skip=1000"

    InputSummary:
      description: |
        `/api/inputs` returns an array of these.  It is a subset of what you get from a
        input's detail page at `/api/inputs/{id}` (linked as the href in this object).
      properties:
        href:
          type: string
          format: url
          description: |
            A link to an [input detail](#definition-InputDetail) object for this input.
          example: "https://localhost:8904/api/inputs/9701"
        id:
          type: string
          description: |
            An alphanumeric identifier, unique to the server.  This is the ID to use in the `source`
            parameter of [event filters](events.html#operation--api-events-get) if you are only
            interested in events from particular inputs.
          example: "9701"
        name:
          type: string
          example: "Studio door open sensor"

    InputDetail:
      description: |
        [/api/inputs/{id}](#operation--api-inputs--id--get) returns one of these.

      allOf:
        - type: object
          properties:
            description:
              type: string
              example: "Reed switch."
            division:
              type: object
              description:  The division containing this input.
              example:
                href: "https://localhost:8904/api/divisions/2"
            shortName: {<<: *SHORTNAME}
            notes: {<<: *NOTES}
            updates:
              <<: *UPDATES
              example: { href: "https://localhost:8904/api/inputs/9701/updates/0_0_0" }
            statusFlags:
              <<: *STATUSFLAGS
              example: ["open"]
            connectedController:
              <<: *CONNECTEDCONTROLLER
            commands:
              type: object
              description: |
                A block of commands, each represented by a block containing an href that accepts a
                POST that will send an override to the input.

                It will be missing if your operator does not have a privilege that allows overriding
                the input (examples of which are in the documentation for the POSTs).

              properties:
                shunt:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/inputs/9701/shunt"
                      description: |
                        [POST](#operation--api-inputs--id--shunt-post) to this to shunt the input.
                      type: string
                      format: url
                unshunt:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/inputs/9701/unshunt"
                      description: |
                        [POST](#operation--api-inputs--id--unshunt-post) to this to stop shunting the
                        input.
                      type: string
                      format: url
                isolate:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/inputs/9701/isolate"
                      description: |
                        [POST](#operation--api-inputs--id--isolate-post) to this to isolate the input.
                        Isolated inputs do not prevent alarm zones from arming.

                        The link will be missing if the input is shunted.
                      type: string
                      format: url
                deisolate:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/inputs/9701/deisolate"
                      description: |
                        [POST](#operation--api-inputs--id--deisolate-post) to this to stop isolating
                        the input.  The link will be missing if the input is shunted.
                      type: string
                      format: url

        - $ref: "#/components/schemas/InputSummary"

    InterlockGroupSearch:
      description: |
        **API support for interlocks is still in development and may change in future versions.**

        An array of interlock group summaries and a `next` link for more.
      properties:
        results:
          type: array
          description: An array of interlock group summaries.
          items: { $ref: '#/components/schemas/InterlockGroupSummary' }

        next:
          type: object
          description: The link to the next page.  Absent if you have retrieved them all.
          properties:
            href: { type: string, format: url }
          example:
            href: "https://localhost:8904/api/interlock_groups?skip=1000"

    InterlockGroupSummary:
      description: |
        **API support for interlocks is still in development and may change in future versions.**

        `/api/interlock_groups` returns an array of these.  It is a subset of what you get from an
        interlock's details page at `/api/interlock_groups/{id}` (linked as the href in this object).

      properties:
        href:
          type: string
          format: url
          description: |
            A link to an [interlock group detail](#definition-Interlock-Group-detail) object for this
            item.
          example: "https://localhost:8904/api/interlock_group/122322"
        name:
          type: string
          example: "Excercise yard egress"

    InterlockGroupDetail:
      description: |
        **API support for interlocks is still in development and may change in future versions.**

        [/api/interlock_groups/{id}](#operation--api-interlock_groups--id--get) returns one of these.

        Some of the fields will not come from the server unless you request them via the `fields`
        query parameter.

      allOf:
        - type: object
          properties:
            id:
              <<: *ID
              example: "122322"
            description:
              type: string
              example: "Exercise yard egress."
            division:
              type: object
              description:  The division containing this interlock group.
              example:
                href: "https://localhost:8904/api/divisions/2"
            shortName: {<<: *SHORTNAME}
            notes: {<<: *NOTES}
            updates:
              <<: *UPDATES
              example: { href: "https://localhost:8904/api/interlock_groups/122322/updates/0_0_0" }
            statusFlags:
              <<: *STATUSFLAGS
              example: ["secure"]
            statusText:
              <<: *STATUSTEXT
              example: "All doors in the group are in a Secure state."
            status:
              <<: *STATUS
              example: "All doors in the group are in a Secure state."
            connectedController:
              <<: *CONNECTEDCONTROLLER
            commands:
              type: object
              description: |
                A block of commands, each represented by a block containing an href that accepts a
                POST that will send an override to the interlock.

                It will be missing if your operator does not have a privilege that allows overriding
                the interlock (examples of which are in the documentation for the POSTs).

              properties:
                disable:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/interlock_groups/122322/disable"
                      description: |
                        [POST](#operation--api-interlock_groups--id--disable-post) to this to disable the
                        interlock group, allowing the doors to operate independently.
                      type: string
                      format: url
                enable:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/interlock_groups/122322/enable"
                      description: |
                        [POST](#operation--api-interlock_groups--id--enable-post) to re-enable the
                        interlock group, causing its doors to return to interlock behaviour.
                      type: string
                      format: url

        - $ref: "#/components/schemas/InterlockGroupSummary"
    

    ItemSearch:
      type: object
      description:  Calls to `/api/items` return this object.
      properties:
        results:
          description: A list of item objects, each containing the alphanumeric ID of the item, its name, and its type.
          type: array
          items: { $ref: "#/components/schemas/ItemSummary" }
          example:
            - id: "325"
              name: "Brick, Eva"
              type:
                id: "1"
                name: "Cardholder"
                canonicalTypeName: "cardholder"
            - id: "2707"
              name: "Brewer, Amy"
              type:
                id: "1"
                name: "Cardholder"
                canonicalTypeName: "cardholder"
        next:
          type: object
          description: An href to the next page of results.  Missing if there are no more results.
          properties:
            href:
              type: string
              format: url
              example: "https://localhost:8904/api/items?pos=2"

    ItemSummary:
      type: object
      description: |
        `/api/items` returns an array of these.  Because it can contain an item of any type, it only
        contains some fields that are common to all item types.
      properties:
        id:
          type: string
          description: |
            Use this ID in the `source` filter when requesting events to limit events to those with
            that source.  Card events such as 'access granted', for example, have a door as their
            source.
          example: "325"
        name: { type: string, example: "Brick, Eva" }
        type:
          type: object
          description: The `type` object contains the ID and name of the item's type.
          properties:
            id:
              type: string
              description:  |
                Use this ID in the `type` filter when requesting items if you wish to restrict the
                results to items of a certain type.
              example: "1"
            name:
              <<: *TYPE_NAME
            canonicalTypeName:
              <<: *CANON
              example: "cardholder"
        serverDisplayName:
          $ref: "#/x-common-blocks/server"
        notes:
          <<: *NOTES
        href:
          type: string
          description:  Reserved for internal use.  Its value changed in version 9.10.

    ItemDetail:
      type: object
      description: |
        A call to `/api/items/{id}` (added in 8.40) returns one of these.  It adds the item's division
        to the summary object.
      allOf:
        - type: object
          properties:
            division:
              type: object
              properties:
                id:
                  type: string
                  example: "2"
                href:
                  type: string
                  format: url
                  example: "https://localhost:8904/api/divisions/2"
        - $ref: "#/components/schemas/ItemSummary"

    ItemTypes:
      type: object
      description:  Calls to `/api/items/types` return this object, an array of item types.
      properties:
        itemTypes:
          description: A list of item types.
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: The alphanumeric ID of the item type.  Use this ID in the `type` filter when requesting items.
                example: "1"
              name:
                type: string
                description: |
                  The human-readable name of the item type.  These strings will change over time as
                  Gallagher expands its product line, and can change with the server's language
                  settings, so take care if using them for anything except display.
                example: "Cardholder"
              canonicalTypeName:
                <<: *CANON
                example: "cardholder"
      example:
        itemTypes:
          - id: "1"
            name: "Cardholder"
            canonicalTypeName: "cardholder"
          - id: "2"
            name: "Access Group"
            canonicalTypeName: "accessgroup"

    ItemUpdate:
      type: object
      description: |
        POSTs and GETs to `/api/items/updates` return this object.  It contains an array of updates
        and a `next` link to collect more.

        Added in 8.30.
      properties:
        updates:
          description: |
            A list of items and their statuses.

            On your first two calls -- the POST and the first GET -- this will contain all the items
            in your subscription (provided they are the types of item that have statuses).  This is
            unnecessary and incurs a significant performance penalty, so:

            ***Change is coming.***  A future version will not do that.  The results of the POST will
            not contain all the items in your subscription, and the first GET will not return them
            all a second time.  Use [this algorithm](#operation--api-items-updates-get).

            On
            subsequent GETs it will only contain the items that received status updates since your
            previous call.  Note that an item will be in this array if it received any status update
            at all, even if the status flags did not change.  Prepare to receive updates that do not
            contain novel data.

            This array is not paginated:  it could contain every one of the items you put in your
            POST.

            After about 50 seconds the call will time out and return an empty array here.

          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: |
                  The item's ID, from the list you sent in the POST that created this subscription.
              statusFlags:
                type: array
                description: |
                  An array of string enumerations (flags) that describe the item's condition in a
                  reliable, machine-readable way.

                  The item types that the REST API supports (such as fence zones and inputs) have a
                  full set of status flags, described in [their own sections](rest.html) of this
                  documentation.

                  Items that the REST API does not support yet (such as readers) will return error
                  flags if they are in an unusual state, or nothing if they are online and reporting
                  normally.  Therefore an empty array is a good sign.
              statusText:
                type: string
                description: |
                  The state of the item in a multi-line string taken from the server's language pack.
              status:
                type: string
                description: |
                  A one-line version of the status, with details removed if necessary to keep it short.
        next:
          description: |
            A link to GET more status updates.  Do not wait longer than thirty seconds between
            receiving this link and using it or your subscription will expire and you will need to
            submit another POST to create a new one.
      example: {
        "updates": [
          {
              "id": "508",
              "status": "Controller offline. 62 message(s) pending.",
              "statusText": "Controller offline.\n62 message(s) pending.",
              "statusFlags": [
                  "controllerOffline"
              ]
          },
          {
              "id": "526",
              "status": "Disarmed.",
              "statusText": "Disarmed.",
              "statusFlags": [
                  "disarmed"
              ]
          },
          {
              "id": "530",
              "status": "This Input is Closed.  ",
              "statusText": "This Input is Closed.  ",
              "statusFlags": [
                  "closed"
              ]
          },
          {
              "id": "531",
              "status": "Awaiting status from Controller.",
              "statusText": "Awaiting status from Controller.",
              "statusFlags": [
                  "controllerUnknown"
              ]
          },
          {
              "id": "532",
              "status": "This Output is Off.  ",
              "statusText": "This Output is Off.  ",
              "statusFlags": [
                  "open"
              ]
          },
          {
              "id": "533",
              "status": "Secure.",
              "statusText": "Secure.",
              "statusFlags": [
                  "secure"
              ]
          }
        ],
        "next": {
          "href": "https://localhost:8904/api/items/updates?bookmark=3ec613a1-de01c6e_0"
        }    }

    ItemUpdateSubscription:
      type: object
      description: |
        Contains a list of item IDs (short alphanums).  Send it in the body of a
        [POST](#operation--api-items-updates-post) to create a subscription to status updates to the
        items with these IDs.
      required: [itemIds]
      properties:
        itemIds:
          type: array
          items:
            type: string
      example: { "itemIds": ["508", "526"] }

  

    LockerBankSearch:
      description: |
        An array of locker bank summaries, and a `next` link for more.

      properties:
        results:
          type: array
          description: An array of locker summaries.
          items: { $ref: '#/components/schemas/LockerBankSummary' }
          example:
            - name: "Lobby"
              href: "https://localhost:8904/api/locker_banks/4566"
              description: "Behind reception"
              division: { id: "2", href: "https://localhost:8904/api/divisions/2" }
            - name: "Bank A"
              href: "https://localhost:8904/api/locker_banks/4567"
              description: "Level 4 east A"
              division: { id: "2", href: "https://localhost:8904/api/divisions/2" }
        next:
          type: object
          description: The link to the next page of results.  Absent if you have retrieved them all.
          properties:
            href: { type: string, format: url, example: "https://localhost:8904/api/locker_banks?skip=2" }

    LockerBankSummary:
      description: |
        The locker bank search at `/api/locker_banks` returns an array of these.  It is a subset of
        what you get from a locker bank's detail page at `/api/locker_banks/{id}` (linked as the href
        in this object).

        Like the cardholder and access group summary pages in this API, this contains only
        the basic information about a locker bank.  It is the result of a search and could
        return many items, and we did not want the size getting out of hand.

        Also like the other summary pages in this API, you can add all the fields you want using the
        `fields` query parameter to the API routes that return it.

        The most important field is the href to the detail page, covered next.

      properties:
        href:
          type: string
          format: url
          description: "A link to the detail page for this locker bank."
        name:
          type: string
        shortName:
          type: string
          description: "The bank's short name."
        description:
          type: string
        division:
          type: object
          description: The division containing this locker bank.
      example:
        href: "https://localhost:8904/api/locker_banks/4566"
        name: "Lobby, building 28"
        shortName: "Lobby"
        description: "Behind reception"
        division: { id: "2", href: "https://localhost:8904/api/divisions/2" }

    LockerBankDetail:
      description: |
        [/api/locker_banks/{id}](#operation--api-locker_banks--id--get) returns one of these.  It
        contains an array of all the lockers in the bank, each of which contains an array of the
        cardholders assigned to that locker.

        This example shows two lockers on the bank, called 'L1' and 'L2'.  L1 has two
        cardholders who can open it:  one for two years, the other for a week in April 2018.

      properties:
        href:
          type: string
          format: url
          description: A self-reference.
        name:
          type: string
        shortName:
          type: string
        description:
          type: string
        division:
          type: object
          description: The division containing this locker bank.

        notes:
          type: string
        connectedController:
          <<: *CONNECTEDCONTROLLER
        lockers:
          description: |
            An array of locker objects, each containing the details of the locker and the
            cardholders who can open it.
          type: array
          items:
            type: object
            properties:
              name: { type: string }
              shortName:
                type: string
                description: "A T20 will display this instead of the long name, if it has both."
              description: { type: string }
              href:
                type: string
                format: url
                description: |
                  This is the href of the locker.  Use it when creating new assignments in a
                  cardholder PATCH or POST.  Trying to GET it will always yield a 404.
              connectedController:
                <<: *CONNECTEDCONTROLLER_BRIEF
              assignments:
                type: array
                description: |
                  A locker can have many assignments.  Each contains a cardholder and up to two dates,
                  between which the cardholder can open the locker.  If either of the dates is
                  missing, the assignment is unbounded in that direction.
                items:
                  type: object
                  properties:
                    href:
                      type: string
                      format: url
                      description: |
                        This is the href of a cardholder's assignment to a locker.  Put it in a
                        [cardholder PATCH](#operation--api-cardholders--id--patch) to update or delete
                        it.

                        You can also revoke a cardholder's access to this locker by sending a
                        [DELETE](#operation--api-cardholders--id--lockers--assignment_id--delete) to this href.

                        If the site does not have the RESTCardholders licence or your operator does
                        not have the privilege to view the cardholder, this link will not work in a
                        DELETE or a cardholder PATCH.
                    cardholder:
                      type: object
                      description: |
                        The name and href of the cardholder assigned to this locker.  It will be
                        missing if the site does not have the RESTCardholders licence or your operator
                        does not have the privilege to view that cardholder.
                    from:
                      type: string
                      format: date-time
                      description: |
                        If missing, the locker assignment has no start time, meaning the cardholder
                        can open the locker provided the 'until' time is in the future.
                    until:
                      type: string
                      format: date-time
                      description: |
                        If missing, the locker assignment has no end time, meaning the cardholder can
                        open the locker provided the 'from' time is in the past.
              commands:
                <<: *LOCKERCOMMANDS
              updates:
                description: |
                  This is not a default field:  you must ask for it by adding `lockers.updates` to the
                  `fields` query parameter.  Since it can only monitor one locker at a time we
                  discourage its use in favour of [bulk status monitoring](
                  events.html#status-subscriptions).

      example:
        name: "Lobby"
        href: "https://localhost:8904/api/locker_banks/4566"
        description: "Behind reception"
        division: { id: "2", href: "https://localhost:8904/api/divisions/2" }
        lockers:
          - name: "Lobby locker 1"
            shortName: "L1"
            description: "Wheelchair-suitable"
            href: "https://localhost:8904/api/lockers/3456"
            assignments:
              - href: "https://localhost:8904/api/cardholders/325/lockers/abe3456e"
                cardholder:
                  name: "Boothroyd, Algernon"
                  href: "https://localhost:8904/api/cardholders/325"
                from: "2018-01-01T00:00:00Z"
                until: "2020-01-01T00:00:00Z"
              - href: "https://localhost:8904/api/cardholders/10135/lockers/deb9456f"
                cardholder:
                  name: "Messervy, Miles"
                  href: "https://localhost:8904/api/cardholders/10135"
                from: "2018-04-01T05:00:00Z"
                until: "2018-04-07T00:00:00Z"
            commands:
              open:
                href: "https://localhost:8904/api/lockers/3456/open"
              quarantine:
                href: "https://localhost:8904/api/lockers/3456/quarantine"
              quarantineUntil:
                href: "https://localhost:8904/api/lockers/3456/quarantine"
              cancelQuarantine:
                href: "https://localhost:8904/api/lockers/3456/cancel_quarantine"
          - name: "Lobby locker 2"
            shortName: "L2"
            description: "Faulty USB charging port"
            href: "https://localhost:8904/api/lockers/3457"
            assignments:
              - cardholder:
                  name: "R"
                  href: "https://localhost:8904/api/cardholders/10136"
                from: "1999-11-08T00:00:00Z"
                until: "2002-11-20T00:00:00Z"
            commands:
              open:
                href: "https://localhost:8904/api/lockers/3457/open"
              quarantine:
                href: "https://localhost:8904/api/lockers/3457/quarantine"
              quarantineUntil:
                href: "https://localhost:8904/api/lockers/3457/quarantine"
              cancelQuarantine:
                href: "https://localhost:8904/api/lockers/3457/cancel_quarantine"

    LockerDetail:
      description: |
        [/api/lockers/{id}](#operation--api-locker--id--get) returns one of these.  It contains some
        basic data about a locker, its assignments (the cardholders who can open it), and a link to
        override it open.

      properties:
        href:
          type: string
          format: url
          description: A self-reference.
          example: "https://localhost:8904/api/lockers/3456"
        name:
          type: string
          example: "Lobby locker 1"
        shortName:
          type: string
          example: "L1"
        description:
          type: string
          example: "Wheelchair-suitable"
        division:
          type: object
          description: The division containing this locker.
          example: { id: "2", href: "https://localhost:8904/api/divisions/2" }
        notes:
          type: string
          description: The notes field is not in the default result set.  You must ask for it using `fields`.
        connectedController:
          <<: *CONNECTEDCONTROLLER
        assignments:
          type: array
          description: |
            A locker can have many assignments.  Each contains a cardholder and up to two dates,
            between which the cardholder can open the locker.  If either of the dates is missing, the
            assignment is unbounded in that direction.
          items:
            type: object
            properties:
              href:
                type: string
                format: url
                description: |
                  This is the href of a cardholder's assignment to a locker.  Put it in a [cardholder
                  PATCH](#operation--api-cardholders--id--patch) to update or delete it.

                  You can also revoke a cardholder's access to this locker by sending a
                  [DELETE](#operation--api-cardholders--id--lockers--assignment_id--delete) to this
                  href.

                  If the site does not have the RESTCardholders licence or your operator does not have
                  the privilege to view the cardholder, this link will not work in a DELETE or a
                  cardholder PATCH.
              cardholder:
                type: object
                description: |
                  The name and href of the cardholder assigned to this locker.  It will be missing if
                  the site does not have the RESTCardholders licence or your operator does not have
                  the privilege to view that cardholder.
              from:
                type: string
                format: date-time
                description: |
                  If missing, the locker assignment has no start time, meaning the cardholder can open
                  the locker while the 'until' time is in the future.
              until:
                type: string
                format: date-time
                description: |
                  If missing, the locker assignment has no end time, meaning the cardholder can open
                  the locker after the 'from' time.
          example:
            - href: "https://localhost:8904/api/cardholders/325/lockers/abe3456e"
              cardholder:
                name: "Boothroyd, Algernon"
                href: "https://localhost:8904/api/cardholders/325"
              from: "2018-01-01T00:00:00Z"
              until: "2020-01-01T00:00:00Z"
            - href: "https://localhost:8904/api/cardholders/10135/lockers/deb9456f"
              cardholder:
                name: "Messervy, Miles"
                href: "https://localhost:8904/api/cardholders/10135"
              from: "2018-04-01T05:00:00Z"
              until: "2018-04-07T00:00:00Z"
        commands:
          <<: *LOCKERCOMMANDS
        updates:
          type: object
          properties:
            href:
              type: string
              format: url
          description: |
            Follow the URL in the href inside this block to receive the locker's current status, then
            follow the `next` link in the results to long poll for changes to that status.

            `updates` was added to the lockers controller in 9.10 for consistency with other
            controllers, but we discourage its use in favour of [bulk status monitoring](
            events.html#status-subscriptions).

            Although a locker's status includes 'free' or 'allocated', allocating or un-allocating a
            locker does not cause the API to report a change of status.  Opening, closing,
            quarantining, and unquarantining a locker do.

          example: { href: "https://localhost:8904/api/lockers/3456/updates" }

    MacroSearch:
      description: An array of macro summaries, and a `next` link for more.
      properties:
        results:
          type: array
          description: An array of macro summaries.
          items: { $ref: '#/components/schemas/MacroSummary' }

        next:
          type: object
          description: The link to the next page.  Absent if you have retrieved them all.
          properties:
            href: { type: string, format: url }
          example:
            href: "https://localhost:8904/api/macros?skip=1000"

    MacroSummary:
      description: |
        `/api/macros` returns an array of these.  It is a subset of what you get from a
        macro's detail page at `/api/macros/{id}` (linked as the href in this object).
      properties:
        href:
          type: string
          format: url
          description: |
            A link to a [macro detail](#definition-Macro-detail) object for this macro.
          example: "https://localhost:8904/api/macros/8492"
        id:
          type: string
          description: |
            An alphanumeric identifier, unique to the server.  This is the ID to use in the `source`
            parameter of [event filters](events.html#operation--api-events-get) if you are only
            interested in events from particular macros (which would be unusual, since macros do not
            generate many events).
          example: "8492"
        name:
          type: string
          example: "Arm lobby"

    MacroDetail:
      description: |
        [/api/macros/{id}](#operation--api-macros--id--get) returns one of these.

        It contains a block called `updates`.  This is reserved for future development and its
        behaviour will change in later versions of Command Centre.

      allOf:
        - type: object
          properties:
            description:
              type: string
              example: "Arms and secures all lobby zones."
            division:
              type: object
              description:  The division containing this Macro.
              example:
                href: "https://localhost:8904/api/divisions/2"
            shortName: {<<: *SHORTNAME}
            commands:
              type: object
              description: >-
                The only thing you can do to a macro via REST is run it, so this block only contains
                one command, and only if your operator is privileged to do that.
              properties:
                run:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/macros/8492/run"
                      description: "[POST](#operation--api-macros--id--run-post) to this to run this macro."
                      type: string
                      format: url

        - $ref: "#/components/schemas/MacroSummary"

    OperatorGroupSearch:
      description: |
        An array of operator group summaries, described in the next section, and a `next` link for
        more.
      properties:
        results:
          type: array
          description: An array of operator group summaries.
          items:
            { $ref: '#/components/schemas/OperatorGroupSummary' }
        next:
          type: object
          description: The link to the next page.  Absent if you have retrieved them all.
          properties:
            href:
              type: string
              format: url
          example:
             href: "https://localhost:8904/api/operator_groups?skip=61320"

    OperatorGroupSummary:
      description: |
        The operator group search at `/api/operator_groups` returns an array of these, and
        `/api/operator_groups/{id}` (linked as the href in this object) returns one with more fields.

      properties:
        href:
          type: string
          format: url
          description: |
            A link to an [operator group detail](#definition-Operator-group-detail) object for this
            operator group.
          example: "https://localhost:8904/api/operator_groups/523"
        name:
          type: string
          example: "Locker admins."
        serverDisplayName:
          <<: *SERVER

    OperatorGroupDetail:
      description: |
        [/api/operator_groups/{id}](#operation--api-operator_groups--id--get) returns one of these.
        In addition to the basic items details such as division and description, it lists the
        divisions in which it grants privileges to its members.

      allOf:
        - type: object
          properties:
            description:
              type: string
              example: "For managing locker assignments."
            division:
              type: object
              description: |
                The division that contains this operator group.  This has no bearing on the divisions
                in which this operator group grants privileges; that is `divisions`.
              example:
                id: "2"
                href: "https://localhost:8904/api/divisions/2"
            cardholders:
              type: object
              description: |
                Following this link lists the group's [cardholder
                members](#operation--api-operator_groups--id--cardholders-get).
              example:
                href: "https://localhost:8904/api/operator_groups/523/cardholders"
            divisions:
              description: |
                An array containing the divisions in which this operator group grants its privileges.
              type: array
              items:
                type: object
                properties:
                  division:
                    type: object
                    properties:
                      name:
                        type: string
                      href:
                        type: string
                        format: url
                
              example: [
                division: {
                  "name": "Staff",
                  "href": "https://localhost:8904/api/divisions/647"
                },
                division: {
                  "name": "Contractors",
                  "href": "https://localhost:8904/api/divisions/649"
                }
               ]

        - $ref: "#/components/schemas/OperatorGroupSummary"

    OperatorGroupMembership:
      description: |
        Returned in an array by
        [/api/operator_groups/{id}/cardholders](#operation--api-operator_groups--id--cardholders-get),
        containing cardholders who are members of a particular operator group.

        Each item contains the
        cardholder's name and (if your operator has the privilege to view that cardholder) an href to
        the cardholder record.
        8.70 added an href that you can use to delete the operator group membership.

        [PATCH](#operation--api-cardholders--id--patch) the href in the cardholder block if you want
        to change anything about that cardholder.  The operator groups they are in, for example.

      properties:
        href:
          type: string
          format: url
          description: |
            [DELETE](#operation--api-cardholders--id--operator_groups--membership_id--delete) this URL
            to remove the cardholder from this operator group.

            DELETE is the only verb you can use on this URL.  GET will always return a 404.

            It is not a default field - if you want it, you need to request it using the `fields`
            query parameter.

            Added in 8.70.

        cardholder: {type: object, description: 'The name and href of the member cardholder.'}
      example:
        href: "https://localhost:8904/api/cardholders/325/operator_groups/EBDRSD"
        cardholder:
          name: "Boothroyd, Algernon"
          href: "https://localhost:8904/api/cardholders/325"

  #######################################################################
  #######################################################################
    OutputSearch:
      description: An array of output summaries, and a `next` link for more.
      properties:
        results:
          type: array
          description: An array of output summaries.
          items: { $ref: '#/components/schemas/OutputSummary' }

        next:
          type: object
          description: The link to the next page.  Absent if you have retrieved them all.
          properties:
            href: { type: string, format: url }
          example:
            href: "https://localhost:8904/api/outputs?skip=1000"

    OutputSummary:
      description: |
        `/api/outputs` returns an array of these.  It is a subset of what you get from a
        output's detail page at `/api/outputs/{id}` (linked as the href in this object).
      properties:
        href:
          type: string
          format: url
          description: |
            A link to an [output detail](#definition-Output-detail) object for this output.
          example: "https://localhost:8904/api/outputs/2365"
        id:
          type: string
          description: |
            An alphanumeric identifier, unique to the server. This is the ID to use in the `source`
            parameter of [event filters](events.html#operation--api-events-get) if you are only
            interested in events from particular outputs.
          example: "2365"
        name:
          type: string
          example: "Studio door red/green"

    OutputDetail:
      description: |
        [/api/outputs/{id}](#operation--api-outputs--id--get) returns one of these.

      allOf:
        - type: object
          properties:
            description:
              type: string
              example: "Red or green, controlled from sound desk."
            division:
              type: object
              description:  The division containing this output.
              example:
                href: "https://localhost:8904/api/divisions/2"
            shortName: {<<: *SHORTNAME}
            notes: {<<: *NOTES}
            updates:
              <<: *UPDATES
              example: { href: "https://localhost:8904/api/outputs/2365/updates/0_0_0" }
            statusFlags:
              <<: *STATUSFLAGS
              example: ["open", "overridden"]
            connectedController:
              <<: *CONNECTEDCONTROLLER
            commands:
              type: object
              description: |
                A block of commands, each represented by a block containing an href that accepts a
                POST that will send an override to the output, turning it on or off.

                It will be missing if your operator does not have a privilege that allows overriding
                the output (examples of which are in the documentation for the POSTs).

              properties:
                on:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/outputs/2365/on"
                      description: |
                        [POST](#operation--api-outputs--id--on-post) to this to close this output.
                      type: string
                      format: url
                onUntil:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/outputs/2365/on"
                      description: |
                        [POST](#operation--api-outputs--id--on-post) to this to close this output for
                        a fixed time.
                      type: string
                      format: url
                off:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/outputs/2365/off"
                      description: |
                        [POST](#operation--api-outputs--id--off-post) to this to open this output.
                      type: string
                      format: url
                offUntil:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/outputs/2365/off"
                      description: |
                        [POST](#operation--api-outputs--id--off-post) to this to open this output for
                        a fixed time.
                      type: string
                      format: url
                pulse:
                  type: object
                  properties:
                    href:
                      example: "https://localhost:8904/api/outputs/2365/pulse"
                      description: |
                        [POST](#operation--api-outputs--id--pulse-post) to this to close this output
                        for its pulse time.

                        This link will only be here if the output is set to pulse when activated.

                        Added in 8.50.
                      type: string
                      format: url

        - $ref: "#/components/schemas/OutputSummary"

    PDFDefinitionSearch:
      description: |
        An array of PDF definition summaries, and a `next` link for more.

      properties:
        results:
          type: array
          description: An array of PDF definition summaries.
          items: { $ref: '#/components/schemas/PDFDefinition' }
          example:
            - name: "email"
              id: "5516"
              href: "https://localhost:8904/api/personal_data_fields/5516"
            - name: "cellphone"
              id: "9998"
              href: "https://localhost:8904/api/personal_data_fields/9998"
              serverDisplayName: "ruatoria.satellite.int"
        next:
          type: object
          description: The link to the next page of results.  Absent if you have retrieved them all.
          properties:
            href:
              type: string
              format: url
              example: "https://localhost:8904/api/personal_data_fields?pos=900&sort=id"

    PDFDefinition:
      description: |
        `/api/personal_data_fields` returns an array of these.  By default it gives you just the
        basics about a PDF:  its ID, href, name, and (if it is remote) the name of its home server.
        By using the `fields` parameter you can add more.
      properties:
        id:
          type: string
          readOnly: true
          description: |
            An alphanumeric identifier, unique to the server.  Use it to filter cardholder searches
            and to add your external ID to the results of an event search.

        name:
          type: string
          example: "email"
        serverDisplayName:
          <<: *SERVER
        description:
          type: string
          example: "Corporate mailbox"
        division:
          type: object
          description: |
            The division containing this PDF definition.  Required when creating one.
          example: {id: "2", href: "https://localhost:8904/api/divisions/2" }
        type:
          type: string
          description: |
            The type of PDF: string, image, email address, etc.

            Required when creating a new PDF definition, but ignored when PATCHing one since a PDF's
            type is fixed once set.
          enum: [string, image, strEnum, numeric, date, address, phone, email, mobile]
          example: "email"
        default:
          description: |
            This is the value that new cardholders will receive, if not supplied by the creating
            client.  Required for 'required' PDFs.

            This field will be missing if there is no default value.

            To clear the default, send the blank string `""`.
          type: string
          example: "contact@example.com"
        required:
          type: boolean
          example: false
          description:  |
            If true, every cardholder with this PDF must have a value for it.  No blanks allowed.
        unique:
          type: boolean
          example: false
          description: |
            If true, every cardholder with a value for this PDF must have a different value.

            After 8.70 this will not show for date and image PDFs, because it can never be true for
            them.
        defaultAccess:
          type: string
          example: "fullAccess"
          enum: [ "noAccess", "readOnly", "fullAccess" ]
          default: "fullAccess"
          description: |
            This is the access that operators will have to cardholders' values of this PDF if the
            operator is not a member of an operator group that overrides it.  Check the operator
            group's 'Personal data' tab in the Configuration Client.
        operatorAccess:
          readOnly: true
          description: |
            This is the access that your operator has to cardholders' values of this PDF including the
            permissions granted by this cardholder's operator groups.  You will only
            get this field if you ask for it with the `fields` parameter.

            New in 8.80.
          type: string
          enum: [ "noAccess", "readOnly", "fullAccess" ]
          example: "fullAccess"
        sortPriority:
          description: |
            This is called 'sort order' in the Configuration Client.  Interactive clients use this
            number to order the list of PDFs on a cardholder.  It has no effect on access control or this API.
          type: integer
          example: 50
        accessGroups:
          readOnly: true
          description: |
            This array contains a block for each access group that gives this PDF to its members.
            Each block contains the group's name, and if the operator has read access to the
            group, its href.
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              href:
                type: string
                format: url
          example:
            - 'name': "All Staff"
            - 'name': "R&D Special Projects Group"
              'href': "https://localhost:8904/api/access_groups/352"

        notificationDefault:
          description: |
            This value is copied to the 'notification' flag on a cardholder's value for this PDF when
            they first gain membership of one of this PDF's access groups.  It will only appear for
            PDF types that can receive notifications (email addresses and mobile numbers), and only if
            you ask for it with the `fields` parameter.  The server will ignore it if you send it in a
            POST or PATCH to a PDF that is not email or mobile.

            New in 8.50.
          type: boolean
          example: false

        regex:
          description: |
            This is the regular expression that a PDF value must match before Command Centre will
            accept it on a cardholder.

            To remove the requirement that PDF values match a regular expression, send the empty
            string `""`.
          type: string
          example: ".*@.*"
        regexDescription:
          description: Regular expressions often need explaining.
          type: string
          example: "@ least"
        imageWidth:
          description: |
            The maximum width of an image stored in this PDF, in pixels, for image PDF types.  You
            will only get this field if you ask for it with the `fields` parameter.

            You can set this on a new PDF definition but not change it on an existing definition.

            New in 8.50.
          type: integer
          example: 600
        imageHeight:
          description: |
            The maximum height of an image stored in this PDF, in pixels, for image PDF types.  You
            will only get this field if you ask for it with the `fields` parameter.

            You can set this on a new PDF definition but not change it on an existing definition.

            New in 8.50.
          type: integer
          example: 800
        imageFormat:
          description: |
            Whether this image PDF stores BMPs, JPEGs, or PNGs.  You will only get this field if you
            ask for it with the `fields` parameter.

            New in 8.50.  Deprecated in 8.70 by `contentType`, which is more standard.
          type: string
          enum: [bmp, jpg, png]
          example: "jpg"
        contentType:
          description: |
            Whether this image PDF stores BMPs, JPEGs, or PNGs.  You will only get this field if you
            ask for it with the `fields` parameter.

            You can set this on a new PDF definition but not change it on an existing definition.

            New in 8.70.
          type: string
          enum: [image/bmp, image/jpeg, image/png]
          example: "image/jpeg"
        isProfileImage:
          description: |
            True if and only if this PDF holds images and it is set as a profile image.

            Unlike many other properties of an image PDF, this can be changed at will.

            New in 8.70.
          type: boolean
          example: false

    ReceptionSearch:
      description: |
        An array of receptions, and a `next` link for more.

      properties:
        results:
          type: array
          description: An array of receptions.
          items: { $ref: '#/components/schemas/Reception' }
          example:
            - name: "Main lobby"
              href: "https://localhost:8904/api/receptions/937"
            - name: "Green Dragon main desk"
              href: "https://localhost:8904/api/receptions/979"
        next:
          type: object
          description: The link to the next page of results.  Absent if you have retrieved them all.
          properties:
            href:
              type: string
              format: url
              example: "https://localhost:8904/api/receptions?pos=1000"

    Reception:
      description: |
        `/api/receptions` returns an array of these, and `/api/receptions/{id}` returns one.  Each
        gives you enough about a reception to identify it and use it in a visit:  its href, name, and
        (if you ask for them using the `fields` parameter) its description, default visitor type, and
        notes.
      properties:
        name:
          type: string
          example: "Main lobby"
        href:
          type: string
          format: url
          description: |
            This is the href to use when creating a visit.
          example: "https://localhost:8904/api/receptions/937"
        serverDisplayName:
          <<: *SERVER
        description:
          type: string
          example: "Security foyer in B1"
          description: |
            Short free-form text.  Searches do not return an item's description - ask for it using the
            `fields` parameter.
        division:
          type: object
          description: The division containing this reception.
          example: {id: "2", href: "https://localhost:8904/api/divisions/2" }
        defaultVisitorType:
          type: object
          description: |
            Gallagher's visitor management applications use this to pre-fill a UI element prompting
            the user to pick a visitor type when they are creating a visit for this reception.  The
            server does not use it.
          example:
            href: "https://localhost:8904/api/divisions/2/v_t/925"
            accessGroup:
              name: "Visitor group 1"
              href: "https://localhost:8904/api/access_groups/925"
        notes:
          type: string
          description: |
            Free-form text.  You will only get this field if you ask for it with the `fields`
            parameter.

    Redaction:
      description: |
        An array of these comes from `GET /cardholders/redactions`.

      allOf:
        - $ref: "#/components/schemas/CardholderRedaction"
        - type: object
          properties:
            cardholder:
              type: object
              description: |
                The href of the cardholder whose events or item this redaction should affect.

                Required.
              example: {"href": "https://localhost:8904/api/cardholders/630"}
            finished:
              type: string
              description: |
                When the redaction finished.

                Will be missing from pending redactions.
              format: date-time
              example: "2022-01-01T00:00:00Z"
            message:
              type: string
              description: |
                Translated string from the redaction's error code.  Will be absent if empty, or if the
                redaction is pending or complete.
              example: "Invalid cardholder"
            details:
              type: string
              description: |
                A more detailed description of what went wrong.

                Not translated.  Will be absent if empty, or if the redaction is pending or complete.

              example: ""

  ######################################################################
    RedactionPOSTExample:
      description: |
        POST one of these to schedule a redaction.

      required: [ cardholder, type ]
      properties:
        cardholder:
          type: object
          description: |
            The href of the cardholder whose events or item this redaction should affect.

            Required.
          example: {"href": "https://localhost:8904/api/cardholders/630"}
        type:
          type: string 
          enum: [ normalEvents, cardholder ]
          description: |
            Whether this redaction is for events or cardholder information.

            Required.
          example: "normalEvents"
        when:
          type: string
          description: |
            When redaction is meant to happen.  This should be in the future.  If it is in the past,
            the service returns 400-Bad Request Invalid Start Time.

            Optional.  If it is absent, it means to do it asap.

          format: date-time
          example: "2023-01-01T00:00:00Z"
        before:
          type: string
          description: |
            For event redactions, do not redact any events after this time.  No effect on cardholder
            information redactions.

            Optional.

          format: date-time
          example: "2022-01-01T00:00:00Z"
      
    RESTClientPATCH:
      description: |
        The [REST Client PATCH](#operation--REST-Client-URL--patch) expects one of these in its body.

        Both fields are optional.

        ***This feature is still in development and may change behaviour before release.***

      properties:
        hasFault:
          type: boolean
          example: false
          description: |
            If true, the server will change the status of this REST Client to include an indication
            that is has a fault, and will raise an active alarm to draw the operators' attention.
            Being active, operators will not be able to process that alarm until you restore it by
            passing false here.

        customStatusText:
          type: string
          example: "Disk 87% full"
          maxLength: 1024
          description: |
            The server will include the text you supply here whenever it generates status text for
            this item.

            This text field works independently of the item's other states and its fault flag:  you can
            use it purely for information.

            The integrator is responsibile for any personally identifiable information sent to Command
            Centre via the API.

    Role:
      description: |
        `/api/roles` returns an array of these.  Each element gives you enough about a role to
        identify it and use it in a cardholder PATCH:  its href, name, description, and (if you ask
        for them using the `fields` parameter) notes.

        In 9.10 or later you can send one of these in a POST to create a new role, or in a PATCH to
        modify an existing one.
      properties:
        name:
          type: string
          example: "Supervisor"
        href:
          readOnly: true
          type: string
          format: url
          description: |
            This is the string to use when creating a relationship between cardholders using this
            role.
          example: "https://localhost:8904/api/roles/1399"
        serverDisplayName:
          <<: *SERVER
        description:
          type: string
          example: "aka floor manager"
        division:
          type: object
          description: |
            The division containing this role.  Required in a POST, optional in a PATCH.
          example: {href: "https://localhost:8904/api/divisions/2" }

        enableCompetencyExpiryWarnings:
          type: boolean
          description: |
            Controls whether CC sends notifications to a person holding this role when their staff's
            competencies are about to expire.
          example: false

        enableCardExpiryWarnings:
          type: boolean
          description: |
            Controls whether CC sends notifications to a person holding this role when their staff's
            cards are about to expire.
          example: true
      

    ScheduleSearch:
      type: object
      properties:
        results:
          type: array
          description: An array of schedule summaries.
          items:
            $ref: '#/components/schemas/ScheduleSummary'
        next:
          type: object
          properties:
            href:
              type: string
              format: url
          description: The link to the next page.  Absent if you have retrieved them
            all.
          example:
            href: https://localhost:8904/api/schedules?skip=1000
      description: "An array of schedule summaries, and a `next` link for more."

    ScheduleSummary:
      type: object
      properties:
        href:
          type: string
          description: |
            A link to a [schedule detail](#definition-Schedule-detail).
          format: url
          example: https://localhost:8904/api/schedules/6
        name:
          type: string
          example: Default Access Zone Secure
      description: |
        A [schedule search](#operation--api-schedule--get) returns an array of these.  It is a
        subset of what you get from a detail page at `/api/schedules/{id}` (linked as the href in this
        object).

    ScheduleDetail:
      description: |
        [/api/schedules/{id}](#operation--api-schedules--id--get) returns one of these, and you put
         one of these in the body of a POST or PATCH to create or edit a schedule.
      allOf:
      - $ref: '#/components/schemas/ScheduleSummary'
      - type: object
        properties:
          description:
            type: string
            example: Secure 24/7
          division:
            type: object
            properties: {href: {type: string, format: url}}
            description: |
              The division containing this schedule.  It is possible to change a schedule's
              division after creating it.
            example:
              href: https://localhost:8904/api/divisions/2
          notes:
            type: string
            description: |
              Because of their potential size, notes are only available by request.  Use the 'fields'
              parameter:

              `?fields=defaults,notes,...`
            example: Multi-line text...
          type:
            type: object
            properties:
              type:
                type: string
                example: accessZoneSchedule
                enum:
                - accessZoneSchedule
                - accessSchedule
                - alarmZoneSchedule
                - outputSchedule
                - notificationSchedule
                - hVLFSchedule
                - elevatorKioskControlSchedule
            description: |
              This block contains a string field `type` which will (in the server's response to a
              GET) or must (in the body of your POST) be one of the seven schedule types.  It is not a
              valid field in a PATCH, because you cannot change the type of an existing schedule.

              Elevator kiosk control schedules arrived in 8.60.
          dayCategories:
            description: |
              This is the part of the schedule that controls when changes occur on its scheduled
              items.

              It is an array of objects, each containing a day category and an array of times.  The
              day category picks days of the year, and the `times` array sets what will happen and
              at what times on those days.

              In the body of your POST:

                * The `time` field of each object inside `times` must be a string of the form
                  `HH:MM` between 00:00 and 23:59.  If you find another format that works (four
                  zeroes, for example), it may not work in future versions.

                * Each day category must have an entry at 00:00.  This means an item does not need
                  to search back in time to find what state it should be in when it first comes
                  online.

                * Each day category cannot have more than one entry at the same time.

              If you receive a 400 response to your POST or PATCH and one of those rules is the
              cause, the body of the response should contain a reminder.

              The `state` field is an array describing what should happen at that time.  It is
              comparable to the `statusFlags` arrays on access zones, alarm zones, outputs, and
              fence zones.  For most schedule types it will contain only one word, but the extra
              flag `usePin` may accompany access zone state changes.

              When building your JSON, treat these string comparisons as case-sensitive.

              All schedule types can have a state change called 'cancelUntimedOverrides'.  That sets
              an item back to its scheduled state if it was under the effect of an override with no
              end time.

              Other than that, each schedule type has its own set of state changes:

                * An Access Schedule, also known as a Cardholder Access Schedule, controls the
                  ability of the members of an access group to pass into an access zone.  The valid
                  states are `grant` and `deny`.  Note that 'deny' is a misnomer:  a cardholder will
                  gain access through a door if they are a member of a different access group that
                  still has access.

                * An Access Zone Schedule controls the mode of an access zone.  The valid states are
                  the same as the [zone's status flags](#definition-Access-Zone-detail):  `secure`,
                  `dualAuth`, `codeOrCard`, or `free`.  The extra flag `usePin` means the same here
                  as it does in the status flags:  people will need their PINs at readers and alarms
                  terminals.

                * An Alarm Zone Schedule switches an alarm zone between its four modes: `set`,
                  `unset`, `user`, and `user2`.  Use the words `user1` and `user2` here even if you
                  have renamed them in the server properties.

                * An Output Schedule can be `on` or `off`, plain and simple.

                * A Notification Schedule controls when notifications go out.  They can make sure
                  that notifications go to the people who are on shift, and they can prevent
                  bothering people at night.  Like the access and output schedules it is binary, but
                  the valid states are called `notificationEnabled` and `notificationDisabled`.

                * A HV/LF Schedule controls the voltage on an electric fence.  'lowFeel' mode allows
                  detection without the deterrant of `highVoltate`.

              This example sets an access zone to secure mode between 7.30am and 6:00pm on work
              days, and secure plus PIN mode at all other times.
            example: [
              { "dayCategory": {
                  "href": "https://localhost:8904/api/day_categories/3",
                  "name": "Default Day Category" },
                "times": [
                  { "time": "00:00", "state": [ "secure", "usePin" ] },
                  { "time": "07:30", "state": [ "secure" ] },
                  { "time": "18:00", "state": [ "secure", "usePin" ] }
                ]
              },
              { "dayCategory": {
                  "href": "https://localhost:8904/api/day_categories/300",
                  "name": "Weekends and holidays" },
                "times": [
                  { "time": "00:00", "state": [ "secure", "usePin" ] }
                ]
              }
            ]
            type: array
            items:
              type: object
              properties:
                dayCategory:
                  type: object
                  properties:
                    href:
                      type: string
                      format: url
                    name:
                      type: string
              
          scheduledItems:
            readOnly: true     
            description: |
              An array containing the names and hrefs of all the items that this schedule controls
              and that the operator has the privilege to view.

              This is generated data.  A schedule resides in the configuration of the items that use
              it, rather than the other way around, so this block is a handy aggregation of the
              inverse of those relationships.  As such it is read-only:  the server will ignore it
              if you send it in a POST or a PATCH.
            example: [{"href": "https://localhost:8904/api/items/637", "name": "Access Zone 1"},
                      {"href": "https://localhost:8904/api/items/638", "name": "Access Zone 2"}]
            type: array
            items:
              type: object
              properties:
                href:
                  type: string
                  format: url
                name:
                  type: string

    CardholderRedaction:
      description: |
        These appear in an array in a cardholder object.  Each describes a redaction scheduled for the
        cardholder.

        A cardholder can have multiple event redactions pending, because they can operate on events
        from different periods, but since a cardholder redaction removes the cardholder item there
        can be only one.

      properties:
        href:
          type: string
          format: url
          description: |
            DELETE this URL to cancel this redaction.

            DELETE is the only verb you can use on this URL.  GET will always return a 404.

          example: "https://localhost:8904/api/cardholders/redactions/625"
        type:
          type: string 
          enum: [ normalEvents, cardholder ]
          description: |
            Whether this redaction is for cardholder events or cardholder information.
          example: "normalEvents"
        when:
          description: |
            When redaction is meant to happen.  This should be in the future.  If it is in the past,
            the service returns 400-Bad Request Invalid Start Time.

            Optional.  If it is absent, it means to do it asap.

          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        before:
          description: |
            For event redactions, do not redact any events after this time.  No effect on cardholder
            information redactions.

            Optional.

          type: string
          format: date-time
          example: "2022-01-01T00:00:00Z"
        status:
          type: string
          enum: [ pending, inProgress, cancelled, done, failed ]
          description: |
            The status of this redaction.
          example: "pending"
        redactionOperator:
          description: |
            A block containing the href and current name of the operator who scheduled the redaction.

          type: object
          example: {"name": "REST Operator", "href": "https://localhost:8904/api/items/100"}

    OverrideEndTime:
      type: object
      properties:
        endTime:
          type: string
          format: date-time
          description: |
            Put this in the body of override POSTs to set the time at which the override
            should cease.  The API will reject the override if the string is not empty and
            it cannot parse it into a date-time, but it will treat the override as having no
            end time if you mis-spell 'endTime' or if you send a blank string.

            Command Centre computes an override's duration to a whole number of minutes with a minimum
            of one.  That means that a timed override will always end at a multiple of sixty seconds
            from the time the hardware receives the override request, which means the override will
            end within thirty seconds of the time you supplied here.  In versions older than 8.80, the
            discrepancy may be up to a minute.

            Careful observation of overrides submitted from the Configuration client and from the API
            will reveal that they use different rounding methods.  Be assured, both result in
            overrides ending within a minute of the requested time.

          example: "2018-07-31T00:00:00Z"

    Visit:
      description: |
        `GET /api/visits` returns an array of these (with fewer fields), `GET /api/visits/{id}` returns one, and you can
        send one in a POST or PATCH to `/api/visits`.

      properties:
        name:
          <<: *VISIT_NAME
        href:
          type: string
          format: url
          description: |
            This is the URL to send a PATCH to when modifying an existing visit.  You can find it in
            the body of a GET that returns a visit, or in the Location header of a POST that creates
            one.

            It is not necessary in a POST or PATCH.  The server will ignore it if you send it.
          example: "https://localhost:8904/api/visits/941"
        serverDisplayName:
          <<: *SERVER
        description:
          <<: *VISIT_DESCRIPTION
        division:
          type: object
          description: |
            The division containing this visit.

            This only comes out of a GET.  It will be the visit's reception's division, or if that
            division did not have an active visitor management configuration when the visit was
            created, the first ancestor up the division tree that did.

            The server will ignore it if you send it, because you cannot change a visit's division
            directly.  You can affect it indirectly by changing the visit's reception.
          example: {id: "2", href: "https://localhost:8904/api/divisions/2" }
        reception:
          <<: *VISIT_RECEPTION
        visitorType:
          <<: *VISIT_VISITORTYPE
        host:
          <<: *VISIT_HOST
        from:
          <<: *VISIT_FROM_UNTIL
          example: "1971-03-08T14:35:00Z"
        until:
          <<: *VISIT_FROM_UNTIL
          example: "2021-03-08T14:35:00Z"
        location:
          <<: *VISIT_LOCATION
        visitorAccessGroups:
          <<: *VISIT_AGS
        visitors:
          <<: *VISIT_ORS

      

  securitySchemes:
    API_key:
      type: apiKey
      name: Authorization
      in: header
      description: happykey description
info:
  x-logo:
    url: gallagher.png
  title: "Command Centre REST API"
  version: "1.0"

  
  description: |
    ## Introduction

    This document describes how you can use the Command Centre REST API to view and manage access
    zones, alarm zones, elevator groups, fence zones, doors, macros, inputs, and outputs.

    ## Testing internal links.

    ### Links to intro sections.

    [Rapidoc intro section link](#overview--forward-compatibility-hateoas)
    
    [Redoc intro section link](#section/Forward-compatibility-(HATEOAS):)

    OpenAPI Explorer has no links to intro sections.

    ### Links to operations.
    
    [Rapidoc path link](#get-/api/access_groups)
    
    [OpenAPI Explorer path link](#tag--Access-Zones?route=tag--Access-groups)
    
    [Redoc path link](#tag/Access-groups/paths/~1api~1access_groups/get)
    

    ### Links to schema
    
    [Rapidoc schema link](#cmp--schemas-accessgroupdetail) (only good in focussed mode)

    [OpenAPI Explorer schema link](#tag--Access-Zones?route=cmp--schemas-accessgroupdetail)

    Redocly does not show components on their own.

    ### Links to paragraphs.
    
    [Rapidoc description paragraph link](#tag--Cardholders--field-names-in-query-parameters).

    [Rapidoc read mode description paragraph link](#field-names-in-query-parameters) same as redoc!

    [Redoc description paragraph link](#field-names-in-query-parameters).

    Can't see how to link to paragraph anchors in OpenAPI Explorer (but they are named same as Redoc).

paths:
  
  /api/access_groups:
    get:
      tags:
      - Access groups
      summary: Search access groups
      description: |2

        This returns access groups matching your search criteria.

        The result will contain no more than 100 or 1000 groups depending on your version; you
        should follow the `next` link, if it is present, to collect the next batch.

        When you have loaded all the access groups there will be no `next` link.

        If your result set is empty it means your operator does not have the privilege to view any
        access groups.  Perhaps there are none in the divisions in which your operator has 'View
        access groups' or 'Edit access groups', or your operator has no privileges at all.

        This request does not return the group's cardholders.  That would make the results unwieldy.
        Instead, it provides a separate link.

        Adding, deleting, or modifying access groups between calls to this API will not affect the
        pagination of its results if you sort by ID.

        You can find the URL for this call in the `features.accessGroups.accessGroups.href` field of
        `/api`.  In the interest of forward compability, [do not build it
        yourself](#topic-Forward-compatibility--HATEOAS-).
      parameters:
      - $ref: '#/components/parameters/sort'
      - name: top
        in: query
        description: |
          Sets the maximum number of access groups to return per page.  The default depends on your
          server version;  you should set it appropriately for your application.
        schema:
          minimum: 1
          type: integer
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/division'
      - $ref: '#/components/parameters/directDivision'
      - $ref: '#/components/parameters/description'
      - name: fields
        in: query
        description: |
          Sets the list of fields to return in the search results.  The values you can list are the
          same as the field names in the [details page](#definition-Access-group-detail).  Using it
          you can return everything on the search page that you would find on the details page.
          Separate values with commas.

          Use the special value `defaults` to return the fields you would have received had you not
          given the parameter at all.  Add more after a comma.

          Treat the string matches as case sensitive.

          In v8.00 you will receive the href and internal ID even if you didn't ask for them.  In
          8.10 you will not.  If you are going to send the fields parameter and need the href or ID,
          include them.
        style: form
        explode: false
        schema:
          type: array
          default: "[\"defaults\"]"
          items:
            type: string
            enum:
              - href
              - id
              - name
              - description
              - parent
              - division
              - children
              - notes
              - personalDataDefinitions
              - cardholders
              - access
              - saltoAccess
              - alarmZones
              - '...'
      - $ref: '#/components/parameters/pos'
      - $ref: '#/components/parameters/skip'
      responses:
        "200":
          description: |
            Success.  See the note in the description about privileges if your result set is empty.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGroupSearch'
        "403":
          description: The site does not have the RESTCardholders licence.
          content: {}

#######################################################################

    post:
      tags:
      - Access groups
      x-badges: [ <<: *BADGE_BETA ]
      summary: Create an access group
      description: |
        Creates a new access group, setting its basic fields, parent, PDFs, and some membership
        defaults.

        [Do not code this URL](#topic-Forward-compatibility--HATEOAS-) into your application.  Take
        it from the `href` field in the `features.accessGroups.accessGroups.href` field of `GET
        /api`.

        The POST expects a document in the same format as [the access group
        detail](#operation--api-access_groups--id--get).  All fields except `division` are optional.

        You will achieve better performance if you combine all you want to achieve into one POST,
        rather than creating the access group bare with a POST then refining it with PATCHes later.

        When successful it returns a location header containing the address of the new access group.

        Note that you can only create one access group per POST.

        This call requires the RESTConfiguration licence and a server running 9.30 or later.
      requestBody:
        description: |
          This example shows every field that you can set when creating or modifying an access
          group.  When creating one, `division` is mandatory.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessGroupPOSTExample'
        required: true
      responses:
        "201":
          description: Success.
          headers:
            location:
              description: The href of the new access group.
              schema:
                type: string
                format: url
          content: {}
        "400":
          description: |
            The body of the POST did not describe a valid access group.

            If you see 'Invalid Access Group JSON object', the server could not parse the JSON in
            the body of your POST.  Remember to quote all strings, especially those than contain @
            symbols.
          content: {}
        "403":
          description: |
            The operator does not have a privilege that allows creating access groups, or the server
            does not have the 'RESTConfiguration' licence.
          content: {}

  /api/access_groups/{id}:
    parameters:
    - $ref: "#/components/parameters/id"
    get:
      tags:
        - Access groups
      summary: Get details of an access group

      description: |
        In addition to the group's vitals and a link to the membership document in the access group
        search results, this call lists the group's child groups.

        Note that you can obtain the same results by adding a `fields` query parameter to a
        [search](#operation--api-access_groups-get).

        You can find the URL for this call in the access group search results and in a cardholder's
        `accessGroups` array.  In the interest of forward compability, [do not build it
        yourself](#topic-Forward-compatibility--HATEOAS-).

      parameters:
      - name: "fields"
        in: query
        required: false
        schema:
          type: array
          default: ['defaults']
          items:
            type: string
            enum: [href, id, name, description, parent, division, children, notes, personalDataDefinitions, access, saltoAccess, alarmZones, ...]
        description: |
          Sets the list of fields to return.  The values you can list are the same as the field
          names in the [detail results](#definition-Access-group-detail).  Use it to return less
          data than normal.  Separate values with commas.

          Treat the string matches as case sensitive.

          In v8.00 you will receive the href and internal ID even if you didn't ask for them.  In
          8.10 you will not.  If you are going to send the fields parameter and need the href or ID,
          include them.

      responses: 
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGroupDetail'
        "404":
          description: |
            That is not the URL of an access group, or the operator does not have a privilege that
            allows viewing it, such as 'Modify Access Control' or 'View Access Groups'.
          content: {}

    patch:
      tags:
        - Access groups
      summary: Update an access group
      description: |
        This is the call you use to modify fields on an access group.

        The PATCH expects a document in the same format as the [the access group
        detail](#definition-Access-group-detail) but with fewer fields, given in [this POST
        example](#definition-Access-group-POST-example).  Note that you cannot change everything on
        an access group that the API shows you, such as its membership, access, and permissions.
        You can change its basic fields, PDFs, and membership defaults.

        You can find the URL for this call in the [access group
        search](#operation--api-access_groups-get) results and in a cardholder's `accessGroups`
        array.  In the interest of forward compability, [do not build it
        yourself](#topic-Forward-compatibility--HATEOAS-).

        This call requires the RESTConfiguration licence and a server running 9.30 or later.

      requestBody:
        $ref: '#/components/requestBodies/AccessGroupPATCHExample'

      responses:
        200:
          description: |
            Success.  Future versions will return feedback from the server about your PATCH.
        204:
          description: "Success."
        400:
          description: |
            The body of the PATCH did not describe a valid access group.  See the body of the
            response for help on what went wrong.  It may be that you tried to use the name of
            another access group:  no two items of the same type can have the same name.  Or you may
            have tried to set the division to one that is not visible to you, or you may have
            attempted to create a loop in the access group hierarchy.

        403:
          description: |
            The operator has a privilege that allows viewing the item but not modifying it, or you
            tried to set the division to one you cannot configure, or the server is missing the
            necessary licence.

            You need the 'Edit Access Groups' privilege on the item you are changing, which means you
            need on it on the item's current division.  You also need it on the new division, if you
            are changing that.

            This is also the response when the server does not have the 'RESTConfiguration' licence.

        404:
          description: |
            That is not the URL of an access group or your operator does not have the privilege to view
            it.  This probably means you have built the URL yourself instead of taking it from the
            results of a [GET](#operation--api-access_groups-get).

        409:
          description: |
            The item is locked for editing by another operator.  The body of the response will
            tell you which operator is holding the lock.

    delete:
      tags: [ Access groups ]
      summary: Remove an access group
      description: |
        This call removes an access group from Command Centre.

        You can find the URL for this call in the [access group
        search](#operation--api-access_groups-get) results and in a cardholder's `accessGroups`
        array.  In the interest of forward compability, [do not build it
        yourself](#topic-Forward-compatibility--HATEOAS-).

        This call requires the RESTConfiguration licence and a server running 9.30 or later.

      responses: 
        200: { description: "Success." }
        204: { description: "Success." }
        400:
          description: |
            Deleting the access group failed.  This happens when the item is still being used by
            another item.
        403:
          description: |
            The operator has the permission to view the item but not delete it, or the server does
            not have the 'RESTConfiguration' licence.
        404:
          description: |
            That is not the URL of an access group or the operator is not privileged to view it.

  /api/access_groups/{id}/cardholders:
    parameters:
    - $ref: "#/components/parameters/id"

    get:
      tags:
        - Access groups
      summary: Get membership of an access group

      description: |-

        This lists all cardholders who are direct members of a particular group.  It does
        not paginate the results, so there is no `next` link.  That can make for a large
        document, so it omits the group's child groups and their cardholder members.  It
        is not recursive, in other words.

        There may be more than one entry per cardholder, because any one cardholder can have many
        memberships to a group, each with different from and until date-times.

        If your operator does not have the privilege to view a cardholder item you will receive its
        name but not its href (since following it would 404).

        You can find the URL in the `cardholders` block of an access group's search results or
        detail pages.  In the interest of forward compability, [do not build it
        yourself](#topic-Forward-compatibility--HATEOAS-).

      responses: 
        200: 
          description: "Success."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessGroupMembership'
              example:
                cardholders:
                - href: https://localhost:8904/api/cardholders/325/access_groups/D714D8A89
                  cardholder:
                    name: "Boothroyd, Algernon"
                    href: https://localhost:8904/api/cardholders/325
                  from: 2017-01-01T00:00:00Z
                  until: 2017-12-31T11:59:59Z
                - href: https://localhost:8904/api/cardholders/329/access_groups/18DE901A1
                  cardholder:
                    name: Miles Messervy
                  from: 2016-11-18T00:00:00Z

        404:
          description: |
            The ID is invalid, or it is valid but you do not have privileges for the access group.
            Check the body of the result for a description of the problem.

  /api/access_zones:
    get:
      tags:
      - Access Zones
      summary: Search access zones
      description: |
        This returns a summary of the access zones matching your search criteria.

        The result will contain no more than 100 or 1000 access zones (depending on your version),
        or as many as you asked for more in your request; you should follow the `next` link, if it
        is present, to collect the next batch.

        If your result set is empty it means your operator does not have the privilege to view any
        access zones, such as 'View Site', 'Edit Site', or 'Override'.  Perhaps there are no access
        zones in the divisions in which your operator has privileges, or your operator has no
        privileges at all.

        When you have loaded them all there will be no `next` link.

        [Do not code this URL](#topic-Forward-compatibility--HATEOAS-) into your application.  Take
        it from the 'href' field in the `features.accessZones.accessZones` section of `/api`.
      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - name: fields
        <<: [*FIELDSDESC_SUM, *ACZFIELDS]
      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"
      responses:
        "200":
          description: |
            Success.  See the note in the description about privileges if your result set is empty.
          content:
            application/json:
              schema:
                description: This contains an array of access zone summaries, and a `next` link to get more.
                type: object
                properties:
                  results:
                    type: array
                    description: An array of Access Zone summaries.
                    items: { $ref: '#/components/schemas/AccessZoneSummary' }

                  next:
                    type: object
                    description: The link to the next page.  Absent if you have retrieved them all.
                    properties:
                      href: { type: string, format: url }
                    example:
                      href: "https://localhost:8904/api/access_zones?skip=1000"
        403: {$ref: '#/components/responses/403nolicence'}

  /api/access_zones/update_cardholder_location:
    get:
      tags:
      - Access Zones
      summary: Search targetable access zones
      description: |
        This returns a list of the access zones to which your operator is allowed to move
        cardholders, and a special zone you can use as a target to remove a cardholder from all access
        zones.

        Like all other paginated queries in this API, the result will contain no more than 100
        or 1000 access zones (depending on your version), or as many as you asked for more in your
        request; you should follow the `next` link, if it is present, to collect the next batch.

        When you have loaded them all there will be no `next` link.

        If your result set is empty it means there are no access zones in the divisions in which
        your operator has the privilege to move cardholders ('Manage Cardholder Location'), or your
        operator does not have the privilege at all.

        Do not code this URL into your application.  Take it from the 'href' field in the
        `features.cardholders.updateLocationAccessZones` section of `/api`.

        Added in 8.20.
      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - name: fields
        <<: [*ACZFIELDS, *FIELDSDESC_SUM]
      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"
      responses:
        "200":
          description: |
            Success.  See the note in the description about privileges if your result set is empty.
          content:
            application/json:
              schema:
                description: |
                  This contains an array of access zones, and a link to a special 'outside the system' access
                  zone.  These are the access zones into which your operator has the privilege to move
                  cardholders.
                type: object
                properties:
                  results:
                    type: array
                    description: |
                      This is the same array of Access Zone summaries you would receive from the Access Zone
                      search GET.
                    items: { $ref: '#/components/schemas/AccessZoneSummary' }
                  outsideOfSystem:
                    type: object
                    description: |
                      This contains the href you should use to move a cardholder out of all Access Zones.
                    properties:
                      href: { type: string, format: url }
                    example:
                      href: "https://localhost:8904/api/access_zones/0"
                  next:
                    type: object
                    description: Follow this link to get the next page.  Absent if you have retrieved them all.
                    properties:
                      href: { type: string, format: url }
                    example:
                      href: "https://localhost:8904/api/access_zones?skip=1000"
        "403":
          description: The site does not have the RESTCardholders licence.
          content: {}
  /api/access_zones/{id}:
    get:
      tags:
      - Access Zones
      summary: Get details of an access zone
      description: |
        This returns the detail of one access zone.

        Follow the 'href' field in an [access zone summary](#definition-Access-Zone-summary) to get
        here rather than [building it yourself](#topic-Forward-compatibility--HATEOAS-).
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: |
          This instructs the server to return only these fields in the details page instead of the default set.  The values you can list
          are the same as the field names you would see in the results.  Use it to cut back on the size
          of the response.  Separate values with commas.

          Treat the string matches as case-sensitive.

          In v8.00 you will receive the href and internal ID even if you did not ask for them.  In 8.10
          and later you will only get what you asked for.  If you are going to send the `fields`
          parameter and need the href or ID, be explicit.
        schema:
          type: string
          enum:
          - href
          - id
          - name
          - shortName
          - description
          - division
          - commands
          - connectedController
          - doors
          - zoneCount
          - statusFlags
          - statusText
          - status
          - notes
          - updates
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessZoneDetail'
        403: {$ref: '#/components/responses/403nolicence'}
        "404":
          $ref: '#/components/responses/404accesszone'
  /api/access_zones/{id}/free:
    post:
      tags:
      - Access Zones
      summary: Set an access zone to free
      description: |
        Sends an override to an access zone to change its mode to 'free - no PIN', meaning the doors
        will be free and you will not need a PIN to perform an override on a terminal.

        Take this URL from the `commands` block of an access zone.  In there is a block called
        `free`, containing a field `href`.  That is the URL of this method.

        The URL from `commands.freePin.href` (as opposed to "free" without the "Pin") will send an override to an
        access zone to change its mode to 'free - PIN', meaning you _will_ need a PIN on a terminal.

        If you do not give the override an end time in the body it will remain in place until the
        next scheduled change.
      parameters:
      - name: id
        in: path
        description: The ID of the access zone.
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/requested_by"
      requestBody:
        $ref: '#/components/requestBodies/OverrideEndTime'
        required: false
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          $ref: '#/components/responses/400badbody'
        "403":
          $ref: '#/components/responses/403accesszoneoverride'
      x-codegen-request-body-name: ignored
  /api/access_zones/{id}/secure:
    post:
      tags:
      - Access Zones
      summary: Set an access zone to secure
      description: |
        Sends an override to an access zone to change its mode to 'secure - no PIN', meaning you
        will need a card, but not a PIN, to open its doors or perform overrides on terminals.

        Take this URL from the `commands` block of an access zone.  In there is a block called
        `secure`, containing a field `href`.  That is the URL of this method.

        The URL from `commands.securePin.href` (as opposed to without the "Pin") will send an override to an
        access zone to change its mode to 'secure - PIN', meaning you _will_ need a PIN on a terminal.

        If you do not give the override an end time in the body, it will remain in place until the
        next scheduled change.
      parameters:
      - name: id
        in: path
        description: The ID of the access zone.
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/requested_by"
      requestBody:
        $ref: '#/components/requestBodies/OverrideEndTime'
        required: false
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          $ref: '#/components/responses/400badbody'
        "403":
          $ref: '#/components/responses/403accesszoneoverride'
      x-codegen-request-body-name: ignored
  /api/access_zones/{id}/code_only:
    post:
      tags:
      - Access Zones
      summary: Set an access zone to code or card
      description: |
        Sends an override to an access zone to change its mode to 'Code or Card - No PIN',
        meaning you can use your user code or the zone's 'code-only code' to open its doors,
        depending on the reader's configuration.  You will not need a PIN on a terminal.

        Take this URL from the `commands` block of an access zone.  In there is a block called
        `codeOnly`, containing a field `href`.  That is the URL of this method.

        The URL from `commands.codeOnlyPin.href` (as opposed to without the "Pin") will send an override to an
        access zone to change its mode to 'Code or Card - PIN', meaning you _will_ need a PIN on a terminal.

        If you do not give the override an end time in the body it will remain in place until the
        next scheduled change.
      parameters:
      - name: id
        in: path
        description: The ID of the access zone.
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/requested_by"
      requestBody:
        $ref: '#/components/requestBodies/OverrideEndTime'
        required: false
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          $ref: '#/components/responses/400badbody'
        "403":
          $ref: '#/components/responses/403accesszoneoverride'
      x-codegen-request-body-name: body_names_not_rendered
  /api/access_zones/{id}/dual_auth:
    post:
      tags:
      - Access Zones
      summary: Set an access zone to dual auth
      description: |
        Sends an override to an access zone to change its mode to 'dual auth - no PIN', meaning you
        will need two badges to open its doors (either two different cardholders or two credentials
        for the same cardholder, depending on the access zone's configuration), and they will not
        need a PIN.  Terminal functions will require a card but no PIN.

        Take this URL from the `commands` block of an access zone.  In there is a block called
        `dualAuth`, containing a field `href`.  That is the URL of this method.

        The URL from `commands.dualAuthPin.href` (as opposed to without the "Pin") will send an override to an
        access zone to change its mode to 'dual auth - PIN', meaning you _will_ need a PIN on a terminal.

        If you do not give the override an end time in the body it will remain in place until the
        next scheduled change.
      parameters:
      - name: id
        in: path
        description: The ID of the access zone.
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/requested_by"
      requestBody:
        $ref: '#/components/requestBodies/OverrideEndTime'
        required: false
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          $ref: '#/components/responses/400badbody'
        "403":
          $ref: '#/components/responses/403accesszoneoverride'
      x-codegen-request-body-name: body_names_not_rendered
  /api/access_zones/{id}/forgive_anti_passback:
    post:
      tags:
      - Access Zones
      summary: Forgive antipassback on a zone
      description: |
        Sends an override to an access zone to forgive anti-passback for all cardholders in the zone.

      parameters:
      - name: id
        in: path
        description: The ID of the access zone.
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/requested_by"
      responses:
        "204":
          description: Success.
          content: {}
        "403":
          $ref: '#/components/responses/403accesszoneoverride'
  /api/access_zones/{id}/lock_down:
    post:
      tags:
      - Access Zones
      summary: Lock a zone down
      description: |
        Locks down an access zone.  In this mode, cardholders will need the 'Entry allowed during
        lockdown' privilege to enter the zone, in addition to normal access.

        Take this URL from the `commands` block of an access zone.  In there is a block called
        `lockDown`, containing a field `href`.  That is the URL of this method.

        It takes no parameters.  The lockdown will remain in place until cancelled, or the access
        zone receives an override to another mode.
      parameters:
      - name: id
        in: path
        description: The ID of the access zone.
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/requested_by"
      responses:
        "204":
          description: Success.
          content: {}
        "403":
          $ref: '#/components/responses/403accesszoneoverride'
  /api/access_zones/{id}/cancel_lock_down:
    post:
      tags:
      - Access Zones
      summary: Cancel a zone lockdown
      description: |
        Cancels a lockdown, returning it to its scheduled state.  It will not cancel any other kind
        of override.

        Take this URL from the `commands` block of an access zone.  In there is a block called
        `cancelLockDown`, containing a field `href`.  That is the URL of this method.
      parameters:
      - name: id
        in: path
        description: The ID of the access zone.
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/requested_by"
      responses:
        "204":
          description: Success.
          content: {}
        "403":
          $ref: '#/components/responses/403accesszoneoverride'
  /api/access_zones/{id}/set_zone_count:
    post:
      tags:
      - Access Zones
      summary: Set a zone count
      description: |
        Sets the count of cardholders inside a zone.
      parameters:
      - name: id
        in: path
        description: The ID of the access zone.
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/requested_by"
      requestBody:
        description: The new cardholder count for the zone.
        content:
          application/json:
            schema:
              required:
                - zoneCount
              type: object
              properties:
                zoneCount:
                  type: integer
                  description: |
                    Put this in the body of access zone override POSTs to set the count of cardholders in the
                    access zone.
                  example: 100
        required: true
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          $ref: '#/components/responses/400badbody'
        "403":
          $ref: '#/components/responses/403accesszoneoverride'
      x-codegen-request-body-name: body
  /api/access_zones/{id}/cancel:
    post:
      tags:
      - Access Zones
      summary: Cancel mode override
      description: |
        Cancels an override, returning the access zone to its scheduled state.

        Take this URL from the `commands` block of an access zone.  In there is a block called
        `cancel`, containing a field `href`.  That is the URL of this method.

        This command will achieve nothing if the alarm zone is not controlled by a
        schedule, because without a schedule the alarm zone does not have the concept of a
        'normal' state.

        It will not cancel a lockdown.  For that you need `cancel_lock_down`.
      parameters:
      - name: id
        in: path
        description: The ID of the access zone.
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/requested_by"
      responses:
        "204":
          description: Success.
          content: {}
        "403":
          $ref: '#/components/responses/403accesszoneoverride'
  /api/access_zones/{id}/updates:
    get:
      tags:
      - Access Zones
      summary: Monitor an access zone
      description: |
        See the [item status topic](#topic-Item-status) for how to use the updates APIs.

        Note that this API call is good for watching one item only; if you want to monitor several,
        you are better off with a [status subscription](events.html#status-subscriptions).

        Follow the 'updates' field in an access zone [summary](#definition-Access-Zone-summary) or
        [details](#definition-Access-Zone-detail) pages to get here rather than [building it
        yourself](#topic-Forward-compatibility--HATEOAS-).
      parameters:
      - name: id
        in: path
        description: The ID of the access zone.
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: |
          This instructs the server to return these fields in the update, instead of the default set.  Note that removing fields also
          saves you from updates to those fields.
        schema:
          type: string
          enum:
          - status
          - statusText
          - statusFlags
          - zoneCount
      responses:
        "200":
          description: |
            Success.  The [introduction](#tag-Access-Zones) describes the three status fields and
            the [access zone detail](#definition-Access-Zone-detail) describes `zoneCount`.
          content:
            application/json:
              schema:
                type: object
                example:
                  updates:
                    status: Secure.
                    statusText: Secure.
                    statusFlags:
                    - secure
                    zoneCount: 100
                  next:
                    href: https://localhost:8904/api/access_zones/3280/updates/9_1
        403: {$ref: '#/components/responses/403nolicence'}
        "404":
          $ref: '#/components/responses/404accesszone'

  /api/alarms:
    get:
      tags:
      - Alarms
      summary: Get current alarms
      description: |
        This returns the current list of unprocessed alarms.  The result will contain no more
        than 100 alarms; you should follow the `next` link, if it is present, to collect
        more.

        You can tell when you have loaded all the current alarms because there will not be
        a `next` link.  Instead, there will be an `updates` link which takes you to a different
        endpoint that long-polls for live updates to alarms.

        Unlike the corresponding method that retrieves events, this call does not take query
        parameters to filter its results.  You can limit the fields it returns, but it will always
        return every alarm that your operator can view.  If you wish to restrict it to alarms in
        certain divisions, give your operator permission to view alarms in only those divisions.

        The alarm summary only contains unprocessed alarms.  You can access
        a processed alarm by finding its corresponding event in the [event summary](#definition-Event-summary)
        and following its `alarm.href` link to the alarm details.

        Do not code this URL into your application.  Take it from `alarms.alarms.href` in the
        results of `GET /api`.
      parameters:
      - $ref: '#/components/parameters/alarmfields'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlarmSearch'
        "403":
          description: The site does not have a RESTEvents licence.

  /api/alarms/updates:
    get:
      tags:
      - Alarms
      summary: Get changes to alarms (or wait)
      description: |
        This is a long poll for live updates to alarms.  If alarms occurred or changed since the
        previous call, no matter how long ago that was, it will return them immediately.  If there
        are no updates pending, it will wait until one arrives.  If none arrive before a timeout
        passes (about 30 seconds) it will return an empty `updates` array and a fresh `next` link.

        Whether or not the response contained updates the client should follow the `next` link to
        wait for the next updates.  If your server receives a lot of alarm updates, wait some time
        between calls to reduce its load.  You will not miss any updates:  each response contains
        everything that happened since the previous call.

        Do not wait if you receive 100 updates or more.  100 is the maximum number of updates
        current versions of CC will return in one batch, so if that happens you have fallen behind:
        there are more updates waiting and you can catch up by asking for them immediately.

        Command Centre does not tell you which alarms were added, removed, or modified. It is up to
        you to match the incoming alarms against your own internal alarm list and determine the
        differences.

        Do not code this URL into your application.  Take it from `alarms.updates.href` in the
        results of `GET /api`, or from `updates` in the results of `GET /api/alarms`, or from `next`
        in the results of this call.  Do not attempt to interpret or set the `id` query parameter in
        the URL, as it tracks your progress through the alarm history.

        Assuming you got the URL for this call from the response from another call, and your
        operator therefore has the privileges required to view alarms, this should always complete
        successfully.
      parameters:
      - $ref: '#/components/parameters/alarmfields'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlarmUpdates'
        "403":
          description: The site does not have a RESTEvents licence.

  /api/alarms/{id}:
    get:
      tags:
      - Alarms
      summary: Get details of an alarm
      description: Full details for an alarm. Follow the `href` in the alarm summary
        to get here.
      parameters:
      - $ref: '#/components/parameters/alarmid'
      - $ref: '#/components/parameters/alarmfields'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlarmDetail'
        "404": {$ref: "#/components/responses/404alarm"}

  /api/alarms/{id}/view:
    post:
      tags:
      - Alarms
      summary: Mark an alarm as viewed
      description: |
        Mark the alarm as viewed.  Follow the `view` link in the alarm summary to get here.

        You can do this for an alarm in any state, even processed, provided you have its URL and
        sufficient privilege.
      parameters:
      - $ref: '#/components/parameters/alarmid'
      requestBody:
        description: Optional comment.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlarmUpdateRequest'
        required: false

      responses:
        "200":
          description: Success
        "404": {$ref: "#/components/responses/404alarm"}

      x-codegen-request-body-name: body

  /api/alarms/{id}/comment:
    post:
      tags:
      - Alarms
      summary: Add a comment to an alarm
      description: |
        Follow the `comment` link in the alarm summary to get here.

        You can comment on an alarm in any state, even processed, provided you have its URL and
        sufficient privilege.
      parameters:
      - $ref: '#/components/parameters/alarmid'
      requestBody:
        description: The comment string.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlarmUpdateRequest'
        required: true
      responses:
        "200":
          description: Success
        "404": {$ref: "#/components/responses/404alarm"}

      x-codegen-request-body-name: body
  /api/alarms/{id}/acknowledge:
    post:
      tags:
      - Alarms
      summary: Mark an alarm as acknowledged
      description: |
        Follow the `acknowledgeWithComment` or the `acknowledge` link in the alarm summary to get
        here.

        You can acknowledge an alarm that is in any state provided you have its URL and sufficient
        privilege.  Doing so will add an entry to the alarm's history, but will have no other effect
        if it is already acknowledged or processed.
      parameters:
      - $ref: '#/components/parameters/alarmid'
      requestBody:
        description: Optional comment.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlarmUpdateRequest'
        required: false
      responses:
        "200":
          description: Success
        "404": {$ref: "#/components/responses/404alarm"}

      x-codegen-request-body-name: body
  /api/alarms/{id}/process:
    post:
      tags:
      - Alarms
      summary: Mark an alarm as processed
      description: |
        Follow the `processWithComment`, `forceProcess`, or `process` link in the alarm to get here.

        You can process an alarm that is in any state provided you have its URL and sufficient
        privilege.  Doing so will add an entry to the alarm's history, but will have no other effect
        if it is already acknowledged or processed.  If the alarm is active -- waiting for another
        event to restore it (such as a 'door open too long' waiting for the door to close) -- it
        will perform a force process.
      parameters:
      - $ref: '#/components/parameters/alarmid'
      requestBody:
        description: Optional comment.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlarmUpdateRequest'
        required: false
      responses:
        "200":
          description: Success
        "404": {$ref: "#/components/responses/404alarm"}

      x-codegen-request-body-name: body

          

  /api/alarm_zones:
    get:
      tags:
      - Alarm Zones
      summary: Search alarm zones
      description: |
        This returns a summary of the alarm zones matching your search criteria.

        The result will contain no more than 100 or 1000 alarm zones (depending on your version), or
        as many as you asked for more in your request; you should follow the `next` link, if it is
        present, to collect the next batch.

        If your result set is empty it means your operator does not have the privilege to view any
        alarm zones, such as 'View Site', 'Edit Site', or 'Override'.  Perhaps there are no alarm
        zones in the divisions in which your operator has privileges, or your operator has no
        privileges at all.

        When you have loaded them all there will be no `next` link.

        Do not code this URL into your application.  Take it from the 'href' field in the
        `features.alarmZones.alarmZones` section of `/api`.
      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - name: "fields"
        <<: [*FIELDSDESC_SUM, *ALZFIELDS]
      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"
      responses:
        "200":
          description: |
            Success.  See the note in the description about privileges if your result set is empty.
          content:
            application/json:
              schema:
                description: "An array of alarm zone summaries, and a `next` link for more."
                type: object
                properties:
                  results:
                    type: array
                    description: An array of Alarm Zone summaries.
                    items:
                      $ref: '#/components/schemas/AlarmZoneSummary'
                  next:
                    type: object
                    properties:
                      href:
                        type: string
                        format: url
                    description: The link to the next page.  Absent if you have retrieved them
                      all.
                    example:
                      href: https://localhost:8904/api/alarm_zones?skip=1000
        403: {$ref: '#/components/responses/403nolicence'}

  /api/alarm_zones/{id}:
    get:
      tags:
      - Alarm Zones
      summary: Get details of an alarm zone
      description: |
        This returns the detail of one alarm zone.

        Follow the 'href' field in an [alarm zone summary](#definition-Alarm-Zone-summary) to get
        here rather than [building it yourself](#topic-Forward-compatibility--HATEOAS-).
      parameters:
      - name: id
        in: path
        description: The ID of the alarm zone.
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: |
          This instructs the server to return only these fields in the details page instead of the default set.  The values you can list
          are the same as the field names you would see in the results.  Use it to cut back on the size
          of the response.  Separate values with commas.

          Treat the string matches as case-sensitive.

          In v8.00 you will receive the href and internal ID even if you did not ask for them.  In 8.10
          and later you will only get what you asked for.  If you are going to send the `fields`
          parameter and need the href or ID, be explicit.
        schema:
          type: string
          enum:
          - href
          - id
          - name
          - shortName
          - description
          - division
          - commands
          - connectedController
          - statusFlags
          - status
          - notes
          - updates
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlarmZoneDetail'
        403: {$ref: '#/components/responses/403nolicence'}
        "404":
          $ref: '#/components/responses/404alarmzone'

  /api/alarm_zones/{id}/arm:
    post:
      tags:
      - Alarm Zones
      summary: Arm an alarm zone
      description: |
        Sends an override to an alarm zone to arm it.

        If you send an end time in the body, and the alarm zone has a schedule to consult
        to find the state that it should return to, the override will only stay in effect
        until then.

        If you do not, the override will remain in place until the next scheduled or
        manual change.
      parameters:
      - name: id
        in: path
        description: The ID of the alarm zone.
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/requested_by"
      requestBody:
        $ref: '#/components/requestBodies/OverrideEndTime'
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          $ref: '#/components/responses/400badbody'
        "403":
          $ref: '#/components/responses/403alarmzoneoverride'
      x-codegen-request-body-name: ignored

  /api/alarm_zones/{id}/disarm:
    post:
      tags:
      - Alarm Zones
      summary: Disarm an alarm zone
      description: |
        Sends an override to an alarm zone to disarm it.

        If you send an end time in the body, and the alarm zone has a schedule to consult
        to find the state that it should return to, the override will only stay in effect
        until then.

        If you do not, the override will remain in place until the next scheduled or
        manual change.
      parameters:
      - name: id
        in: path
        description: The ID of the alarm zone.
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/requested_by"
      requestBody:
        $ref: '#/components/requestBodies/OverrideEndTime'
        required: false
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          $ref: '#/components/responses/400badbody'
        "403":
          $ref: '#/components/responses/403alarmzoneoverride'
      x-codegen-request-body-name: ignored

  /api/alarm_zones/{id}/user1:
    post:
      tags:
      - Alarm Zones
      summary: Change an alarm zone to user1
      description: |
        Sends an override to an alarm zone to set its state to 'user1', one of the custom states.

        If you send an end time in the body, and the alarm zone has a schedule to consult
        to find the state that it should return to, the override will only stay in effect
        until then.

        If you do not, the override will remain in place until the next scheduled or
        manual change.
      parameters:
      - name: id
        in: path
        description: The ID of the alarm zone.
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/requested_by"
      requestBody:
        $ref: '#/components/requestBodies/OverrideEndTime'
        required: false
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          $ref: '#/components/responses/400badbody'
        "403":
          $ref: '#/components/responses/403alarmzoneoverride'
      x-codegen-request-body-name: ignored

  /api/alarm_zones/{id}/user2:
    post:
      tags:
      - Alarm Zones
      summary: Change an alarm zone to user2
      description: |
        Sends an override to an alarm zone to set its state to 'user2', the other of of the custom
        states.

        If you send an end time in the body, and the alarm zone has a schedule to consult
        to find the state that it should return to, the override will only stay in effect
        until then.

        If you do not, the override will remain in place until the next scheduled or
        manual change.
      parameters:
      - name: id
        in: path
        description: The ID of the alarm zone.
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/requested_by"
      requestBody:
        $ref: '#/components/requestBodies/OverrideEndTime'
        required: false
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          $ref: '#/components/responses/400badbody'
        "403":
          $ref: '#/components/responses/403alarmzoneoverride'
      x-codegen-request-body-name: ignored

  /api/alarm_zones/{id}/armHighVoltage:
    post:
      tags:
      - Alarm Zones
      summary: Arm an alarm zone (high voltage)
      description: |
        Sends an override to an alarm zone to set its state to 'armed - high voltage'.

        If you send an end time in the body, and the alarm zone has a schedule to consult
        to find the state that it should return to, the override will only stay in effect
        until then.

        If you do not, the override will remain in place until the next scheduled or
        manual change.
      parameters:
      - name: id
        in: path
        description: The ID of the alarm zone.
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/requested_by"
      requestBody:
        $ref: '#/components/requestBodies/OverrideEndTime'
        required: false
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          $ref: '#/components/responses/400badbody'
        "403":
          $ref: '#/components/responses/403alarmzoneoverride'
      x-codegen-request-body-name: ignored

  /api/alarm_zones/{id}/armLowFeel:
    post:
      tags:
      - Alarm Zones
      summary: Arm an alarm zone (low feel)
      description: |
        Sends an override to an alarm zone to set its state to 'armed - low feel'.

        If you send an end time in the body, and the alarm zone has a schedule to consult
        to find the state that it should return to, the override will only stay in effect
        until then.

        If you do not, the override will remain in place until the next scheduled or
        manual change.
      parameters:
      - name: id
        in: path
        description: The ID of the alarm zone.
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/requested_by"
      requestBody:
        $ref: '#/components/requestBodies/OverrideEndTime'
        required: false
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          $ref: '#/components/responses/400badbody'
        "403":
          $ref: '#/components/responses/403alarmzoneoverride'
      x-codegen-request-body-name: ignored

  /api/alarm_zones/{id}/cancel:
    post:
      tags:
      - Alarm Zones
      summary: Cancel mode override
      description: |
        Cancels an override, returning the alarm zone to its scheduled state.
      parameters:
      - name: id
        in: path
        description: The ID of the alarm zone.
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/requested_by"
      responses:
        "204":
          description: Success.
          content: {}
        "403":
          $ref: '#/components/responses/403alarmzoneoverride'

  /api/alarm_zones/{id}/updates:
    get:
      tags:
      - Alarm Zones
      summary: Monitor an alarm zone
      description: |
        See the [item status topic](#topic-Item-status) for how to use the updates APIs.

        Note that this API call is good for watching one item only; if you want to monitor several,
        you are better off with a [status subscription](events.html#status-subscriptions).

        Follow the 'updates' field in an alarm zone [summary](#definition-Alarm-Zone-summary) or
        [details](#definition-Alarm-Zone-detail) pages to get here.
      parameters:
      - name: id
        in: path
        description: The ID of the alarm zone.
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: |
          This instructs the server to return these fields in the update, instead of the default set.  Note that removing fields also
          saves you from updates to those fields.
        schema:
          type: string
          enum:
          - status
          - statusText
          - statusFlags
      responses:
        "200":
          description: |
            Success.  The [introduction](#tag-Alarm-Zones) describes the three status fields.
          content:
            application/json:
              schema:
                type: object
                example:
                  updates:
                    status: Disarmed.
                    statusText: Disarmed.
                    statusFlags:
                    - disarmed
                  next:
                    href: https://localhost:8904/api/alarm_zones/328/updates/9_1
        403: {$ref: '#/components/responses/403nolicence'}
        "404":
          $ref: '#/components/responses/404alarmzone'

  /api/cardholders:

    get:
      tags:
      - Cardholders
      summary: Search cardholders
      description: |
        This call returns cardholders matching your search criteria.

        The result will contain no more than 100 or 1000 cardholders depending on your version; you
        should follow the `next` link, if it is present, to collect the next batch.

        When you have loaded all the cardholders there will be no `next` link.

        If your result set is empty it means your operator does not have the privilege to view any
        cardholders.  Perhaps there are none in the divisions in which your operator has privileges,
        or your operator has no privileges at all.

        Adding or modifying cardholders between calls to this API will not affect the pagination of
        its results if you sort by ID.

        [Do not code this URL](#topic-Forward-compatibility--HATEOAS-) into your application.  Take it from the 'href' field in the
        `features.cardholders.cardholders` section of `/api`.
      parameters:
      - $ref: '#/components/parameters/sort'
      - name: top
        in: query
        description: |
          Sets maximum number of cardholders to return per page.

          Older versions of Command Centre returned 100.  That is acceptable for a GUI application
          that will only display the first page of cardholders, but for integrations that intend to
          proceed through the entire database it causes a lot of chatter.

          Version 8.70 will return 1000 items per request by default.  1000 is about where a graph
          of performance versus page size begins to level out.  You may see some improvement by
          taking it even higher.
        schema:
          minimum: 1
          type: integer
      - name: name
        in: query
        description: |
          Limits the results to cardholders with a name that matches this string.  By default, it is
          a substring search against the first name or the last name or the concatenation
          'lastName, firstName'; surround the parameter with double quotes `"..."` for an
          exact search.

          Without quotes, a percent sign `%` inside your search string will anchor the search at
          both ends (so it will no longer be a substring search) and the `%` will match any
          substring.  For example, `boothroyd,%` will only match cardholders whose last name is
          Boothroyd.

          The search is always case-insensitive.  Results are undefined if you do a substring search
          for the empty string (`name=`).  You will receive no cardholders if you search for those
          with no name (`name=""`), as all items must have a name.

          Because a plus sign `+` represents a space in a query string, replace each plus sign in
          your search string with `%2d`.

          The search parameters form a logical conjunction.  They are ANDed
          together.  Therefore if you search for `name=Mary&pdf_1315=nanny` you will only get back
          cardholders with 'Mary' in their name and 'nanny' in the PDF with ID 1315.
        schema:
          type: string
      - name: "pdf_{id}"
        in: query
        description: |
          Limits the results to cardholders with a value for the Personal Data Field with this ID
          that matches the parameter.

          It is a substring match by default; surround it with double quotes `"..."` for an exact
          match.  Tests showed an exact match to be 100x quicker than a substring search on a large
          database.

          Without quotes, `_` will match any single character and `%` will match any substring.
          Having either in your term will anchor the string at both ends so it will not be a
          substring search.  A lone `%` will return any cardholder who has this PDF set to a
          non-null value.

          Searching for a blank value using `pdf_xxx=""` or `pdf_xxx=` currently matches no
          cardholders, which is not useful.  Do not rely on that behaviour since we will change it
          in a future version of Command Centre to return cardholders with no value for that PDF.

          Because a plus sign `+` represents a space in a query string, turn plus signs in your
          string into `%2d`.

          The search is always case-insensitive.

          Search parameters form a logical conjunction.  They are ANDed
          together.  Therefore the search `pdf_1315=nanny&pdf_1315=paratrooper` will only return
          cardholders whose PDF 1315 contains the strings 'nanny' and 'paratrooper'.
        schema:
          type: string
      - $ref: '#/components/parameters/division'
      - $ref: '#/components/parameters/directDivision'
      - $ref: '#/components/parameters/description'
      - name: accessZone
        in: query
        description: |
          Limits the results to cardholders who are in one of the access zones with the given IDs.
          Do not put quotes around the IDs, and separate them with commas.

          To get everyone who is in _any_ access zone use `accessZone=*`.  It will return all
          cardholders who have badged at least once and who are not currently 'outside the system'.
          A cardholder is 'outside' if they badge through a door that has no access zone configured for that direction of travel,
          or if an operator manually moves them outside.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: fields
        in: query
        description: |
          Specifies the fields you want in the search results.  The values you can use here are the
          same as you can for the [details page](#operation--api-cardholders--id--get).
          Using it you can return everything on the search page that you would find on the details
          page with the exception of the `edit` and `updates` links.  Separate values with commas.

          Use the special value `defaults` to return the fields you would have received had you not
          given the parameter at all.  Obviously only do that if you have more to add.

          Use the special value `personalDataFields` to return the 'personalDataDefinitions' block
          as well as the PDF values at the root level of the cardholder object.

          Use the special value `pdf_XXX` (where `XXX` is the ID of a PDF definition) to include
          just that PDF.  If you do not have the PDF's ID, and don't mind the performance hit of
          retrieving all the PDFs, using `personalDataDefinitions` may be simpler.

          Treat the string matches as case sensitive:  use 'lastName' rather than 'lastname'.

          In v8.00 you will receive the href and internal ID even if you do not ask for them.  In
          8.10 you will not.  If you are going to send the fields parameter and need the href or ID,
          include them.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
          default: "[\"defaults\"]"
      - $ref: '#/components/parameters/pos'
      - $ref: '#/components/parameters/skip'
      responses:
        "200":
          description: |
            Success.  See the note in the description about privileges if your result set is empty.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardholderSearch'
        "400":
          description: The server could not make sense of your search terms.
          content: {}
        "403":
          description: The site does not have the RESTCardholders licence.
          content: {}

    post:
      tags:
      - Cardholders
      summary: Create a cardholder
      description: |
        This creates a new cardholder, including his or her cards, group memberships, personal data,
        competencies, and roles.

        [Do not code this URL](#topic-Forward-compatibility--HATEOAS-) into your application.  Take
        it from the 'href' field in the `features.cardholders.cardholders` section of `/api`.

        The POST expects a document in the same format as the [the cardholder
        detail](#definition-Cardholder-detail).  Many fields are optional, of course, and
        some (like the last successful access time) do not make sense when creating a
        cardholder.  See the [cardholder POST
        example](#definition-Cardholder-POST-example) for details.

        You will achieve better performance if you combine all you want to achieve into one POST,
        rather than creating the cardholder bare with a POST then adding cards, groups, PDFs, etc.,
        with PATCHes later.

        When successful it returns a location header containing the address of the new cardholder.

        Note that you can only create one cardholder per POST.
      requestBody:
        description: |
          This can be a large object as shown, or a tiny one, because the only fields you must
          have in the POST are the division and either the first or last name.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardholderPOST'
            examples:
              Sample POST:
                $ref: '#/components/examples/CardholderPOSTExample'
              Mobile credential:
                $ref: '#/components/examples/CardholderCardMobilePOSTExample'
              Physical card:
                $ref: '#/components/examples/CardholderPOSTCardPhysicalExample'
              PIV card:
                $ref: '#/components/examples/PIVCardCreateExample'
        required: true
      responses:
        "201":
          description: |
            Success.

            Para 2.

            Para 3.
          headers:
            location:
              description: The href of the new cardholder.
              schema:
                type: string
                format: url
          content: {}
        "400":
          description: |
            The body of the POST did not describe a valid cardholder.

            If you see 'Data has not been entered for this Personal Data Field' in the
            response body, you have attempted to create a cardholder in an access group
            that has a required Personal Data Field, but not supplied a value for that
            PDF.

            If you see 'Invalid cardholder', the server could not parse the JSON in the body of your
            POST.  Remember to quote all strings, especially those than contain @ symbols.
          content: {}
        "403":
          description: |
            The operator does not have a privilege that allows creating cardholders, or you
            attempted to set a field for which the operator has no privilege (probably 'notes'), or
            the server has reached its licensed limit of cardholders.
          content: {}
      x-codegen-request-body-name: not rendered

  /api/cardholders/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
      - Cardholders
      summary: Get details of a cardholder
      description: |
        This retrieves one cardholder from Command Centre.  It does not return all the fields
        available (there are too many) so, much like the cardholder search, it accepts a `fields`
        parameter where you specify the fields you need.

        [Do not use](#topic-Forward-compatibility--HATEOAS-) a
        cardholder's ID to build the URL yourself:  follow the href in the [cardholder
        search](#definition-Cardholders) to get here.

      parameters:
      - name: fields
        in: query
        description: |
          Specifies the fields you want in the results.  The values you can list are the same as the
          field names in the [detail results](#definition-Cardholder-detail).  Use it to return
          fewer fields than normal.  Separate values with commas.

          Treat the string matches as case sensitive:  use 'lastName' rather than 'lastname'.

          Added to the cardholders controller in 8.00.  In that version you will receive the href,
          internal ID, and updates link even if you do not ask for them.  In 8.10 you will not.  If
          you are going to send the fields parameter and need those fields, include them.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
          default: "[\"defaults\"]"
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardholderDetail'
        "404":
          description: |
            That is not the URL of a cardholder, or the operator does not have the privilege to view
            that cardholder.
          content: {}

    patch: 
      tags: [ Cardholders ]
      summary: Update a cardholder
      description: |
        This is the call you use to update a cardholder, including:
          - changing general properties such as names, division, and description,

          - changing PDF values, and

          - adding or updating cards, access group membership, roles and relationships, lockers, and
            competencies.

        When changing a cardholder's division at the same time as PDFs or competencies, the extra
        privilege checks required for PDFs and competency changes use the origin division, not the
        destination division.  So if you are moving a cardholder from a division in which your
        operator has no access to PDFs and competencies into one in which it does, first PATCH the
        cardholder into the new division then PATCH it with the other changes.

        You can find this URL in the href in the [cardholder search](#definition-Cardholders) or
        any of the other calls that return cardholder hrefs.  [Do not build it
        yourself](#topic-Forward-compatibility--HATEOAS-).
        
        ---
          
        Note that the REST API does not implement the full suite of Command Centre
        privileges.  In particular, the following privileges do not have the same effect
        on an operator's ability to modify a cardholder that they do in the administrative
        clients:

          - Disable Card.  This privilege has no effect on the 7.90 REST API.  You need
            Edit Cardholders to disable cards.

          - Modify Access Control.  This privilege does not work on its own.  You need
            Edit Cardholders as well as Modify Access Control to change group memberships.

          - Add or Edit Cardholder Notes.  You also need Edit Cardholders to change notes
            on an existing cardholder via the API.  In the administrative clients, you do
            not.

          - Manage Locker Assignments.  You also need Edit Cardholders to assign and un-assign
            lockers on a cardholder via the API.  In the administrative clients, you do not.

        The 'De-authorise Cardholder' privilege _is_ implemented.  It allows an operator to set a
        cardholder's 'authorised' field to false (denying all their future access requests) without
        the Edit Cardholders privilege.

        In short, if your application intends to do more to cardholders than de-authorise them, you
        will need an operator with Edit Cardholders.

        ---
          
        The PATCH is best illustrated by example.

      requestBody:
        description: |
          As well as cardholder attributes such as 'authorised', the PATCH body contains
          instructions for creating, updating, and deleting personal data, group
          memberships, etc.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardholderPATCHExample'
            examples:
              Physical card:
                $ref: '#/components/examples/CardholderPATCHCardPhysicalExample'
        required: true

      responses:
        200:
          description: |
            Success.  Future versions will add feedback from the server about your PATCH.
        204: 
          description: "Success, with no feedback."
        400:
          description: |
            The parameters are invalid, or other errors prevented the update.

            If you receive 'No fields have been defined for update', check that your submission body
            is valid JSON.
        403:
          description: |
            The site does not have a RESTCardholders licence, or you attempted to set a PDF for
            which you have no privilege.
        409:
          <<: *409CH
        4xx:
          description: |
            The operator does not have the privilege to modify that cardholder, or you attempted to
            set a field for which you have no privilege (such as 'notes' or 'operatorPassword', both
            of which require special privileges).  In versions prior to 8.80 your operator needed
            'Edit cardholders' to de-authorise a cardholder.  In 8.80 and later, 'De-authorise
            cardholder' on its own is enough.

          
    delete:
      tags:
      - Cardholders
      summary: Remove a cardholder
      description: |
        This call removes a cardholder from Command Centre.  You can find the URL in the href in the
        [cardholder search](#definition-Cardholders) or any of the other calls that return
        cardholder hrefs.  [Do not build it yourself](#topic-Forward-compatibility--HATEOAS-).

      responses:
        "200":
          description: Success.
          content: {}
        "204":
          description: Success.
          content: {}
        "400":
          description: |
            Deleting the cardholder failed.  This happens when the cardholder is a critical part of
            another construct (a personalised notification, for example).
          content: {}
        "403":
          description: |
            The operator does not have permissions to delete that cardholder
            or the server is not licensed for cardholder operations.

            In versions up to and including 9.20 403 also means that there is no such cardholder.
          content: {}
        "404":
          description: |
            New in 9.30.  There is no such cardholder.
          content: {}
        "409":
          description: |
            The cardholder is locked for editing by another operator.  The body of the response will
            tell you which operator is holding the lock.
          content: {}

  /api/cardholders/{id}/access_groups/{secondary_id}:
    parameters:
    - $ref: "#/components/parameters/id"
    - $ref: "#/components/parameters/secondary_id"

    delete:
      tags:
        - Cardholders
      summary: Remove an access group membership

      description: |
        This call removes a cardholder's membership in an access group.  Note that a cardholder may
        have more than one membership in a group.

        You can find this URL in the [cardholder object](#definition-Cardholder-detail).  [Do not
        build it yourself](#topic-Forward-compatibility--HATEOAS-).

      responses: 
        204: 
          description: "Success."
        403:
          description: |
            The operator does not have a privilege that allows editing that cardholder.
        404: { description: "That is not the href of an access group membership." }
        409:
          <<: *409CH
        4xx:
          description: |
            The operator does not have a privilege that allows editing that cardholder's access
            group memberships (such as 'Modify access control').

  /api/cardholders/{id}/cards/{secondary_id}:
    parameters:
    - $ref: "#/components/parameters/id"
    - $ref: "#/components/parameters/secondary_id"

    delete:
      tags:
        - Cardholders

      summary: Remove a card from a cardholder
      description: |
        This call removes a card from a cardholder.

        You can find this URL in the [cardholder object](#definition-Cardholder-detail).  [Do not
        build it yourself](#topic-Forward-compatibility--HATEOAS-).

      responses: 
        200: { description: "Success." }
        204: { description: "Success." }
        403: { description: "The operator does not have a privilege that allows editing that cardholder." }
        404: { description: "That card is not on that cardholder." }
        409:
          <<: *409CH
      

  /api/cardholders/{id}/competencies/{secondary_id}:
    parameters:
    - $ref: "#/components/parameters/id"
    - $ref: "#/components/parameters/secondary_id"
    delete:
      tags:
        - Cardholders

      summary: Remove a competency from a cardholder
      description: |
        This call removes a competency from a cardholder.

        You can find this URL in the [cardholder object](#definition-Cardholder-detail).  [Do not
        build it yourself](#topic-Forward-compatibility--HATEOAS-).

      responses: 
        200: { description: "Success." }
        204: { description: "Success." }
        403: { description: "The operator does not have a privilege that allows editing that cardholder." }
        404: { description: "That is not the href of a cardholder's competency." }

  /api/cardholders/{id}/competencies/{secondary_id}/credit:
    parameters:
    - $ref: "#/components/parameters/id"
    - $ref: "#/components/parameters/secondary_id"
    post:
      tags:
        - Cardholders

      summary: Change competency credit
      description: |
        This call increases or decreases a cardholder's competency credit.  It is an indivisible
        operation.

        It is reserved for the Pre-pay Car Parking feature.

      parameters:
        - name: "add"
          in: query
          required: true
          schema: {type: integer}
          description: "The amount to adjust the competency credit.  This can be positive or negative."
      responses: 
        200: { description: "Success.  Future versions will return feedback from the server." }
        204: { description: "Success." }
        403: { description: "The operator does not have a privilege that allows editing that cardholder." }
        404: { description: "The parameters are invalid." }

  /api/cardholders/{id}/elevator_groups/{secondary_id}:
    parameters:
    - $ref: "#/components/parameters/id"
    - $ref: "#/components/parameters/secondary_id"
    delete:
      tags:
        - Cardholders

      summary: Remove an elevator group from a cardholder
      description: |
        This call removes a default floor assignment and passenger types from a cardholder for one
        elevator group.

        You will find this URL in the `elevatorGroups` block of a [cardholder
        object](#definition-Cardholder-detail).  [Do not build it
        yourself](#topic-Forward-compatibility--HATEOAS-).

      responses:
        204:
          description:  Success.
        403:
          description: |
            Your operator does not have the necessary privilege to change this cardholder's elevator
            groups.
        404:
          description: |
            That is not the URL of a cardholder's elevator group.  You can take an href
            from the 'elevatorGroups' block of a cardholder detail.  The message in the results
            document will tell you more about the problem.

  /api/cardholders/{id}/lockers/{secondary_id}:
    parameters:
    - $ref: "#/components/parameters/id"
    - $ref: "#/components/parameters/secondary_id"
    delete:
      tags:
        - Cardholders

      summary: Remove a locker assignment
      description: |
        This call removes a locker assignment from a cardholder.  If the cardholder has no other
        assignments for this locker after this operation he or she will not be able to open it.

        You will find this URL in the `lockers` block of a [cardholder
        object](#definition-Cardholder-detail).  In the interest of forward compability, [do not
        build it yourself](#topic-Forward-compatibility--HATEOAS-).

      responses:
        204:
          description:  Success.
        404:
          description: |
            That is not the URL of a cardholder's locker assignment.  You can take an href from the
            'lockers' block of a cardholder detail, or the 'assignments' block of a locker or locker
            bank detail.  The message in the results document will tell you more about the problem.
        4xx: { description: "You do not have privileges for the operation." }

  /api/cardholders/{id}/operator_groups/{secondary_id}:
    parameters:
    - $ref: "#/components/parameters/id"
    - $ref: "#/components/parameters/secondary_id"
    delete:
      tags:
        - Cardholders
      summary: Remove an operator group membership

      description: |
        This call removes a cardholder's membership in an operator group.  Operator group
        memberships do not have start and end dates, so a cardholder can only have one membership in
        a given operator group.

        You can find this URL in the [cardholder object](#definition-Cardholder-detail).  In the
        interest of forward compability, [do not build it
        yourself](#topic-Forward-compatibility--HATEOAS-).

      responses: 
        204: 
          description: "Success."
        403:
          description: |
            The operator does not have a privilege that allows editing that cardholder's operator
            group memberships ('Modify operator group membership').
        404: { description: "That is not the href of an operator group membership." }
        409:
          <<: *409CH

  /api/cardholders/{id}/roles/{secondary_id}:
    parameters:
    - $ref: "#/components/parameters/id"
    - $ref: "#/components/parameters/secondary_id"
    delete:
      tags:
        - Cardholders

      summary: Remove a relationship
      description: |
        This call severs a relationship between two cardholders.

        You can find the URL in the `relationships` block in the [cardholder
        object](#definition-Cardholder-detail) of the cardholder who has the relationship, not the
        cardholder who holds the role.  For example if you have a 'supervisor' role you would find
        the URL to delete by looking up the supervised cardholder, not the supervisor.

        In the interest of forward compability, [do not build the URL
        yourself](#topic-Forward-compatibility--HATEOAS-).

      responses: 
        204: 
          description: "Success."
        403: { description: "The operator does not have a privilege that allows editing that cardholder." }
        404: { description: "That is not the URL of a relationship.  Perhaps it is deleted already." }

  /api/cardholders/{id}/update_location:
    parameters:
    - $ref: "#/components/parameters/id"
    post:
      tags:
        - Cardholders

      summary: Change a cardholder's location
      description: |
        This call updates a cardholder's location (moves them) to a target access zone. Added in 8.20.

        [Do not code this URL](#topic-Forward-compatibility--HATEOAS-) into your application.  Take
        it from the 'updateLocation.href' field in a [cardholder
        response](#definition-Cardholder-detail).

        The POST expects a document which contains an href to the target access zone.  The
        recommended way of getting access zone hrefs is through an [access zones
        call](rest.html#operation--api-access_zones-update_cardholder_location-get) added in 8.20
        that returns you the access zones to which you are allowed to move cardholders, according to
        your operator privileges.

        You can also get access zone hrefs from the [items
        controller](events.html#operation--api-items-get).

        Note that to change a cardholder's location your REST operator will need the "Manage
        Cardholder Location" privilege in the division of the target access zone and "View
        Cardholder" on the cardholder itself.

        It is not possible to put a cardholder into "nowhere", also known as "outside the system".
        The only place you can move them is a new access zone.

      requestBody:
        description: |
          The body of the request must contain the href of the target access zone.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardholderUpdateLocationPOSTExample'
        required: true

      responses: 
        200: { description: "Success.  Future versions will return feedback from the server." }
        204: 
          description: "Success."
        400:
          description: |
            The cardholder ID or access zone href is invalid.
        403:
          description: |
            The operator does not have a privilege ('Manage Cardholder Location') that allows moving
            this cardholder to the target zone.

  /api/cardholders/{id}/edit:
    parameters:
    - $ref: "#/components/parameters/id"
    get:
      tags:
        - Cardholders
      summary:  Find out which fields you can edit

      description: |
        This tells you which fields your REST operator can edit based on its privileges.

        Gallagher uses this call for rapidly-evolving internal applications.  As such, its results
        are tuned to those applications and are subject to change.  Rather than relying on this
        call, we suggest that you simply give your REST operator the privileges it needs to access
        to everything it needs.

        Note that this method returns 400 if there are two
        PDFs in the system with the same name.  CC insists on unique names for items when you create
        them but you can end up with duplicates when you form a multiserver cluster out of
        standalone installations.  You should move on that, because having two PDFs with the same
        name will bewilder your operational staff.

      responses:
        200:
          description:  Success.
        4xx: { description: "The parameter is invalid or you do not have privileges for the operation." }

######################################################################
  

  /api/cardholders/changes:
    get:
      tags:
        - Cardholder changes
      summary:  Get changes
      description: |
        This returns cardholder changes matching your search criteria and a link for the next batch.

        The first time you call this it will return a link back to this call with a parameter
        marking the head of the change list.  ***There will not be any changes in the result set for
        your first call***.  When you later GET the link the server sent you, it will return the
        changes that occurred since, if there were any, and a new link.

        There will be no more than 1000 changes, or as many as you asked for using the `top` query
        parameter.

        When you are up to date with all the cardholder changes, the `results` array will be empty.
        When it comes time to check again, don't just re-use the same URL:  get a new one from the
        `next` block.  It can change even when there are no results.

        This is a polled interface:  it will return immediately, whether or not there are results.
        Therefore you should wait for a time between calls if the `results` array was empty.

        You can monitor changes to card data using this call, including serial numbers (MIFARE
        UIDs).  However you cannot monitor changes in the `lastSuccessfulAccessTime` or
        `lastSuccessfulAccessZone` fields because they are not attributes of a cardholder object:
        they are derivatives of his or her activity.  If you want to monitor a person's movements we
        advise subscribing to events.

        This is a polled interface:  it will return immediately, whether or not there are results.
        Therefore you should wait for a time between calls if the `results` array was empty.

        [Do not code this URL](#topic-Forward-compatibility--HATEOAS-) into your application.  Take
        it from the href field in the `features.cardholders.changes` section of `/api`.

        ### Efficiency tips when collecting cardholder changes

        - Filter for the kinds of changes you are after using the `filter` parameter.  If you are
          only interested in people's access group memberships, for example, add
          `filter=accessGroups` to your GET, and you will not be troubled with all the other kinds
          of changes that cardholders go through.

        - The default set of fields is large and expensive to compute.  Ease the load on the server,
          the network, and your client by asking for a smaller
          response.  For example if you are only interested in the current state of a cardholder's
          group memberships and do not care who made the change, or when, or what state the
          cardholder was in before use `fields=item,cardholder.accessGroups`.  You need `item` so
          you can tell which cardholder changed.  If you store your own identifier in a PDF you
          could drop `item` and add `cardholder.pdf_XXX`, where 'XXX' is the ID of your PDF.

        - Sleep for as long as you can between calls.

        - If you are only interested in changes to cardholders in certain divisions, only give your
          REST operator access to those divisions.  It will not see changes outside them.

      parameters:
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/pos"
        description: Reserved for internal use.  You may see it in URLs you receive from the server, but you must never add it yourself.

      - name: "filter"
        in: query
        required: false
        schema:
          type: array
          default: ['defaults']
          items:
            type: string
            enum:  [href, id, firstName, lastName, shortName, description, authorised, lastSuccessfulAccessZone, division, notes, useExtendedAccessTime, personalDataFields, operatorLoginEnabled, operatorUsername, operatorPassword, operatorPasswordExpired, windowsLoginEnabled, windowsUsername, cards, accessGroups, competencies, notifications, relationships, lockers]
          

        description: |
          Limits the search results to the changes that affected these fields, and limits the
          `oldValues` and `newValues` blocks to these fields.  You can specify practically any of
          the fields in the [cardholder detail](#definition-Cardholder-detail).  You can also go
          into more detail; for example you can monitor a cardholder's cards' validity dates using
          `filter=cards.from,cards.until`.

          `filter` reduces the number of results; if you want to choose the blocks you receive in
          each result, use `fields`.

          If you do not supply a filter parameter it will use the same fields you get in a
          cardholder details page.  That is nearly everything the API has for a cardholder, but
          omits some seldom-used or expensive features such as card tracing and the large PIV
          fields.  If you want to monitor them you must list them here.  For example,
          `filter=defaults,cards.trace` will add the card trace flag to the usual filter.

          `personalDataFields` will filter for PDF changes, and will give you the
          personalDataDefinitions block plus the PDF values that changed.  You cannot filter for
          changes to a particular PDF:  you will need to do that in your client.

          Being able to monitor operator settings arrived in 8.50 and operator group memberships in
          8.60.

          Note that you cannot monitor changes in the `lastSuccessfulAccessTime` or
          `lastSuccessfulAccessZone` fields because they are not attributes of a cardholder object:
          they are derivatives of his or her activity.  If you want to monitor a person's movements
          we advise subscribing to events.

          If card changes are all you are interested in, and you do not want to hear about all the
          other changes that cardholders can experience, use `filter=cards`.

      - name: "fields"
        in: query
        required: false
        schema:
          type: array
          default: ['defaults']
          items:
            type: string
            enum:
              [href, operator, operator.href, operator.name, time, type, item, oldValues, newValues, cardholder, cardholder.* ]

        description: |
          Limits the blocks in the results.

          `fields` affects the blocks in each result; if you want to reduce the number of results,
          use `filter`.

          You can have finer-grained control of fields inside those blocks by listing their JSON
          paths.  For example, to see what the operator and affected cardholder's names are now, you
          could use `fields=operator.name,cardholder.firstName,cardholder.lastName`.

          The values you can list for the cardholder block are very similar to [these field
          names](#field-names-in-query-parameters).  Prefix each with `cardholder.` (since in this
          API they are all inside a block called `cardholder`).

          Separate values with commas and treat the strings as case sensitive.

          If you do not send this parameter the API will return all cardholder changes to a default
          set of fields.

          Use `personalDataFields` to monitor changes to PDF values on a cardholder.

      - name: "deadline"
        in: query
        required: false
        schema:
          default: 50
          type: integer
          minimum: 0
        description: |
          Sets the number of seconds after which the server will abort the query and return a 500.
          If that happens, you should try again later when the server (particularly the database
          server) is not so busy.

          Using this can be dangerous.  When the server aborts a query it discards all the work it
          did up to that point.  If you send the same query again later, with the same deadline, you
          may end up stuck in a loop, never making progress, and effectively DoSing your server.

          If your server is struggling, try reducing the size of each result set by using `top`.

          Added in 8.80.

      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardholderChanges'
        4xx:
          description: |
            The site does not have the RESTCardholders licence.
        500:
          description: |
            The server was too busy to complete the request before the deadline.

  /api/card_types:
    get:
      tags: [ "Card types" ]
      summary: Search card types
      description: |
        This returns the card types your operator is privileged to view.  They may be different card
        types from those you are allowed to assign to cardholders, and since that is the only thing
        that this API does with card types, you should probably be using [that
        function](#operation--api-card_types-assign-get) instead.
      responses:
        200:
          description: Success.
        "403":
          description: The installation lacks a cardholders licence.

    post:
      tags:
        - Card types
      x-badges: [ <<: *BADGE_BETA ]
      summary: Create a card type [coming]
      description: |
        Creates a new card type, setting practically everything except the PIV fields.

        [Do not code this URL](#topic-Forward-compatibility--HATEOAS-) into your application.  Take
        it from the `href` field in the `features.cardTypes.cardTypes.href` field of `GET /api`.

        The POST expects a document in the same format as [the card type
        detail](#operation--api-card_types--id--get).

        When successful it returns a location header containing the address of the new card type.

        Note that you can only create one item per POST.

        This call requires the RESTConfiguration licence.

      requestBody:
        $ref: '#/components/requestBodies/CardType'

      responses: 
        201: 
          description: "Success."
          headers:
            location:
              schema: {type: string, format: url }
              description: The href of the new card type.
        400:
          description: |
            The body of the POST did not describe a valid card type.

            If you see 'Invalid Access Group JSON object', the server could not parse the JSON in
            the body of your POST.  Remember to quote all strings, especially those than contain @
            symbols.

        403:
          description: |
            The operator does not have a privilege that allows creating card types, or the server
            does not have the 'RESTConfiguration' licence.

  /api/card_types/assign:
    get:
      tags: [ "Card types" ]
      summary: Search usable card types
      description: |
        This returns the card types you are privileged to assign to a cardholder.

        Since a site usually has only a few card types, and each is small, the search, sorting,
        field selection, and pagination parameters are probably of little use to you.  But they work.

        If your result set is empty it means your operator does not have the privilege to view any
        card types.  Your operator needs a privilege that allows assigning cards and credentials to
        cardholders such as 'Add / Edit Card or Credential' or 'Create / Edit / Create and Edit
        Cardholders'.

        You can find this URL in `features.cardTypes.assign`in `/api`.  It was new in 8.10.  In the
        interest of forward compability, [do not build it
        yourself](#topic-Forward-compatibility--HATEOAS-).
        
      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - name: "fields"
        in: query
        schema:
          type: array
          items:
            type: string 
            enum: [ href, id, name, division, facilityCode, availableCardStates, credentialClass, minimumNumber, maximumNumber, notes, regex, regexDescription ]

        description: |
          Specifies which fields to return instead of the default set (which contains
          nearly every field).  Separate values with commas.

          Treat the string matches as case sensitive:  use 'facilityCode' rather than
          'facilitycode'.

      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"

      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardTypeSearch'

        403: { description: "The installation lacks a cardholders licence." }

  /api/card_types/{id}:
    parameters:
    - $ref: "#/components/parameters/id"
    get:
      tags: [ "Card types" ]
      summary: Get one card type
      description: |
        This returns some basic data for a card type.  It exists so that clients following card type
        hrefs from other controllers do not receive a 404.  To find out about card types available
        for assigning to cardholders, use [card_types/assign](#operation--api-card_types-assign-get)
        instead.
      responses:
        200:
          description: Success.
        "403":
          description: The installation lacks a cardholders licence.

    patch:
      x-badges: [ <<: *BADGE_BETA ]
      tags:
      - Card types
      summary: Update a card type [coming]
      description: |
        This is the call you use to update a card type.  Take the URL from the results of a card
        type search.  In the interest of forward compability, [do not build it
        yourself](#topic-Forward-compatibility--HATEOAS-).
        
        The PATCH expects a document in the same format as the [the card type
        detail](#definition-Card-type) but with fewer fields.

        This call requires the RESTConfiguration licence.

      requestBody:
        $ref: '#/components/requestBodies/CardType'

      responses:
        200:
          description: |
            Success.  Future versions will return feedback from the server about your PATCH.
        204:
          description: "Success."
        400:
          description: |
            The body of the PATCH did not describe a valid card type.  Card types have many rules,
            easily enforced in a graphical interface but less so in an API.  See the body of the
            response for help on what went wrong.

        403:
          description: |
            The operator has a privilege that allows viewing the item but not modifying it, or you
            tried to set the division to one you cannot configure, or the server is missing the
            necessary licence.

            You need the 'Configure Site' privilege on the item you are changing, which means you need
            on it on the item's current division.  You also need it on the new division, if you are
            changing that.

            This is also the response when the server does not have the 'RESTConfiguration' licence.

        404:
          description: |
            That is not the URL of a card type or your operator does not have the privilege to view
            it.  This probably means you have built the URL yourself instead of taking it from the
            results of a [GET](#operation--api-card_types-get).

        409:
          description: |
            The item is locked for editing by another operator.  The body of the response will
            tell you which operator is holding the lock.

    delete:
      x-badges: [ <<: *BADGE_BETA ]
      tags: [ Card types ]
      summary: Remove a card type [coming]
      description: |
        This call removes a card type from Command Centre.  In the interest of forward compability,
        take the URL from the results of a card type search rather than [building it
        yourself](#topic-Forward-compatibility--HATEOAS-).

        This call requires the RESTConfiguration licence.

      responses: 
        200: { description: "Success." }
        204: { description: "Success." }
        400:
          description: |
            Deleting the card type failed.  This happens when the card type is in use.  Most often
            it is because a cardholder still has a card of this type, but card types can also be
            connected to other items.

        403:
          description: |
            The operator has the permission to view the item but not delete it, or the server does
            not have the 'RESTConfiguration' licence.
        404:
          description: |
            That is not the URL of a card type, or the operator is not privileged to view it.

  /api/competencies:
    get:
      tags:
        - Competencies
      summary: Search competencies
      description: |-
        This returns competencies matching your search criteria.

        The result will contain no more than 100 or 1000 competencies depending on your version; you
        should follow the `next` link (if present) for the next batch.

        If your result set is empty it means your operator does not have the privilege to view any
        competencies.  Perhaps there are none in the divisions in which your operator has 'View
        site' or 'Edit site', or your operator has no privileges at all.

        A bug in 7.90 meant that this call did not provide `next` links for sites that had more than
        100 competencies.  If this is you, set the 'top' parameter as high as you can (as
        recommended in the efficiency tips).  Command Centre clamps that to a maximum of ten
        thousand.  If that is not enough competencies for you, you are probably already in contact
        with Gallagher technical support.

        Get this URL from `features.competencies.competencies.href` in `/api`.  In the interest of
        forward compability, [do not build it yourself](#topic-Forward-compatibility--HATEOAS-).
        
      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - name: "fields"
        in: query
        schema:
          type: array
          default: ['defaults']
          items:
            type: string
            enum: [href, id, name, shortName, description, division, notes, expiryNotify, noticePeriod, defaultExpiry, defaultAccess]
        description: |
          Specifies which fields to return in the search results.  The values you can list are the
          same as the field names in the [details page](#definition-Competency-detail).  Using it
          you can return everything on the search page that you would find on the details page.
          Separate values with commas.

          Use the special value `defaults` to return the fields you would have received had you not
          given the parameter at all.  Add more after a comma.

          Treat the string matches as case sensitive.

          In v8.00 you will receive the href and internal ID even if you did not ask for them.  In
          8.10 you will not.  If you are going to send the fields parameter and need the href or ID,
          be explicit.

      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"

      responses:
        "200":
          description: |
            Success.  See the note in the description about privileges if your result set is empty.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetencySearch'
        "403":
          description: The installation lacks a cardholders licence.
          content: {}

    post:
      tags:
      - Competencies
      summary: Create a competency
      description: |
        Creates a new competency.

        The POST expects a document in the same format as the [the competency
        detail](#definition-Competency) but with far fewer fields.  An example is [this POST
        example](#definition-Competency-PATCH-and-POST-example).

        When successful it returns a `location` header containing the address of the new competency.

        Note that you can only create one competency per POST.

        [Do not code this URL](#topic-Forward-compatibility--HATEOAS-) into your application.  Take
        it from the results of `GET /api`.

        New to Command Centre 9.10.

        This requires the RESTConfiguration licence.

      requestBody:
        $ref: '#/components/requestBodies/CompetencyPATCHandPOSTExample'

      responses:
        201:
          description: |
            Success.  Check the response body for feedback about your request.
          headers:
            location:
              description: The href of the new competency.
              schema:
                type: string
                format: url
        400:
          description: |
            The body of the POST did not describe a valid competency.  You may have tried to give
            the new competency the same name as an existing one.

            See the body of the response for help.

        403:
          description: |
            The operator does not have a privilege on the division that allows creating items inside
            it ('Configure Site'), or the server has reached its licensed limit of competencies, or
            it does not have the 'RESTConfiguration' licence.

  /api/competencies/{id}:
    parameters:
    - $ref: "#/components/parameters/id"
    get:
      tags:
        - Competencies
      summary: Get details of a competency
      description: |-
        You get this URL from a cardholder or from a competency search.  In the interest of forward
        compability, [do not build it yourself](#topic-Forward-compatibility--HATEOAS-).

        The results document gives everything Command Centre has on a competency except the warning
        messages that appear on a reader when a cardholder needs to take action.

      parameters:
      - name: "fields"
        in: query
        required: false
        schema:
          default: ['defaults']
          type: array
          items:
            type: string
            enum: [href, id, name, shortName, description, division, notes, expiryNotify, noticePeriod, defaultExpiry, defaultAccess]
        description: |
          Specifies which fields to return.  The values you can list are the same as the field names
          in the [details page](#definition-Competency-detail).  Use it to reduce the size of the
          result document.  Separate values with commas.
          
          Treat the string matches as case sensitive.

      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetencyDetail'
        "403":
          description: The installation lacks a cardholders licence.
          content: {}
        "404":
          description: |
            Your REST operator does not have the privilege to view this competency.
          content: {}

    patch:
      tags:
      - Competencies
      summary: Update a competency
      description: |
        This is the call you use to update a division's name, short name, description, notes, or
        division.  In the interest of forward compability, take the URL from the results of a
        division search rather than [building it yourself](#topic-Forward-compatibility--HATEOAS-).

        The PATCH expects a document in the same format as the [the competency
        detail](#definition-Competency-detail) but with fewer fields.  An example is [this PATCH
        example](#definition-Competency-PATCH-and-POST-example).

        New to Command Centre 9.10.

        This call requires the RESTConfiguration licence.

      requestBody:
        $ref: '#/components/requestBodies/CompetencyPATCHandPOSTExample'

      responses:
        200:
          description: |
            Success.  Future versions will return feedback from the server about your PATCH.
        204:
          description: "Success."
        400:
          description: |
            The body of the PATCH did not describe a valid competency.  See the body of the response
            for help on what went wrong.  It may be that you tried to use the name of another
            competency:  no two items of the same type can have the same name.  Or you may have
            tried to set the competency's division to one that is not visible to you.
        403:
          description: |
            The operator has a privilege that allows viewing the item but not modifying it, or you
            tried to set the division to one you cannot configure, or the server is missing the
            necessary licence.

            You need the 'Configure Site' privilege on the item you are changing, which means you need
            on it on the item's current division.  You also need it on the new division, if you are
            changing that.

            This is also the response when the server does not have the 'RESTConfiguration' licence.

        404:
          description: |
            That is not the URL of a competency or your operator does not have the privilege to view
            it.  This probably means you have built the URL yourself instead of taking it from the
            results of a [GET](#operation--api-competencies-get).

        409:
          description: |
            The item is locked for editing by another operator.  The body of the response will
            tell you which operator is holding the lock.

    delete:
      tags: [ Competencies ]
      summary: Remove a competency
      description: |
        This call removes a competency from Command Centre.  You get this URL from a cardholder or
        from a competency search.  In the interest of forward compability, [do not build it
        yourself](#topic-Forward-compatibility--HATEOAS-).
        
        New to Command Centre 9.10.

        This call requires the RESTConfiguration licence.
      parameters:
      - $ref: "#/components/parameters/id"
      responses: 
        200: { description: "Success." }
        204: { description: "Success." }
        400:
          description: |
            Deleting the competency failed.  This happens when the item is still being used by
            another item.

        403:
          description: |
            The operator has the permission to view the item but not delete it, or the server does
            not have the 'RESTConfiguration' licence.
        404:
          description: |
            That is not the URL of a competency, or the operator is not privileged to view it.

  /api/day_categories:
    get:
      tags:
      - Day Categories
      summary: Search day categories
      description: |
        This returns the day categories that match your search criteria.

        The result will contain no more than 100 or 1000 (depending on your version), or as many as
        you asked for more in your request; you should follow the `next` link, if it is present, to
        collect the next batch.  Generally a site does not have too many day categories, so if you
        set `top=1000` you are bound to collect them all.

        If your result set is empty it means your operator does not have any of the privileges that
        allow viewing day categories, such as 'View Site', 'Configure Site', or 'Edit Schedules'.
        Because day categories do not have divisions, having one of those privileges in _any_
        division is enough.

        When you have seen them all there will be no `next` link.

        This does not take a `division` query parameter because day categories are not in divisions.

        Do not code this URL into your application.  Take it from the 'href' field in the
        `features.dayCategories.dayCategories` section of `/api`.

        Added in 8.50.
      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - name: "fields"
        <<: *FIELDSDESC_SUMONLY
        schema:
          default: ['defaults']
          type: array
          items:
            type: string 
            enum: [href, name, description, notes]
      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"
      responses:
        "200":
          description: |
            Success.  See the note in the description about privileges if your result set is empty.
          content:
            application/json:
              schema:
                description: "An array of day categories, and a `next` link for more."
                type: object
                properties:
                  results:
                    type: array
                    description: An array of day categories.
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: Default Day Category
                        href:
                          type: string
                          description: |
                            This is the string to use when placing a day category on a schedule.
                          format: url
                          example: https://localhost:8904/api/day_categories/3
                        description:
                          type: string
                          description: |
                            Not in the default field set.  If you want it, you need to ask for it using `fields`.
                          example: Factory default
                        notes:
                          type: string
                          description: |
                            Also not in the default field set.  If you want it, you need to ask for it.
                          example: The default calendar puts every day in this.
                      description: |
                        `/api/day_categories` returns an array of these.  Each gives you enough about a day category
                        to identify it and use it in a schedule:  its href, name, and (if you ask for them using the
                        `fields` parameter) notes and description.
                  next:
                    type: object
                    properties:
                      href:
                        type: string
                        format: url
                    description: The link to the next page.  Absent if you have retrieved them
                      all.
                    example:
                      href: https://localhost:8904/api/day_categories?skip=1000
        "403":
          description: |
            The site does not have the RESTCardholders, RESTStatus, or RESTOverrides licence.
          content: {}

  /api/divisions:
    post:
      tags:
      - Divisions
      summary: Create a division
      description: |
        Creates a new division.

        The POST expects a document in the same format as the [the division
        detail](#definition-Division) but with far fewer fields.  An example is [this POST
        example](#definition-DivisionPATCHAndPOSTExample).  The only mandatory field is `parent`.

        When successful it returns a `location` header containing the address of the new division.

        Note that you can only create one division per POST.

        Do not code this URL into your application.  Take it from the results of `GET /api`.  That
        shows the API features for which you have the necessary licence.

        New to 9.30.
      requestBody:
        description: |
          The only required field here is the new division's parent.  All divisions (except the
          root) must have a parent.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DivisionPatchAndPOSTExample'
        required: true
      responses:
        "201":
          description: |
            Success.  Check the response body for feedback about your request.
          headers:
            location:
              description: The href of the new division.
              schema:
                type: string
                format: url
              example: "https://localhost:8904/api/divisions/2002"

        "400":
          description: |
            The body of the POST did not describe a valid division.  This includes not specifying a
            parent division.  Or it may be that you tried to give the new division the same name as
            an existing one.  Or you may have tried to set the new division's parent to a division
            that is not visible to you.

            See the body of the response for help.
          content: {}
        "403":
          description: |
            The operator does not have a privilege on the parent division that allows creating
            divisions inside it ('Configure Site' or 'Edit Divisions'), or the server has reached
            its licensed limit of divisions or does not have the 'RESTConfiguration' licence.
          content: {}
      x-codegen-request-body-name: this name not rendered

  /api/divisions/_operation_:
    get:
      tags:
      - Divisions
      summary: List divisions
      description: |
        The functions inside `/api/divisions/` retrieve the divisions in which the operator can
        perform other functions.  They all return the same data structure.

        For example, `/api/divisions/view_events` retrieves the list of divisions in which the REST
        operator has privileges to view events, and `/api/division/view_alarms` does the same for
        alarms.

        Do not code these URLs into your application.  Take them from the results of `GET /api`.
        For the events and alarms examples, the links will be at `events.divisions.href` and
        `alarms.division.href`.

        `/api` only shows API features for which you have the necessary licence.

      parameters:
      - name: top
        in: query
        description: Sets the maximum number of divisions to return per page.
        schema:
          minimum: 1
          type: integer
      - $ref: "#/components/parameters/sort"
      - name: fields
        in: query
        description: |
          Return these fields instead of the default set.  The values you can list are the same as the
          field names you would see in the results, plus `visitorManagement`, which does not come out by
          default.  Use it to specify the fields you want in your results.  Separate values with commas.

          Treat the string matches as case-sensitive.
        schema:
          type: string
          enum:
          - href
          - id
          - name
          - parent
          - visitorManagement

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Divisions'
        "403":
          description: The site does not have a REST licence.

  /api/divisions/{id}:
    get:
      tags:
      - Divisions
      summary: Get details of a division
      description: Details of a division.  Follow the `href` in a division summary to get here.
      parameters:
      - $ref: "#/components/parameters/id"
      - name: fields
        in: query
        description: |
          Return these fields instead of the default set.  The values you can list are the same as the
          field names you would see in the results, plus `visitorManagement`, which does not come out by
          default.  Use it to specify the fields you want in your results.  Separate values with commas.

          Treat the string matches as case-sensitive.
        schema:
          type: string
          enum:
          - href
          - id
          - name
          - parent
          - visitorManagement
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Division'
        "403":
          description: The site does not have a REST licence.
        "404":
          description: |
            That is not the href of a division or you do not have privileges to read divisions (View
            Site, Configure Site, Edit Divisions, or Advanced User).

    delete:
      tags:
      - Divisions
      summary: Remove a division
      description: |
        This call removes a division from Command Centre.

        Deleting divisions will be possible in a future version of Command Centre.

      parameters:
      - $ref: "#/components/parameters/id"

      responses:
        "204":
          description: Success.
          content: {}
        "400":
          description: |
            Deleting the division failed.  This happens when the division is not empty or is still
            being used by another item (such as an operator group).
        "403":
          description: |
            The operator has the permission to view the division but not delete it, or the server is
            not licensed for the operation.
        "404":
          description: |
            That is not the URL of a division, or the operator is not privileged to view it, or the
            server does not have the 'RESTConfiguration' licence.

    patch:
      tags:
      - Divisions
      summary: Update a division
      description: |
        This is the call you use to update a division's name, description, notes, or parent.

        The PATCH expects a document in the same format as the [the division
        detail](#definition-Division) but with fewer valid fields.  An example is [this PATCH
        example](#definition-Division-PATCH-and-POST-example).

        New to 9.30.
      parameters:
      - $ref: "#/components/parameters/id"

      requestBody:
        description: |
          There are no mandatory fields, but it would not be much of an update without one.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DivisionPatchAndPOSTExample'
        required: true

      responses:
        "200":
          description: |
            Success.  The response body will contain feedback from the server about your PATCH.

        "204":
          description: Success.

        "400":
          description: |
            The body of the PATCH did not describe a valid division.  See the body of the response
            for help on what went wrong.  It may be that you tried to use the name of another
            division:  no two items of the same type can have the same name.  Or you may have tried
            to set the division's parent to a division that is not visible to you.

        "403":
          description: |
            The operator has a privilege that allows viewing the division but not modifying it, or
            you tried to set a parent on the root division, or you tried to set the parent to a
            division you cannot configure, or the server is missing the necessary licence.

            You need either the 'Configure Site' or 'Edit Divisions' privilege on the division you
            are changing.  You also need it on the new parent, if you are changing that.

            This is also the response when the server does not have the 'RESTConfiguration' licence.

        "404":
          description: |
            That is not the URL of a division or the operator does not have the privilege to view
            that division.  This probably means you have built the URL yourself instead of taking it
            from the results of a [GET](#operation--api-divisions-_operation_-get).
        "409":
          description: |
            The item is locked for editing by another operator.  The body of the response will
            tell you which operator is holding the lock.

  /api/doors:
    get:
      tags:
        - "Doors"
      summary: Search doors
      description: |
        This returns a summary of the doors matching your search criteria.

        The result will contain no more than 100 or 1000 doors (depending on your version), or as
        many as you asked for more in your request; you should follow the `next` link, if it is
        present, to collect the next batch.

        If your result set is empty it means your operator does not have the privilege to view any
        doors, such as 'View Site', 'Edit Site', or 'Override - Open Door'.  Perhaps there are no
        doors in the divisions in which your operator has privileges, or your operator has no
        privileges at all.

        When you have loaded them all there will be no `next` link.

        Do not code this URL into your application.  Take it from the 'href' field in the
        `features.doors.doors` section of `/api`.

      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - name: "fields"
        <<: [*FIELDSDESC_SUM, *DOORFIELDS]
      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"

      responses:
        200:
          description: |
            Success.  See the note in the description about privileges if your result set is empty.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoorSearch'
        403: { $ref: '#/components/responses/403nolicence' }

  /api/doors/{id}:
    get:
      tags:
        - "Doors"
      summary: Get details of a door
      description: |
        This returns the detail of one door.

        Follow the 'href' field in a [door summary](#definition-DoorSummary) to get here.

      parameters:
      - $ref: "#/components/parameters/id"
      - name: "fields"
        <<: [*FIELDSDESC_DET, *DOORFIELDS]

      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoorDetail'
        403: {$ref: '#/components/responses/403nolicence'}
        404: {$ref: "#/components/responses/404door"}

  /api/doors/{id}/open:
    post:
      tags: ["Doors"]
      summary: Open a door
      description: |
        Sends an override to unlock a door.

        Follow the `commands.open.href` field in a [door](#definition-Door-detail) to get here.

      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/requested_by"
      responses:
        204: { description: Success. }
        403: { $ref: "#/components/responses/403dooroverride" }

  /api/doors/{id}/updates:
    get:
      tags:
        - "Doors"
      summary: Monitor a door
      description: |
        See the [item status topic](#topic-Item-status) for how to use the updates APIs.

        Note that this API call is good for watching one item only; if you want to monitor several,
        you are better off with a [status subscription](events.html#status-subscriptions).

        Follow the 'updates' field in a door [summary](#definition-Door-summary) or
        [details](#definition-Door-detail) pages to get here.

      parameters:
      - $ref: "#/components/parameters/id"
      - name: "fields"
        <<: [*UPDFIELDS, *UPDFIELDSENUM]

      responses:
        200:
          description: |
            Success.  See the [introduction](#tag-Doors) for a description of the three status
            fields.
          content:
            application/json:
              schema:
                type: object
                example:
                  updates:
                    status: "Closed, Locked, Secure access."
                    statusText: "Closed, Locked, Secure access."
                    statusFlags: [ closed, locked, secure ]
                  next:
                    href: https://localhost:8904/api/doors/332/updates/9_1
        403: {$ref: '#/components/responses/403nolicence'}
        404: {$ref: "#/components/responses/404door"}

  /api/elevator_groups/modify_passenger_details:
    get:
      tags:
        - "Elevator Groups"
      summary: Search assignable elevator groups
      description: |
        This searches the elevator groups that your privileges allow you to use in cardholders'
        default floor and passenger type assignments, returning everything you need to make those
        assignments.

        Unlike most of the other calls in this document, it requires the RESTCardholders licence.

        The result will contain no more than 100 or 1000 depending on your version, or as many as
        you asked for more in your request; you should follow the `next` link, if it is present, to
        collect the next batch.

        If your result set is empty it means your operator does not have the privilege to assign
        elevator groups to cardholders ('Modify Passenger Details').  Perhaps there are no elevator
        groups in the divisions in which your operator has that privilege.

        When you have loaded them all there will be no `next` link.

        Do not code this URL into your application.  Take it from the `href` field in the
        `features.cardholders.modifyDefaultFloors` section of `/api`.

      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - name: "fields"
        <<: [*FIELDSDESC_SUM, *ELEVATORGROUPCARDHOLDERFIELDS]
      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"

      responses:
        200:
          description: |
            Success.  An array of [elevator group](#definition-Elevator-Group-Floor-Access-detail) objects and a
            `next` link for more.

            See the note in the description about privileges if your result set is empty.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ElevatorGroupFloorAccessDetail'
                  next:
                    type: object
                    properties:
                      href:
                        type: string
                        format: url
                        example: https://localhost:8904/api/elevator_groups/635
        403:
          description: The site does not have the RESTCardholders licence.

  /api/elevator_groups:
    get:
      tags:
        - "Elevator Groups"
      summary: Search elevator groups
      description: |
        This returns the name and href of the elevator groups matching your search criteria.  This
        uses a different privilege from the `modify_default_floors` call, so it may not return you
        the groups you need.  If your goal is to set cardholders' default floors, you should that
        call instead.

        The result will contain no more than 100 or 1000 (depending on your version), or as many as
        you asked for more in your request; you should follow the `next` link, if it is present, to
        collect the next batch.

        If your result set is empty it means your operator does not have the privilege to view any
        elevator groups, such as 'View Site' or 'Edit Site'.  Perhaps there are no elevator groups
        in the divisions in which your operator has privileges, or your operator has no privileges
        at all.

        When you have loaded them all there will be no `next` link.

        Do not code this URL into your application.  Take it from the `href` field in the
        `features.elevators.elevatorGroups` section of `/api`.

      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - name: "fields"
        <<: [*FIELDSDESC_SUM, *ELEVATORGROUPALLFIELDS]
      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"

      responses:
        200:
          description: |
            Success.  An array of [elevator group](#definition-Elevator-Group) objects
            and a `next` link for more.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ElevatorGroupSummary'
                  next:
                    type: object
                    properties:
                      href:
                        type: string
                        format: url
                        example: https://localhost:8904/api/elevator_groups?skip=1000
        403:
          description: |
            A server running 8.50 or earlier is missing the RESTStatus licence.  A server running
            8.60 or later is missing both the RESTStatus and RESTOverrides licences.

  /api/elevator groups/{id}:
    get:
      tags:
        - "Elevator Groups"
      summary: Get details of an elevator group
      description: |
        This returns the detail of one elevator group.

        If you are setting cardholders' default floors, you should be using the
        `modify_default_floors` call rather than this one.

      parameters:
      - $ref: "#/components/parameters/id"
      - name: "fields"
        <<: [*FIELDSDESC_DET, *ELEVATORGROUPALLFIELDS]

      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElevatorGroupDetail'
        403: { $ref: '#/components/responses/403nolicence' }
        404:
          description: |
            The request's URL does not represent an elevator group, or the operator does not have a
            privilege on the elevator group's division that allows viewing them, such as 'View Site'
            or 'Edit Site'.

  /api/events:
    post:
      tags:
      - Events
      summary: Add an event
      description: |
        Use this method to create an event in Command Centre v8.10 or later.

        Do not code this URL into your application.  Take it from `events.events.href` in the
        results of `GET /api`.
        
        Each field has particular rules and has its own effects on the event and subsequent reports,
        and misconfiguration (such as inadvertently causing a macro to run itself) can land you in
        real trouble, so have a good look at the documentation below and the example [POST
        body](#definition-EventPOSTBody).

        Events are immutable:  you cannot PATCH or DELETE them after you create them.

        ### Usable event types

        You must supply an [event type](#operation--api-events-groups-get).  8.10 ships with 30
        external event types you can use, each in its own event type group.

        You can create 970 of your own event types using the External Event Type Configuration
        Utility, a separate Windows application that lets you create external event types and make
        them appear on items' Event Response and Alarm Instructions tabs in the Configuration
        Client.  You will find the release note for that utility in the Documentation folder on the
        installation media.

        1000 event types sounds like a lot, but be aware that you cannot delete event types, and the
        only thing you can modify on an existing event type is its name.  Their event type group and
        item types are permanent once you save them from the utility.  Please plan carefully, and
        take backups!

        ### Usable source items

        Every event needs a source item.  You can let the server pick one for you (it will use the
        REST Client item identified by your API key) or you can use any item that has an 'Event
        Response' tab in its Configuration Client window (which is most of them).  Our existing
        integrations use items like doors, external system items, and cameras.

        If you allow the server to default to your REST client item as the source, or if specify it
        yourself, your operator must have 'Create events and alarms' in at least one division for
        the call to succeed.  Any division will do.  Otherwise you'll receive a 403.

        If you specify a source item to a server running 8.90 or later and that item is not your
        REST Client item, your operator must have the 'Create events and alarms' privilege in that
        item's division.  In older versions it was enough for your operator to have that privilege
        in any division.

        Cardholders cannot be event sources because they do not have an 'Event Response' tab, but...

        ### Related items

        Along with a source, you can link other items to the events you create.  If you link a
        cardholder, for example, your events will show on an activity report generated for that
        cardholder.  To link an item your operator must have a privilege that allows viewing it
        ('View cardholders' for cardholders or 'View site' for most other item types).

        ### Action plans

        An event can fire an action plan, which will
        * set the priority if the REST client did not set one in the body of the POST, and
        * run a macro on the server.

        Macros are extremely powerful, and a thorough treatment requires more room than we have, so
        it is sufficient to say that you should not aim for a dramatic first test.  A good first
        result is to turn on a virtual output made for the purpose.  Just make sure that it will not
        trigger another macro because it is possible to create loops, causing havoc.

        You do not pick an action plan to run when you POST your event.  Command Centre does that in
        three steps:
          
          1. The server looks at the configuration of the source item in the Event Response tab of
             its property page in the Configuration Client.  If there is an entry for the event type
             that is not "use default", Command Centre will fire that action plan and skip the next
             steps.  In versions older than 8.30 the control is per event group, not per event.
          2. Since the server did not find an action plan on the item, it tries its alarm zone.
             Specifically, the Event Defaults tab of the alarm zone's property page in the
             Configuration Client.  Again the control is per event group not per event type in older
             versions.  If the event's action plan is not 'use default', the server fires that
             action plan and goes no further.
          3. Since the server did not find an action plan on the item or its alarm zone, it looks at
             the configuration in the Event Defaults tab of the server properties.  There is always
             an action plan there, even if it does nothing more than set the priority of the event.

        Once it has found the action plan to run, the server will assign the event its priority (if
        you did not specify a priority yourself) and run the macro if there is one, both from the 'Command
        Centre' tab of the action plan's property page in the Configuration Client.  The server will
        not use the configuration from the other tabs.

        It is not possible to submit an event with priority zero, but it is possible to submit an
        event with no priority, and have the action plan assign it priority zero.  This will run the
        macro on the action plan then drop the event before it reaches the database.

        ### Alarm instructions

        Alarm instructions are marked-up text fields that Command Centre presents to security
        personnel when events occur.  Picking an alarm instruction to use follows the same decision
        path as picking an action plan:  Command Centre looks at the configuration of the source
        item first, and finding nothing there will turn to the source item's alarm zone, and finally
        to the server properties.  If all three are unset the operator will not receive any special
        instructions.

        So, what an operator sees when your event arrives on their board depends on the priority and
        the event source.
        
        ### When events become alarms

        After the server has established an event's priority, either from the body you POSTed or the
        action plan, it looks at the Event Priorities tab of the server properties.  There is a
        slider there that sets the level above which an event becomes an alarm.  By default it is
        set to two, meaning that any event with a priority of two or higher will appear as an alarm.

      requestBody:
        description: |
          You can specify many things on an event but the only mandatory field is the type.  When
          you are developing, start with just that.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventPOSTBody'
        required: true

      responses:
        201:
          description: "Success."
          headers:
            location:
              description: The href of the new event.
              schema: {type: string, format: url}
              example: "https://localhost:8904/api/events/2719370"
        204:
          description: |
            Success with no event created, probably because the priority in the action plan was
            zero.
        400:
          description: |
            The parameters are invalid.  Check the body of the response for an error message.

            8.90 and later will reject the POST with a 400 if your event specifies a source item
            that is not your REST Client item and your operator does not have 'Create Events and
            Alarms' on its division.

        403:
          description: |
            The site does not have the RESTCreateEvents licence (in which case the body of the
            response will say so) or operator does not have the 'Create Events and Alarms'
            privilege.

    get:
      tags:
      - Events
      summary: Search events
      description: |
        This returns the next batch of events matching the supplied filters starting
        at the beginning of the database, or at the time specified by the
        `after` parameter.

        For its correct use in various scenarios, see the [use cases](#event-use-cases).

        By default the result will contain no more than 1000 events; for
        efficient transfer of large numbers of events you should increase this
        with the `top` parameter in the request URL.

        Each response will contain a `next` and an `updates` link.  Following
        the `next` link will return the next batch of events, or an empty list
        if there are no more available.  Following the `updates` link will also
        return immediately if more events are available, but if there are none,
        it becomes a long poll.  It will will block until an event is available
        that matches the specified filters, or a timeout passes.

        Do not code this URL into your application.  Take it from `events.events.href` in the
        results of `GET /api`.

      parameters:
      - name: "top"
        in: query
        description: Sets the maximum number of events to return per page.
        schema:
          maximum: 10000
          minimum: 1
          type: integer
          default: 1000
      - name: "after"
        in: query
        schema:
          type: string
          format: date-time
        description: |
          Restricts events to those that occurred at or after this time.

          The server accepts extended ISO-8601 time stamp formats.  There must be hyphen separators
          in the date and colons in the time, and a `T` separating the two.

          For predictable results you should also add a timezone specifier.  A `Z` means UTC and is
          recommended, but `+hh`, `+hhmm`, and `+hh:mm` also work.  Note that you need to encode
          plus-signs as `%2b` in a URL.

          If you omit the time, the server will assume midnight.  If you omit just the seconds, the
          server will take it to the top of the minute, `:00`.
      - name: "before"
        in: query
        schema:
          type: string
          format: date-time
        description: |
          Restricts events to those that occurred before this time.  Events that occurred at this
          exact time (to the second) will not appear in the results.  For example, to collect all
          events that occurred on 1 January 2017, use `after=2017-01-01Z,before=2017-01-02Z`.  You
          will not receive any events from 2 January.

          The `after` parameter (above) describes the time stamp formats that the server accepts.
      - name: "source"
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
        description: |
          Restricts events to those whose source item has this ID.  Separate multiple IDs with
          commas.  Use the [items API](#tag-Items) to search Command Centre's items.

      - name: "type"
        in: query
        required: false
        explode: false
        schema:
          type: array
          items:
            type: string
        examples:
          42613:
            value: [ 42613 ]
            summary: Events raised when an Engage door is held open for too long.
          softComp:
            value: [ 15808, 20107 ]
            summary: Events raised when a cardholder is allowed access without a softly-enforced competency.
        description: |
          Restricts events to those whose type has this ID.  Separate multiple IDs with commas.

          The results may include other event types if you also use the `group` parameter, below.

          Use the [event groups call](#operation--api-events-groups-get) to see all event types.
          The IDs you need for this query parameter are strings but look like small integers.  That
          call shows the event types along with the groups they are in, so do not confuse event
          types with event groups.  They are separated in the results of the API call, but as a
          general rule you can tell them apart by their integer value:  event group IDs are in the
          hundreds, while most event type IDs are in the thousands.

          In version 9.00 and later use the special value `hasLocation` to include all event types
          that can reveal a cardholder's location or access zone.  In 9.00 it is a set of about 80
          event types; it may be more in future versions.  If you use `hasLocation` you probably
          also want to ask for the `location` block using the `fields` query parameter.

          Do not send `type=hasLocation` to a server running 8.90 or earlier:  it will reject it.

      - name: "group"
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
        explode: false
        description: |
          Restricts events to those with this event group ID.  Separate multiple IDs with commas.

          `group` is ORed with `type`.  In fact it is shorthand for `type=` followed by the IDs of
          all the event types in the event type groups you list, and the search uses the union of
          the two lists.

          Use the [event groups call](#operation--api-events-groups-get) to see all event types and
          groups.
      - name: "cardholder"
        in: query
        required: false
        example: 325
        schema: {type: string}
        explode: false
        description: |
          Restricts events to those associated with the cardholder that has this Command Centre ID.
          Separate multiple IDs with commas.
      - name: "division"
        in: query
        required: false
        examples:
          TwoNonRoot:
            value: [201,330]
            summary: Two non-root divisions.
        schema: {type: array, items: {type: string}}
        explode: false
        description: |
          Restricts events to those in these divisions or their descendants.  Separate IDs with
          commas.

          A more secure option for limiting your client's visibility is to set the operator's
          privileges so that it only has access to those divisions.
      - name: "directDivision"
        in: query
        required: false
        schema: {type: string}
        description: "Restricts events to those whose division is in this list.  Unlike `division=`, it does not follow ancestry.  The name `directDivision` is case-sensitive.  Separate IDs with commas.\n\nExample:  `division=2,101`."

      - name: "relatedItem"
        in: query
        required: false
        schema: {type: string}
        description: |
          Restrict events to those associated with the item that has this Command Centre
          ID. Separate multiple IDs with commas.

          Example: `relatedItem=3,102`
      - $ref: "#/components/parameters/eventfields"
      - name: "previous"
        in: query
        required: false
        schema: {type: boolean, default: false}
        description: |
          Returns the newest events rather than the oldest.  Without this option the API will return
          events starting from the epoch, but if you set it to `true` the server will return the
          most recent events, the last of which will be the latest to arrive at the server.

          In both cases you can move backward and forward in arrival time with the 'next' and
          'previous' links.
      - name: "pos"
        in: query
        required: false
        schema: {type: integer, minimum: 0}
        description: |
          INTERNAL USE ONLY.  This is how Command Centre tracks the events you have seen already.
          Do not set it yourself.  Retain the 'next' or 'updates' link in your application instead.

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSearch'
        403:
          description: The site does not have a RESTEvents licence.
          
  /api/events/updates:
    get:
      tags:
      - Events
      summary: Get new events (or wait)
      description: |
        Poll this link to receive new events that match the specified filters.  If there are none
        ready, the call will block until one arrives or a deadline passes.

        For its correct use in various scenarios, see the [use cases](#event-use-cases).  In
        particular, sleep between calls to reduce load on the server.

        The way this call picks events is very different from `/api/events`:

        - If you follow the link at `events.updates.href` in the results of `GET /api`, you will
          receive the first events that arrive after you make the call and that meet your other
          search criteria.

        - If you follow the `updates` link from the results of `GET /api/events` or `GET
          /api/events/updates`, the link will contain a bookmark in the `pos` parameter that causes
          the server to return the first events that arrive or arrived after that bookmark (and that
          meet your search criteria, of course).
        
        The response will contain an `updates` link back to the same API call with a new bookmark
        that will cause it to return the next page of results.

        Each response will also contain a `next` link that will take you to the non-blocking version
        of the call at [/api/events](#operation--api-events-get).

        However long you wait between calls, following a `next` or `updates` link will always return
        the first events that arrived after your previous call.

        Do not code this URL into your application.  Take it from `events.updates.href` in the
        results of `GET /api`, or from `updates` in the results of `GET /api/events`.

      parameters:
      - name: "top"
        in: query
        required: false
        schema:
          maximum: 10000
          minimum: 1
          type: integer
        description: Sets the maximum number of events to return per page.
      - name: "deadline"
        in: query
        required: false
        schema:
          maximum: 86400
          minimum: 1
          type: integer
        description: |
          Sets the number of seconds to wait for an event, if none are ready when you make the call.
          If none arrive before this number of seconds pass the result set will be empty. If not
          specified, a default will apply.
      - name: "after"
        in: query
        required: false
        schema:
          type: string
          format: date-time
        description: |
          Removes events that occurred before this time from the result set.  It must be an ISO-8601
          date or date-time with a timezone.

          It is unlikely you will add this parameter to `GET /api/events/updates`.  However it is a
          very useful parameter to [/api/events](#operation--api-events-get), and it will pass from
          there into the `updates` URL that that call returns.  In that case it has no effect; you
          can leave it there.

          This will not push the start time of the search into the past.  As described above, the
          search will start at the time of the call or after the last event in a previous result set
          depending on the `pos` parameter.  The `after` parameter reduces the results to those
          events that _arrived_ after the start time of the search and _occurred_ after the `after`
          timestamp.  Note that an event's arrival time can be different from its occurrence time.
          
      - name: "before"
        in: query
        required: false
        schema:
          type: string
          format: date-time
        description: |
          Removes events that occurred at or after this time from the result set.  It must be an
          ISO-8601 date or date-time string with a timezone.

          If no events arrive with an occurrence time earlier than this parameter, the call will
          eventually time out.

          It is unlikely you will want this parameter in a call to `GET /api/events/updates`.  It
          puts an end-date on the search, which is a very odd thing to do on a call intended to keep
          the caller up to date with events as they arrive.  If you find yourself using it, you may
          wish to reconsider your approach.

          If you only wish to receive events up to a point in history, use the `before` parameter on
          [/api/events](#operation--api-events-get), following its `next` block in a loop until you
          get an empty result.  If you only wish to receive events up to a point in the future, use
          `/api/events` again but loop until you receive an event with a date beyond your stopping
          point.

      - name: "source"
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
        description: |
          Restricts events to those whose source item has this ID.  Separate multiple IDs with
          commas.  Use `/api/items` to search Command Centre's items.
      - name: "type"
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
        description: |
          Restricts events to those with this event type ID.  Separate multiple IDs with commas.

          Use [the API](#operation--api-events-groups-get) to see all of Command Centre's event types and groups.  Event
          types names and IDs rarely change, but the ID is the more stable of the two.  Therefore it
          is probably safer to use that API for reference then hard-code the event type IDs you find
          there into your application.
      - name: "group"
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
        description: |
          Restricts events to those with this event group ID.  Separate multiple IDs with commas.

          The documentation for `/api/events/groups` advises when to filter for event groups instead
          of event types.

          Like event types, hard-coding the ID into your application is probably stabler (and
          definitely simpler) than searching for it at runtime.

      - name: "cardholder"
        in: query
        required: false
        schema: {type: string}
        description: |
          Restricts events to those associated with the cardholder with this Command Centre ID.
          Separate multiple IDs with commas.

          Example:  `cardholder=325`
      - name: "division"
        in: query
        required: false
        schema: {type: string}
        description: |
          Restricts events to those in the division with this ID and its descendant divisions.
          Separate multiple IDs with commas.

          Example:  `division=2,101`
      - $ref: "#/components/parameters/eventfields"
      - name: "pos"
        in: query
        required: false
        schema: {type: integer, minimum: 0}
        description: |
          INTERNAL USE ONLY.  Retain the 'next' or 'updates' link in your application instead.  This
          is how Command Centre tracks the events you have seen already.  Do not set it yourself.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSearch'
        403:
          description: The site does not have a RESTEvents licence.

  /api/events/{id}:
    get:
      tags:
      - Events
      summary: Get details of an event
      description: |
        Full details for an event. You could follow the `href` in the event summary to get here, but
        if you are running 8.20 or later you could just use the `fields` parameter to add the
        `details` field to the summary results for the same result.
      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/eventfields"
      responses: 
        200: 
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetail'
        403: { description: The site does not have a RESTEvents licence. }
        404:
          description: |
            That is not the URL of an event, or it is but you do not have privileges to read events
            in its division.
        
  /api/events/groups:
    get:
      tags:
      - Events
      summary: List event types
      description: |
        Retrieves the list of event type groups and the event types within those groups. Useful for
        obtaining IDs to use in event filters.  Command Centre ships with about 1000 event types
        divided into
        about 150 groups.  Each event type is in one group.

        A site may rename the 30 groups dedicated to external event types—that is, event types for
        the site's own use—and may create another 970 event types for them.

        The results of this query vary with:

          - the server version,
          - extra Gallagher software installed on the site, and
          - changes to external event groups and types made by the customer.

        Event type identifiers do not often change between Command Centre versions, but the types in
        each group do.  Therefore if you choose to use groups in filters rather than types you may
        find that your filter catches more or fewer event types after a Command Centre upgrade.
        That may be desirable if, for example, you are intested in a class of event and you want to
        grow with CC as it grows new features.  If you want to catch all 'access denied's, for
        example.  We frequently add new varieties of 'access denied'.  If you do not want that, use
        types rather than groups.

        Do not code this URL into your application.  Take it from `events.eventGroups.href` in the
        results of `GET /api`.

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventGroups'
        403: { description: The site does not have the RESTEvents or RESTCreateEvents licence. }

  /api/fence_zones:
    get:
      tags:
        - "Fence Zones"
      summary: Search fence zones
      description: |
        This returns a summary of the fence zones matching your search criteria.

        The result will contain no more than 100 or 1000 fence zones (depending on your version), or
        as many as you asked for more in your request; you should follow the `next` link, if it is
        present, to collect the next batch.

        If your result set is empty it means your operator does not have a privilege that allows viewing
        fence zones, such as 'View Site', 'Edit Site', or 'Maintenance Override'.  Perhaps there are
        no fence zones in the divisions in which your operator has privileges, or your operator has
        no privileges at all.

        When you have loaded them all there will be no `next` link.

        Do not code this URL into your application.  Take it from the 'href' field in the
        `features.fenceZones.fenceZones` section of `/api`.

      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - name: "fields"
        <<: [*FIELDSDESC_SUM, *FZFIELDS]
      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"

      responses:
        200:
          description: |
            Success.  See the note in the description about privileges if your result set is empty.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FenceZoneSearch'
        403: { $ref: '#/components/responses/403nolicence' }

  /api/fence_zones/{id}:
    get:
      tags:
        - "Fence Zones"
      summary: Get details of a fence zone
      description: |
        This returns the detail of one fence zone.

        Follow the 'href' field in an [fence zone summary](#definition-Fence-Zone-summary) to get here.

      parameters:
      - $ref: "#/components/parameters/id"
      - name: "fields"
        <<: [*FIELDSDESC_DET, *MACROFIELDS]

      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FenceZoneDetail'
        403:
          description: |
            A server running 8.50 or earlier is missing the RESTStatus licence.  A server running
            8.60 or later is missing both the RESTStatus and RESTOverrides licences.
        404: {$ref: "#/components/responses/404fencezone"}

  /api/fence_zones/{id}/on:
    post:
      tags: ["Fence Zones"]
      summary: Turn on a fence zone
      description: |
        Sends an override to an alarm zone to turn it on until the next scheduled or
        manual change.
      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/requested_by"
      responses:
        204: { description: Success. }
        403: { $ref: "#/components/responses/403fencezoneoverride" }

  /api/fence_zones/{id}/off:
    post:
      tags: ["Fence Zones"]
      summary: Turn off a fence zone
      description: |
        Sends an override to an alarm zone to turn it off until the next scheduled or
        manual change.
      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/requested_by"
      responses:
        204: { description: Success. }
        403: { $ref: "#/components/responses/403fencezoneoverride" }

  /api/fence_zones/{id}/shunt:
    post:
      tags: ["Fence Zones"]
      summary: Shunt a fence zone
      description: |
        Sends an override to an alarm zone to shunt it, effectively preventing all
        communication with it.
      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/requested_by"
      responses:
        204: { description: Success. }
        403: { $ref: "#/components/responses/403fencezoneoverride" }

  /api/fence_zones/{id}/unshunt:
    post:
      tags: ["Fence Zones"]
      summary: Unshunt a fence zone
      description: |
        Sends an override to an alarm zone to unshunt it, re-enabling its communication.
      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/requested_by"
      responses:
        204: { description: Success. }
        403: { $ref: "#/components/responses/403fencezoneoverride" }

  /api/fence_zones/{id}/high_voltage:
    post:
      tags: ["Fence Zones"]
      summary: Change to high voltage
      description: |
        Sends an override to an alarm zone to change it to high voltage mode until the
        next scheduled or manual change.
      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/requested_by"
      responses:
        204: { description: Success. }
        403: { $ref: "#/components/responses/403fencezoneoverride" }

  /api/fence_zones/{id}/low_feel:
    post:
      tags: ["Fence Zones"]
      summary: Change to low feel
      description: |
        Sends an override to an alarm zone to change it to 'low feel' mode until the
        next scheduled or manual change.
      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/requested_by"
      responses:
        204: { description: Success. }
        403: { $ref: "#/components/responses/403fencezoneoverride" }

  /api/fence_zones/{id}/cancel:
    post:
      tags: ["Fence Zones"]
      summary: Cancel an override
      description: |
        Cancels an active override.

      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/requested_by"
      responses:
        204: { description: Success. }
        403: { $ref: "#/components/responses/403fencezoneoverride" }

  /api/fence_zones/{id}/updates:
    get:
      tags:
        - "Fence Zones"
      summary: Monitor a fence zone
      description: |
        See the [item status topic](#topic-Item-status) for how to use the updates APIs.

        Note that this API call is good for watching one item only; if you want to monitor several,
        you are better off with a [status subscription](events.html#status-subscriptions).

        Follow the 'updates' field in a door [summary](#definition-Fence-Zone-summary) or
        [details](#definition-Fence-Zone-detail) pages to get here.

      parameters:
      - $ref: "#/components/parameters/id"
      - name: "fields"
        <<: *UPDFIELDS
        schema: {enum: [ status, statusText, statusFlags, voltage ]}

      responses:
        200:
          description: |
            Success.  See the [introduction](#tag-Fence-Zones) for a description of the three status
            fields and the [detail page](#definition-Fence-Zone-detail) for `voltage`.
          content:
            application/json:
              schema:
                type: object
                example:
                  updates:
                    status: On - HV.
                    statusText: On - HV.
                    statusFlags:
                    - true
                    - highVoltage
                    voltage: 7300
                  next:
                    href: https://localhost:8904/api/fence_zones/556/updates/9_1
        403: { $ref: '#/components/responses/403nolicence' }
        404: {$ref: "#/components/responses/404fencezone"}

  /api/inputs:
    get:
      tags:
        - "Inputs"
      summary: Search inputs
      description: |
        This returns a summary of the inputs matching your search criteria.

        The result will contain no more than 100 or 1000 inputs (depending on your version), or as
        many as you asked for more in your request; you should follow the `next` link, if it is
        present, to collect the next batch.

        If your result set is empty it means your operator does not have the privilege to view any
        inputs, such as 'View Site', 'Edit Site', or 'Maintenance Override'.  Perhaps there are no
        inputs in the divisions in which your operator has privileges, or your operator has no
        privileges at all.

        When you have loaded them all there will be no `next` link.

        Do not code this URL into your application.  Take it from the 'href' field in the
        `features.inputs.inputs` section of `/api`.

      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - name: "fields"
        <<: [*FIELDSDESC_SUM_810,
             *OUTPUTFIELDS]      
      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"

      responses:
        200:
          description: |
            Success.  See the note in the description about privileges if your result set is empty.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputSearch'
        403: { $ref: '#/components/responses/403nolicence' }

  /api/inputs/{id}:
    get:
      tags:
        - "Inputs"
      summary: Get details of an input
      description: |
        This returns the detail of one input.

        Follow the 'href' field in an [input summary](#definition-InputSummary) to get here.

      parameters:
      - $ref: "#/components/parameters/id"
      - name: "fields"
        <<: [*FIELDSDESC_DET_810,
             *OUTPUTFIELDS]      

      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputDetail'
        403: { $ref: '#/components/responses/403nolicence' }
        404: {$ref: "#/components/responses/404input"}

  /api/inputs/{id}/shunt:
    post:
      tags: ["Inputs"]
      summary: Shunt an input
      description: |
        Sends an override to shunt an input, preventing all communication.

      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/requested_by"
      responses:
        204: { description: Success. }
        403: { $ref: "#/components/responses/403inputoverride" }

  /api/inputs/{id}/unshunt:
    post:
      tags: ["Inputs"]
      summary: Unshunt an input
      description: |
        Sends an override to unshunt an input, re-enabling communication.

      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/requested_by"
      responses:
        204: { description: Success. }
        403: { $ref: "#/components/responses/403inputoverride" }

  /api/inputs/{id}/isolate:
    post:
      tags: ["Inputs"]
      summary: Isolate an input
      description: |
        Sends an override to isolate an input.  An isolated input will not prevent an alarm zone
        from arming.

      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/requested_by"
      responses:
        204: { description: Success. }
        403: { $ref: "#/components/responses/403inputoverride" }

  /api/inputs/{id}/deisolate:
    post:
      tags: ["Inputs"]
      summary: De-isolate an input
      description: |
        Sends an override to end the isolation of an input.

      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/requested_by"
      responses:
        204: { description: Success. }
        403: { $ref: "#/components/responses/403inputoverride" }

  /api/inputs/{id}/updates:
    get:
      tags:
        - "Inputs"
      summary: Monitor an input
      description: |
        See the [item status topic](#topic-Item-status) for how to use the updates APIs.

        Note that this API call is good for watching one item only; if you want to monitor several,
        you are better off with a [status subscription](events.html#status-subscriptions).

        Follow the 'updates' field in an input [summary](#definition-Input-summary) or
        [details](#definition-Input-detail) pages to get here.

      parameters:
      - $ref: "#/components/parameters/id"
      - name: "fields"
        <<: [*UPDFIELDS, *UPDFIELDSENUM]

      responses:
        200:
          description: |
            Success.  See the [introduction](#tag-Inputs) for a description of the three status
            fields.
          content:
            application/json:
              schema:
                type: object
                example:
                  updates:
                    status: This Input is Open-Circuit Tampered.
                    statusText: This Input is Open-Circuit Tampered.
                    statusFlags:
                    - open
                    - tamper
                  next:
                    href: https://localhost:8904/api/inputs/2365/updates/9_1
        403: { $ref: '#/components/responses/403nolicence' }
        404: {$ref: "#/components/responses/404input"}

  /api/interlock_groups:
    get:
      tags:
        - "Interlock Groups"
      summary: Search interlock groups
      description: |

        **Not yet available.  API support for interlocks is still in development and may change in
        future versions.**
        
        This returns a summary of the interlock groups matching your search criteria.

        The result will contain no more than 100 or 1000 interlock groups (depending on your
        version), or as many as you asked for more in your request; you should follow the `next`
        link, if it is present, to collect the next batch.

        If your result set is empty it means your operator does not have a privilege that allows viewing
        interlock groups, such as 'View Site', 'Edit Site', or 'Maintenance Override'.  Perhaps there
        are no interlock groups in the divisions in which your operator has privileges, or your
        operator has no privileges at all.

        When you have loaded them all there will be no `next` link.

        Do not code this URL into your application.  Take it from the 'href' field in the
        `features.interlockGroups.interlockGroups` section of `/api`.

      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - name: "fields"
        <<: [*FIELDSDESC_SUM_810,
             *INTERLOCKFIELDS ]
      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"

      responses:
        200:
          description: |
            Success.  See the note in the description about privileges if your result set is empty.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterlockGroupSearch'
        403:
          description: |
            The site has neither the RESTStatus nor the RESTOverrides licence.

  /api/interlock_groups/{id}:
    get:
      tags:
        - "Interlock Groups"
      summary: Get details of an interlock group
      description: |
        **Not yet available.  API support for interlocks is still in development and may change in
        future versions.**
        
        This returns the detail of one interlock group.

        Follow the 'href' field in an [interlock group summary](#definition-Interlock-Group-summary)
        to get here.

      parameters:
      - $ref: "#/components/parameters/id"
      - name: "fields"
        <<: [*FIELDSDESC_DET_810,
             *INTERLOCKFIELDS]

      responses:
        200:
          description: Success.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/InterlockGroupDetail'}
        403:
          description: |
            The site has neither the RESTStatus nor the RESTOverrides licence.
        404: {$ref: "#/components/responses/404interlock"}

  /api/interlock_groups/{id}/disable:
    post:
      tags: ["Interlock Groups"]
      summary: Disable an interlock group.
      description: |
        **Not yet available.  API support for interlocks is still in development and may change in
        future versions.**
        
        Sends an override to disable an interlock group, allowing all doors to act independently.

      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/requested_by"
      responses:
        204: { description: Success. }
        403: { $ref: "#/components/responses/403interlockoverride" }

  /api/interlock_groups/{id}/enable:
    post:
      tags: ["Interlock Groups"]
      summary: Re-enable an interlock group.
      description: |
        **Not yet available.  API support for interlocks is still in development and may change in
        future versions.**
        
        Cancels the disabling override on an interlock group, causing the doors to return to
        interlocking behaviour.

      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/requested_by"
      responses:
        204: { description: Success. }
        403: { $ref: "#/components/responses/403interlockoverride" }

  /api/interlock_groups/{id}/updates:
    get:
      tags: ["Interlock Groups"]
      summary: Monitor an interlock group.
      description: |
        **Not yet available.  API support for interlocks is still in development and may change in
        future versions.**
        
        See the [item status topic](#topic-Item-status) for how to use the updates APIs.

        Note that this API call is good for watching one item only; if you want to monitor several,
        you are better off with a [status subscription](events.html#status-subscriptions).

        Follow the 'updates' field in an interlock group
        [summary](#definition-Interlock-Group-summary) or
        [details](#definition-Interlock-Group-detail) pages to get here.

      parameters:
      - $ref: "#/components/parameters/id"
      - name: "fields"
        <<: [*UPDFIELDS, *UPDFIELDSENUM]

      responses:
        200:
          description: |
            Success.  See the [introduction](#tag-Interlock-Groups) for a description of the status
            fields.
          content:
            application/json:
              schema:
                type: object
                example:
                  updates:
                    statusFlags: [ open ]
                  next:
                    href: "https://localhost:8904/api/interlock_groups/122322/updates/9_1"
        403: {$ref: '#/components/responses/403nolicence'}
        404: {$ref: "#/components/responses/404interlock"}

  /api/items:
    get:
      tags:
      - Items
      summary: Search items
      description: |
        This returns a batch of items matching the applied filters. By default, each page will
        contain up to 1000 items although this can be changed by setting the `top`
        parameter in the request URL.

        You will only receive items for which the REST operator has the necessary privilege.  To
        view PDFs, for example, the operator must have the 'View Personal Data Definitions'
        privilege.

        If more items are available, the response will contain a `next` link. Following
        that will return the next batch of items.

        Items will be in ID order unless you change it with `sort`.

        Do not code this URL into your application.  Take it from `items.items.href` in the results
        of `GET /api`.

      parameters:
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - name: type
        in: query
        description: |
          Only returns items that are of a type with this ID.  In versions up to 8.30 you could only
          specify one, but in 8.40 and later this can be a comma-separated list.
        schema:
          type: string
      - name: top
        in: query
        description: Sets the maximum number of items to return per page.
        schema:
          minimum: 1
          type: integer
          default: 100
      - $ref: "#/components/parameters/sort"
      - name: fields
        in: query
        description: |
          Return these fields in the search results.  The values you can list are the same as the field
          names in the details page.  Using it you can return everything on the summary page that you
          would find on the details page.  Separate values with commas.

          Use the special value `defaults` to return the fields you would have received had you not given
          the parameter at all.  Obviously only do that if you have more to add.

          The string must not contain any spaces.  Just alphanumerics, underscores, commas, and dots.

          Treat the string matches as case-sensitive.
        schema:
          type: string
          enum:
          - href
          - id
          - name
          - type
          - division
          - serverDisplayName
          - notes
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSearch'
        "403":
          description: The site does not have a REST licence.
          content: {}

  /api/items/{id}:

    get:
      tags:
      - Items
      summary: Get details of an item
      description: |
        This returns some basic fields for one item.  It returns the same information as the [item
        search](#operation--api-items-get) plus the item's division.

        Added in 8.40.
      parameters:
      - name: id
        in: path
        description: The ID of the item.
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: |
          Return these fields in the search results.  The values you can list are the same as the field
          names in the details page.  Using it you can return everything on the summary page that you
          would find on the details page.  Separate values with commas.

          Use the special value `defaults` to return the fields you would have received had you not given
          the parameter at all.  Obviously only do that if you have more to add.

          The string must not contain any spaces.  Just alphanumerics, underscores, commas, and dots.

          Treat the string matches as case-sensitive.
        schema:
          type: string
          enum:
          - href
          - id
          - name
          - type
          - division
          - serverDisplayName
          - notes
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDetail'
        "404":
          description: |
            That is not the href of an item.  At least not one that your operator has the privilege
            to view.
          content: {}

    patch:
      tags: [ "REST Clients" ]
      summary: Set status
      description: |
        This allows an integration to add a string to the status text of the REST Client item that
        represents your application.  That text is visible on a suitably-configured site plan or a
        Monitor Site viewer in Gallagher's operational client, or any other client that is watching
        items.

        Your integration can also set a flag indicating that it is in a fault condition and requires
        attention.  Doing that will raise an alarm, hopefully provoking a response from an operator.
        The alarm is stateful, restored only by your integration clearing the flag later when it is
        back in working order.

        A client can change its own status, but it can change no other's, and no other client can change its.

        Your client's operator does not need any privileges for this call.

        This feature is due in 9.20.

        Do not code this URL into your application.  Take it from `me.client.href` in the results of
        `GET /api`.

        ***This endpoint is still in development and may change behaviour before release.***

      parameters:
      - $ref: "#/components/parameters/id"

      requestBody:
        description: |
          The status text and fault condition of your API client.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RESTClientPATCH'
        required: true

      responses:
        200:
          description: |
            Success.  The server has feedback for you in the body of its response.
        204:
          description: Success.
        400:
          description: The server could not make sense of your payload.  Its response will contain feedback.
        403:
          description: You PATCHed the URL of a REST Client item, but not _your_ REST Client item.
        404:
          description: That is not the URL of a REST Client item your operator can see.
  
  /api/items/types:
    get:
      tags:
      - Items
      summary: List item types
      description: |
        Retrieves the list of all item types in the Command Centre system.  There are about 200.
        This is useful for obtaining type IDs to use in item search filters and (in 9.00) the
        canonical item type names.

        Note that some item types have a blank name.  These types are vestigial:  disregard them.

        Do not code this URL into your application.  Take it from `items.itemTypes.href` in the
        results of `GET /api`.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemTypes'
        "403":
          description: The site does not have a REST licence.
          content: {}

  /api/items/updates:
    get:
      tags:
      - Items
      summary: Retrieve status updates
      description: |
        Collects status updates from a subscription created using the [/api/items/updates
        POST](#operation--api-items-updates-post).

        This is a long poll, so if there are no updates waiting when you make the call it will block
        until some arrive or a timeout passes (about 50 seconds).

        If you receive a 404 from this call it means that more than 30 seconds passed between the
        server sending you the link and you GETting it, or the server restarted.  In either case it
        will have dropped your subscription:  you will need to create a new one with a fresh POST.

        Therefore your loop can be:

        1. Create a subscription with a [POST](#operation--api-items-updates-post).
        2. Process the statuses in the results, if there are any.
        3. Wait a second or two to avoid tight loops.
        4. GET the link from the results.  It may take up to a minute to respond.
        5. If 404, go to 1.
        6. Go to 2.

        ...plus the necessary exception handling, of course.

        Added in 8.30.

        Note that the first time you make this GET request it will return all the activity that came
        back from the POST.  There are other cases where the GET might return no updates or updates
        you have seen already (when some aspect of an item changes that your operator does not have
        the privilege to view, or an override is sent, for example).  While these two behaviours are
        not harmful they are also not particularly helpful, so future versions may differ.
      parameters:
      - name: bookmark
        in: query
        description: |
          Identifies your subscription and your position in the change list.  You should
          not to set this parameter:  it will be in the link that the server sends back to
          you.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemUpdate'
              example:
                updates:
                - id: "508"
                  status: Controller offline. 62 message(s) pending.
                  statusText: |-
                    Controller offline.
                    62 message(s) pending.
                  statusFlags:
                  - controllerOffline
                - id: "526"
                  status: Disarmed.
                  statusText: Disarmed.
                  statusFlags:
                  - disarmed
                next:
                  href: https://localhost:8904/api/items/updates?bookmark=3ec613a1-de01c6e_0
        "404":
          description: "The subscription does not exist, which probably means you\
            \ waited too long between calls."
          content: {}
        "403":
          description: The site does not have a REST licence.
          content: {}

    post:
      tags:
      - Items
      summary: Subscribe to status updates
      description: |
        Creates a subscription to status changes.  You POST a list of item IDs and the server
        returns the status flags of those items plus a link.  When you GET that link some time
        later the server will return the items that changed state between the two calls.

        If you do not GET the link within thirty seconds of the POST returning, the server will drop
        your subscription and free up the resources it had allocated to servicing it.  If that
        happens you will need to send this POST again to create a new subscription.

        Your operator must have view privileges on every item in the subscription otherwise you will
        receive a 4xx.

        The subscription notices changes in state, not in configuration, so an operator modifying an
        item will not cause anything to come out of this API unless the change in configuration also
        causes a change in state.

        Because this call returns the status of items, this call requires the RESTStatus licence.

        Added in 8.30.  9.30 corrected the 401 response to a 403.
      requestBody:
        description: |
          The body of the POST needs to contain a list of item IDs in an array called `itemIds`.
          Even though they look like small integers, these IDs are actually strings so don't
          forget the quotes.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemUpdateSubscription'
        required: false
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemUpdate'
              example:
                updates:
                - id: "508"
                  status: Controller offline. 62 message(s) pending.
                  statusText: |-
                    Controller offline.
                    62 message(s) pending.
                  statusFlags:
                  - controllerOffline
                - id: "526"
                  status: Disarmed.
                  statusText: Disarmed.
                  statusFlags:
                  - disarmed
                next:
                  href: https://localhost:8904/api/items/updates?bookmark=3ec613a1-de01c6e_0
        "400":
          description: The server could not parse the request body.  Check your JSON.
          content: {}
        "401":
          description: |
            In versions prior to 9.30 it means the operator does not have privilege to view the
            monitored items.
          content: {}
        "403":
          description: |
            The site does not have the RESTStatus licence or, in 9.30 and later, the operator does
            not have view privileges on all the monitored items.
          content: {}

  /api/locker_banks:
    get:
      tags: [ "Lockers" ]
      summary: Search locker banks
      description: |
        This returns locker banks matching your search criteria.

        The result will contain no more than 100 or 100 objects depending on your version; you
        should follow the `next` link, if it is present, to collect more.

        If the result set is empty it means there are no locker banks in the divisions in which the
        operator has a privilege that allows listing them, such as 'View lockers and assignments'.

        When you have loaded all the locker banks there will no `next` link.

        [Do not code this URL](#topic-Forward-compatibility--HATEOAS-) into your application.  Take
        it from the 'href' field in the `features.lockerBanks.lockerBanks` section of `/api`.

      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - name: "fields"
        in: query
        required: false
        schema:
          default: ['defaults']
          type: array
          items:
            type: string
            enum: [href, id, name, shortName, description, division, lockers, notes, lockers.defaults, lockers.id, lockers.href, lockers.name, lockers.shortName, lockers.description, lockers.division, lockers.notes, lockers.commands, lockers.assignments]

        description: |
          Sets which fields to return.  The values you can list are the same as the
          field names in the [details page](#definition-Locker-bank-detail).  Using it you can
          return everything on the search page that you would find on the details page.  Separate
          values with commas.

          If you specify any value for this parameter, the default no longer applies and you will
          only receive the fields you asked for.
          
          Use the special value `defaults` to return the locker bank fields you would have received
          had you not given the parameter at all.  Then you can add a comma and more fields.

          In v8.00 you will receive the href and internal ID even if you did not ask for them.  In
          8.10 you will not.  If you are going to send the fields parameter and need the href or ID,
          be explicit.

          All the field names beginning with `lockers.` arrived in v8.10.1112.  They affect the
          fields that appear inside the 'lockers' block.  The guideline for using `defaults` is:  if
          you want to receive less data, specify only the fields you want.  If you want to receive
          more, either list every field you want or simply use `lockers.defaults` plus your extras.

          Treat the string matches as case sensitive.

      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"

      responses:
        200: 
          description: "Success."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockerBankSearch'
        403:
          description: |
            The installation lacks a lockers licence, or it is missing RESTCardholders and
            RESTStatus and (in 8.60) RESTOverrides.

  /api/locker_banks/{id}:
    parameters:
    - $ref: "#/components/parameters/id"
    get:
      tags: [ "Lockers" ]
      summary: Get details of a locker bank
      description: |
        This returns details for a locker bank.  In the interest of forward compatibility follow the
        href in the [locker bank summary](#definition-Locker-bank-summary) to get here rather than
        [building the URL yourself](#topic-Forward-compatibility--HATEOAS-).

      parameters:
      - name: "fields"
        in: query
        required: false
        schema:
          default: ['defaults']
          type: array
          items:
            type: string
            enum: [href, id, name, shortName, description, division, notes, connectedController, lockers, lockers.defaults, lockers.connectedController, ...]
        description: |
          Sets which fields to return.  The values you can list are the same as the field names you
          would get in the [details page](#definition-Locker-bank-detail).  Use it to cut back on
          the size of the response for large locker banks.  Separate values with commas.

          Treat the string matches as case sensitive.

          In v8.00 you will receive the href and internal ID even if you did not ask for them.  In
          8.10 you will not.  If you are going to send the fields parameter and need the href or ID,
          be explicit.

      responses:
        200: 
          description: "Success."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockerBankDetail'
        403:
          description: |
            The installation lacks a lockers licence, or it is missing RESTCardholders and
            RESTStatus and (in 8.60) RESTOverrides.
        404:
          description: |
            Your REST operator does not have the privilege to view that locker bank.

  /api/lockers/{id}:
    parameters:
    - $ref: "#/components/parameters/id"
    get:
      tags: [ "Lockers" ]
      summary: Get details of a locker
      description: |
        This returns details for a locker.  Follow the href in the [locker bank
        summary](#definition-Locker-bank-summary) or [locker bank
        detail](#definition-Locker-bank-detail) to get here rather than [building the URL
        yourself](#topic-Forward-compatibility--HATEOAS-).

        Prior to v8.20 this endpoint was at `/api/locker_banks/{locker_bank_id}/lockers/{id}` .

      parameters:
      - name: "fields"
        in: query
        required: false
        schema:
          type: array
          default: ['defaults']
          items:
            type: string
            enum: [href, id, name, shortName, description, division, assignments, notes, commands, connectedController]
        description: |
          Sets which fields to return.  Use it to cut back on the size of the response for a locker
          with many assignments.  Separate values with commas.

          Treat the string matches as case sensitive.
      responses:
        200: 
          description: "Success."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockerDetail'
        403:
          description: |
            The installation lacks a lockers licence, or it is missing both RESTCardholders and
            RESTStatus and (in 8.60) RESTOverrides.
        404:
          description: |
            Your REST operator does not have the privilege to view that locker bank ('Locker
            assignments').

  /api/lockers/{id}/open:
    parameters:
    - $ref: "#/components/parameters/id"
    post:
      tags: [ "Lockers" ]
      summary: Open a locker
      description: |
        Sends an override to open a locker.

        You should get this URL from a [locker detail](#definition-Locker-detail) or [locker bank
        detail](#definition-Locker-bank-detail) rather than [building it
        yourself](#topic-Forward-compatibility--HATEOAS-).

        New in 8.10.1112.
      responses:
        200: { description: "Success.  Future versions will contain feedback from the server." }
        204: { description: Success. }
        403:
          description: |
            The site does not have the RESTOverrides licence (in which case the body of the result
            will say so), or your operator does not have 'Override - Open Locker' on the locker's
            division.
        404:
          description: |
            That is not the URL of a locker, or it is the URL of a locker your operator does not
            have the privilege to see.

  /api/lockers/{id}/quarantine:
    parameters:
    - $ref: "#/components/parameters/id"
    post:
      tags: [ "Lockers" ]
      summary: Quarantine a locker
      description: |
        Sends an override to quarantine a locker.  If the override succeeds, the locker will not be
        allocatable until its quarantine ends.

        The call will fail if the locker is allocated to a cardholder.

        You should get this URL from a [locker detail](#definition-Locker-detail) or [locker bank
        detail](#definition-Locker-bank-detail) rather than [building it
        yourself](#topic-Forward-compatibility--HATEOAS-).

        New in 9.10.
      responses:
        200: { description: "Success.  The response body will contain feedback from the server." }
        204: { description: Success. }
        400: { description: Check the response body for an error message.  A common fault is the locker being allocated. }
        403:
          description: |
            The site does not have the RESTOverrides licence (in which case the body of the result
            will say so), or your operator does not have 'Override' on the locker's division.
        404:
          description: |
            That is not the URL of a locker, or it is the URL of a locker your operator does not
            have the privilege to see.

  /api/lockers/{id}/cancel_quarantine:
    parameters:
    - $ref: "#/components/parameters/id"
    post:
      tags: [ "Lockers" ]
      summary: Un-quarantine a locker
      description: |
        Sends an override to remove the quarantine from a locker, making it available for
        allocation.

        You should get this URL from a [locker detail](#definition-Locker-detail) or [locker bank
        detail](#definition-Locker-bank-detail) rather than [building it
        yourself](#topic-Forward-compatibility--HATEOAS-).

        New in 9.10.
      responses:
        200: { description: "Success.  Future versions will return feedback from the server." }
        204: { description: Success. }
        403:
          description: |
            The site does not have the RESTOverrides licence (in which case the body of the result
            will say so), or your operator does not have 'Override' on the locker's division.
        404:
          description: |
            That is not the URL of a locker, or it is the URL of a locker your operator does not
            have the privilege to see.
       
  /api/macros:
    get:
      tags:
        - "Macros"
      summary: Search macros
      description: |
        This returns a summary of the macros matching your search criteria.

        The result will contain no more than 100 or 1000 macros (depending on your version), or as
        many as you asked for more in your request; you should follow the `next` link, if it is
        present, to collect the next batch.

        If your result set is empty it means your operator does not have the privilege to view any
        macros, such as 'View Site', 'Run Macros', or 'Schedule and Run Macros'.  Perhaps there are
        no macros in the divisions in which your operator has privileges, or your operator has no
        privileges at all.

        When you have loaded them all there will be no `next` link.

        Do not code this URL into your application.  Take it from the 'href' field in the
        `features.macros.macros` section of `/api`.

      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - name: "fields"
        <<: [*FIELDSDESC_SUM, *MACROFIELDS]
      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"

      responses:
        200:
          description: |
            Success.  See the note in the description about privileges if your result set is empty.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MacroSearch'}
        403: {$ref: '#/components/responses/403nolicence'}

  /api/macros/{id}:
    get:
      tags:
        - "Macros"
      summary: Get details of a macro
      description: |
        This returns the detail of one macro.

        Follow the 'href' field in an [macro summary](#definition-MacroSummary) to get here.

      parameters:
      - name: "id"
        in: path
        required: true
        description: The ID of the macro.
        schema:
          type: string
      - name: "fields"
        <<: [*FIELDSDESC_DET, *MACROFIELDS]

      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MacroDetail'
        403: {$ref: '#/components/responses/403nolicence'}
        404: {$ref: "#/components/responses/404macro"}

  /api/macros/{id}/run:
    post:
      tags: ["Macros"]
      summary: Run a macro
      description: |
        Sends a run request to a macro.
      parameters:
      - {in: path, name: id, required: true, description: "The ID of the macro.", schema: {type: string}}
      - $ref: "#/components/parameters/requested_by"
      responses:
        204: { description: Success. }
        403: { $ref: "#/components/responses/403macrooverride" }

  

  /api/operator_groups:
    get:
      tags:
        - Operator groups
      summary: Search operator groups

      description: |

        This returns operator groups matching your search criteria.

        The result will contain a batch of groups; you should follow the `next` link, if it is
        present, to collect the next batch.

        When you have loaded all the operator groups there will be no `next` link.

        If your result set is empty it means either your search terms were too tight or your
        operator does not have the privilege to view any operator groups.  Perhaps there are none in
        the divisions in which your operator has 'View operators' or 'Edit operators', or your
        operator does not have those privileges at all.

        This request does not return the group's cardholders.  That would make the results unwieldy.
        Instead, it provides a separate link.

        Adding, deleting, or modifying operator groups between calls to this API will not affect the
        pagination of its results if you sort by ID.

        You can find the URL for this call in the `features.operatorGroups.operatorGroups.href`
        field of `/api`.  In the interest of forward compability, [do not build it
        yourself](#topic-Forward-compatibility--HATEOAS-).

        Added in 8.50.

      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - name: "fields"
        in: query
        required: false
        schema:
          type: array
          default: ['defaults']
          items:
            type: string 
            enum: [href, id, name, description, division, notes, cardholders, divisions]
            description: |
              Sets which fields to return.  The values you can list are the same as the field names
              in the [details page](#definition-Operator-group-detail).  Using it you can return
              everything on the search page that you would find on the details page.  Separate
              values with commas.
              
              Use the special value `defaults` to return the fields you would have received had you
              not given the parameter at all.  Add more after a comma.
              
              Treat the string matches as case sensitive.
      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"

      responses: 
        200:
          description: |
            Success.  See the note in the description about privileges if your result set is empty.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatorGroupSearch'
        403: { description: "The site does not have the RESTCardholders licence." }

  /api/operator_groups/{id}:
    parameters:
    - $ref: "#/components/parameters/id"
    get:
      tags:
        - Operator groups
      summary: Get details of an operator group

      description: |
        In addition to the group's vitals and a link to the membership document, this call returns
        the divisions in which the operator groups grants its privileges.

        Note that you can obtain the same results by adding
        `fields=defaults,description,division,divisions,cardholders` to a
        [search](#operation--api-operator_groups-get).

        You can find the URL for this call in the operator group search results and in a
        cardholder's `operatorGroups` array.  In the interest of forward compability, [do not build
        it yourself](#topic-Forward-compatibility--HATEOAS-).

        Added in 8.50.
      parameters:
      - name: "fields"
        in: query
        required: false
        schema:
          default: ['defaults']
          type: array
          items:
            type: string
            enum: [defaults, href, id, name, description, division, notes, cardholders, divisions]
        description: |
          Sets which fields to return.  The values you can list are the same as the field names in
          the [detail results](#definition-Operator-group-detail).  Use it to return the notes,
          which don't appear by default.  Separate values with commas.

          Treat the string matches as case sensitive.

      responses: 
        200: 
          description: "Success."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatorGroupDetail'
        403: { description: "The site does not have the RESTCardholders licence." }
        404:
          description: |
            That is not the URL of an operator group, or it is the URL of an operator group that the
            operator does not have the privilege to see ('View' or 'Edit Operators').

  /api/operator_groups/{id}/cardholders:
    parameters:
    - $ref: "#/components/parameters/id"
    get:
      tags:
        - Operator groups
      summary: Get membership of an operator group

      description: |-

        This lists all cardholders who are members of the group identified by the request URL.  It
        does not paginate the results, so there is no `next` link.

        Operator groups cannot contain other operator groups, so every cardholder benefiting from
        this operator group comes out of this call.

        If your operator does not have the privilege to view a cardholder item you will receive its
        name but not its href (since following the href would 404).

        You can find this call's URL in the `cardholders` block of an operator group.  In the
        interest of forward compability, [do not build it
        yourself](#topic-Forward-compatibility--HATEOAS-).

        Added in 8.50.

        There are two hrefs per cardholder.  The lower-level href is the identifier for the
        cardholder, found throughout this API.  The higher-level `href` field only appears if you
        ask for it using the `fields` query parameter, and only if the server is 8.70 or later.  It
        refers to the cardholder's membership in the operator group.  If you DELETE it, you will
        remove the cardholder from this operator group (which will demote them from an operator to a
        regular cardholder if this was their last remaining operator group).

      parameters:
      - name: "fields"
        in: query
        required: false
        schema:
          type: array
          default: ['defaults']
          items:
            type: string
            enum: [ defaults, cardholder, href ]

        description: |
          Specifies the fields you want in the search results.  The only two candidates are
          `cardholder` and `href`.  The default is `fields=defaults`, which is the same as
          `fields=cardholder`.  Separate values with commas.

      responses: 
        200: 
          description: "Success."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OperatorGroupMembership'
              example:
                cardholders:
                - href: https://localhost:8904/api/cardholders/325/operator_groups/EBDRSD
                  cardholder:
                    name: "Boothroyd, Algernon"
                    href: https://localhost:8904/api/cardholders/325
                - href: https://localhost:8904/api/cardholders/329/operator_groups/AFADEMED
                  cardholder:
                    name: Miles Messervy
            
        4xx:
          description: |
            The ID is invalid, or it is valid but you do not have privileges for the operator group.
            Check the body of the result for a description of the problem.

  /api/outputs:
    get:
      tags:
        - "Outputs"
      summary: Search outputs
      description: |
        This returns a summary of the outputs matching your search criteria.

        The result will contain no more than 100 or 1000 outputs (depending on your version), or as
        many as you asked for more in your request; you should follow the `next` link, if it is
        present, to collect the next batch.

        If your result set is empty it means your operator does not have the privilege to view any
        outputs, such as 'View Site', 'Edit Site', or 'Override'.  Perhaps there are no outputs in
        the divisions in which your operator has privileges, or your operator has no privileges at
        all.

        When you have loaded them all there will be no `next` link.

        Do not code this URL into your application.  Take it from the 'href' field in the
        `features.outputs.outputs` section of `/api`.

      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - name: "fields"
        <<: [*FIELDSDESC_SUM, *OUTPUTFIELDS]
      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"

      responses:
        200:
          description: |
            Success.  See the note in the description about privileges if your result set is empty.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OutputSearch'}
        403: {$ref: '#/components/responses/403nolicence'}

  /api/outputs/{id}:
    get:
      tags:
        - "Outputs"
      summary: Get details of an output
      description: |
        This returns the detail of one output.

        Follow the 'href' field in an [output summary](#definition-Output-summary) to get here.

      parameters:
      - $ref: "#/components/parameters/id"
      - name: "fields"
        <<: [*FIELDSDESC_DET, *OUTPUTFIELDS]

      responses:
        200:
          description: Success.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OutputDetail'}
        403: {$ref: '#/components/responses/403nolicence'}
        404: {$ref: "#/components/responses/404output"}

  /api/outputs/{id}/on:
    post:
      tags: ["Outputs"]
      summary: Turn on an output
      description: |
        Sends an override to close an output.

        If you send an end time in the body, the override will only stay in effect until
        then.
        
      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/requested_by"
      requestBody:
        description: Optional
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OverrideEndTime'

      responses:
        204: { description: Success. }
        400: { $ref: "#/components/responses/400badbody" }
        403: { $ref: "#/components/responses/403outputoverride" }

  /api/outputs/{id}/pulse:
    post:
      tags: ["Outputs"]
      summary: Pulse an output
      description: |
        Sends an override to pulse an output.

        Pulsing an output differs from turning it on in two ways:

          - You cannot specify a duration for it to stay activated, because that comes from the
            output's configuration.

          - A pulsed output will stay on for its pulse time even if another event seeks to
            deactivate it (an 'off' override will still deactivate the output).

        Added in 8.50.

      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/requested_by"
      responses:
        204: { description: Success. }
        400: { description: The output is not configured for pulsing (8.70 and later only). }
        403: { $ref: "#/components/responses/403outputoverride" }

  /api/outputs/{id}/off:
    post:
      tags: ["Outputs"]
      summary: Turn off an output
      description: |
        Sends an override to open an output.

        If you send an end time in the body, the override will only stay in effect until
        then.
        
      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/requested_by"
      requestBody:
        description: Optional
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OverrideEndTime'

      responses:
        204: { description: Success. }
        400: { $ref: "#/components/responses/400badbody" }
        403: { $ref: "#/components/responses/403outputoverride" }

  /api/outputs/{id}/cancel:
    post:
      tags: ["Outputs"]
      summary: Cancel an override
      description: |
        Cancels an override, returning the output to its previous state.

      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/requested_by"
      responses:
        204: { description: Success. }
        403: { $ref: "#/components/responses/403outputoverride" }

  /api/outputs/{id}/updates:
    get:
      tags:
        - "Outputs"
      summary: Monitor an output
      description: |
        See the [item status topic](#topic-Item-status) for how to use the updates APIs.

        Note that this API call is good for watching one item only; if you want to monitor several,
        you are better off with a [status subscription](events.html#status-subscriptions).

        Follow the 'updates' field in an output [summary](#definition-Output-summary) or
        [details](#definition-Output-detail) pages to get here.

      parameters:
      - $ref: "#/components/parameters/id"
      - name: "fields"
        <<: [*UPDFIELDS, *UPDFIELDSENUM]

      responses:
        200:
          description: |
            Success.  See the [introduction](#tag-Outputs) for a description of the three status
            fields.
          content:
            application/json:
              schema:
                type: object
                example:
                  updates:
                    status: This Output is Off.
                    statusText: This Output is Off.
                    statusFlags:
                    - open
                  next:
                    href: https://localhost:8904/api/outputs/2365/updates/9_1
        403: {$ref: '#/components/responses/403nolicence'}
        404: {$ref: "#/components/responses/404output"}

  /api/personal_data_fields:
    get:
      tags: [ "PDF definitions" ]
      summary: Search PDF definitions
      description: |
        This returns the PDF definitions you are privileged to view.  You will need the 'View
        Personal Data Definitions' privilege, or its 'Edit' equivalent, on a PDF's division in order
        to see it.

        The result will contain no more than 100 or 1000 objects, depending on your version; you
        should follow the `next` link, if it is present, to collect more.  When you have loaded all
        the PDF definitions there will no `next` link.

        [Do not code this URL](#topic-Forward-compatibility--HATEOAS-) into your application.  Take
        it from the href in the `features.personalDataFields.personalDataFields` section of `/api`.

      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - $ref: "#/components/parameters/pdf_fields"
      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"

      responses:
        200: 
          description: "Success."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PDFDefinitionSearch'
        403:
          description: The site does not have the RESTCardholders or RESTEvents licence.

    post:
      x-badges: [ <<: *BADGE_BETA ]
      tags: [ "PDF definitions" ]
      summary: Create [coming]
      description: |
        Creates a new personal data definition.

        [Do not code this URL](#topic-Forward-compatibility--HATEOAS-) into your application.  Take
        it from the `href` field in the `features.personalDataFields.personalDataFields.href` field
        of `GET /api`.

        When successful it returns a location header containing the address of the new PDF.

        Note that you can only create one per POST.

        This call requires the RESTConfiguration licence.

      requestBody:
        description: |
          This example shows the fields that you can set when creating a PDF.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PDFDefinition'
        required: true

      responses: 
        201: 
          description: "Success."
          headers:
            location:
              schema:
                type: string
                format: url
              description: The href of the new PDF.
        400:
          description: |
            The body of the POST did not describe a valid PDF.

            If you see 'Invalid Personal Data Field JSON object', the server could not parse the
            JSON in the body of your POST.  Remember to quote all strings, especially those than
            contain @ symbols.

        403:
          description: |
            The operator does not have a privilege that allows creating PDFs or the server does not
            have the 'RESTConfiguration' licence.
          
  /api/personal_data_fields/{id}:
    parameters:
    - $ref: "#/components/parameters/id"
    get:
      tags: [ "PDF definitions" ]
      summary: Get details of a PDF definition
      description: |
        This returns details for a PDF definition.  Follow the href in the
        [summary](#definition-PDF-definition) to get here, rather than [building it
        yourself](#topic-Forward-compatibility--HATEOAS-).

      parameters:
      - $ref: "#/components/parameters/pdf_fields"

      responses:
        200: 
          description: "Success."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PDFDefinition'
        403:
          description: |
            The site does not have the RESTCardholders or RESTEvents licence
        404:
          description: |
            The operator does not have a privilege that allows viewing that PDF's definition ('View'
            or 'Edit Personal Data Definition'), or the PDF's own access control is hiding it from
            the operator.

    patch:
      x-badges: [ <<: *BADGE_BETA ]
      tags: [ "PDF definitions" ]
      summary: Update [coming]
      description: |
        This is the call you use to update a PDF.  Follow the href in the
        [summary](#definition-PDF-definition) to get here, rather than [building it
        yourself](#topic-Forward-compatibility--HATEOAS-).

        The PATCH expects a document in the same format as the [the PDF detail](#definition-PDF-definition).

        It requires the RESTConfiguration licence.

      requestBody:
        description: |
          There are no mandatory fields when PATCHing.  There are, however, some fields you cannot
          change.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PDFDefinition'
        required: true

      responses:
        200:
          description: |
            Success.  Future versions will return feedback from the server about your PATCH.
        204:
          description: "Success."
        400:
          description: |
            The body of the PATCH did not describe a valid PDF.  PDFs have many rules, easily
            enforced in a graphical interface but less so in an API.  See the body of the response
            for help on what went wrong.

        403:
          description: |
            The operator has a privilege that allows viewing the item but not modifying it, or you
            tried to set the division to one you cannot configure, or the server is missing the
            necessary licence.

            You need the 'Edit Personal Data Definitions' privilege on the item you are changing,
            which means you need on it on its current division.  You also need it on the new
            division, if you are changing that.

            This is also the response when the server does not have the 'RESTConfiguration' licence.

        404:
          description: |
            That is not the URL of a PDF or your operator does not have the privilege to view
            it.  This probably means you have built the URL yourself instead of taking it from the
            results of a [GET](#operation--api-personal_data_fields-get).

        409:
          description: |
            The item is locked for editing by another operator.  The body of the response will
            tell you which operator is holding the lock.

    delete:
      x-badges: [ <<: *BADGE_BETA ]
      tags: [ "PDF definitions" ]
      summary: Remove [coming]
      description: |
        This call removes a PDF item from Command Centre.  Follow the href in the
        [summary](#definition-PDF-definition) to get here, rather than [building it
        yourself](#topic-Forward-compatibility--HATEOAS-).

        It requires the RESTConfiguration licence.

      responses: 
        200: { description: "Success." }
        204: { description: "Success." }
        400:
          description: |
            Deleting failed.  This happens when the PDF is in use.

        403:
          description: |
            The operator has the permission to view the item but not delete it, or the server does
            not have the 'RESTConfiguration' licence.
        404:
          description: |
            That is not the URL of a PDF, or the operator is not privileged to view it.

  /api/receptions:
    get:
      tags: [ "Receptions" ]
      summary: Search receptions
      description: |
        This returns the receptions you are privileged to view.

        The result will contain no more than 100 or 1000 objects depending on your version; you
        should follow the `next` link, if it is present, to collect more, or use the `top` parameter
        to get more per page.  Receptions are small, so setting a limit of 1000 is sensible.

        When you have loaded all the receptions there will no `next` link.

        [Do not code this URL](#topic-Forward-compatibility--HATEOAS-) into your application.  Take
        it from the href in the `features.receptions.receptions` section of `/api`.

      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - $ref: "#/components/parameters/reception_fields"
      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"

      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceptionSearch'
        403:
          description: The site does not have the RESTCardholders licence.

  /api/receptions/{id}:
    parameters:
    - $ref: "#/components/parameters/id"
    get:
      tags: [ "Receptions" ]
      summary: Get details of a reception
      description: |
        This returns details for a reception.  Follow the href in the
        [summary](#definition-Reception-search) to get here, rather than [building it
        yourself](#topic-Forward-compatibility--HATEOAS-).

      parameters:
      - $ref: "#/components/parameters/reception_fields"

      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reception'
        403:
          description: |
            The site does not have the RESTCardholders or RESTEvents licence
        404:
          description: |
            The operator does not have a privilege that allows viewing that reception's definition
            ('View Site', 'Edit Site', 'View Visits', 'Edit Visits', or 'Manage Receptions').

  /api/cardholders/redactions:
    get:
      tags: [ "Redactions" ]
      summary: Search redactions
      description: |
        This returns all cardholders' redactions.  Paginated.

      parameters:
      - name: cardholder
        in: query
        description: |
          Limits the results to redactions to cardholders with these IDs.  Separate with commas.
        schema:
          type: string
      - name: status
        in: query
        description: |
          Limits the results to redactions with this status.  Separate with commas.
        schema:
          type: string
          enum:
          - pending
          - inProgress
          - cancelled
          - done
          - failed
      - name: type
        in: query
        description: |
          Limits the results to redactions of this type.  Separate with commas.
        schema:
          type: string
          enum:
          - normalEvents
          - cardholder
      - name: after
        in: query
        description: |
          Limits the results to redactions that were scheduled to occur after this time.
        schema:
          type: string
          format: date-time
      - name: before
        in: query
        description: |
          Limits the results to redactions that were scheduled to occur before this time.
        schema:
          type: string
          format: date-time
      - name: fields
        in: query
        description: |
          Specifies the fields you want in the results.

          Treat the string matches as case sensitive:  use `lastName` rather than `lastname`.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            enum: [ before cardholder finishTime href redactionOperator status type when ]
      - $ref: '#/components/parameters/pos'

      responses:
        200:
          description: An array of redactions, and a link to the next page if any.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Redaction'
                  next:
                    type: object
                    properties:
                      href:
                        type: string
                        format: url
                        example: https://localhost:8904/cardholders/redactions?top=1&pos=625
        403:
          description: The site does not have the RESTCardholders licence.
    post:
      tags: [ "Redactions" ]
      summary: Schedule a redaction
      description: |
        Schedules a cardholder redaction.

      requestBody:
        $ref: '#/components/requestBodies/RedactionPOSTExample'
      responses:
        201:
          description: "Success."
        400:
          description: |
            The cardholder does not exist.
        403:
          description: |
            The operator does not have permissions to redact or to delete a cardholder, 
            or redactions are not enabled on the server,
            or the server is not licensed for cardholder operations.
    delete:
      tags: [ "Redactions" ]
      summary: Cancel a redaction
      description: |
        This deletes a redaction record.  It must be pending.  Take the URL from the results of a
        redaction search.
        
        Note that the only way to modify a redaction is to delete it and create a new one for the
        same cardholder.  This is due to concerns about a redaction's effect on auditing.
      responses:
        201:
          description: "Success."
        403:
          description: |
            The operator does not have permissions to redact or to delete a cardholder, 
            or the server is not licensed for cardholder operations.
        404:
          description: |
            No such redaction, or your operator cannot see it.

  /api/roles:
    get:
      tags: [ "Roles" ]
      summary: Search
      description: |
        This returns the roles you are privileged to view.

        The result will contain no more than 100 or 1000 objects depending on your version; you
        should follow the `next` link, if it is present, to collect more, or use the `top` parameter
        to get more per page.  Roles are small, so a limit of 1000 is sensible.

        When you have loaded all the roles there will no `next` link.

        [Do not code this URL](#topic-Forward-compatibility--HATEOAS-) into your application.  Take
        it from the href in the `features.roles.roles` section of `/api`.

      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"

      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema:
                description: |
                  An array of roles, and a `next` link for more.
                type: object
                properties:
                  results:
                    type: array
                    description: An array of roles.
                    example:
                    - name: Supervisor
                      id: "1383"
                      href: https://localhost:8904/api/roles/1383
                    - name: Contract manager
                      id: "1399"
                      href: https://localhost:8904/api/roles/1399
                      serverDisplayName: ruatoria.satellite.int
                    items:
                      $ref: '#/components/schemas/Role'
                  next:
                    type: object
                    properties:
                      href:
                        type: string
                        format: url
                        example: https://localhost:8904/api/roles?pos=1000&sort=id
                    description: The link to the next page of results.  Absent if you have retrieved
                      them all.
        403:
          description: The site does not have the RESTCardholders licence.

    post:
      tags:
        - Roles
      summary: Create [coming]
      description: |
        Creates a new role.

        [Do not code this URL](#topic-Forward-compatibility--HATEOAS-) into your application.  Take
        it from the `href` field in the `features.roles.roles.href` field of `GET /api`.

        When successful it returns a location header containing the address of the new role.

        Note that you can only create one per POST.

        This call requires the RESTConfiguration licence.

      requestBody:
        description: |
          This example shows the fields that you can set when creating a role.
          There are no mandatory fields when PATCHing a role, but you must specify a division when
          creating one.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true

      responses: 
        201: 
          description: "Success."
          headers:
            location:
              schema: {type: string, format: url}
              description: The href of the new role.
        400:
          description: |
            The body of the POST did not describe a valid role.

            If you see 'Invalid Role JSON object', the server could not parse the JSON in
            the body of your POST.  Remember to quote all strings, especially those than contain @
            symbols.

        403:
          description: |
            The operator does not have a privilege that allows creating roles, or the server does
            not have the 'RESTConfiguration' licence.
          
  /api/roles/{id}:
    parameters:
    - $ref: "#/components/parameters/id"

    patch:
      tags:
      - Roles
      summary: Update [coming]
      description: |
        This is the call you use to update a role.  Take its URL from a cardholder or a role search
        rather than [building it yourself](#topic-Forward-compatibility--HATEOAS-).

        The PATCH expects a document in the same format as the [the role detail](#definition-Role).

        This call requires the RESTConfiguration licence.

      requestBody:
        description: |
          There are no mandatory fields when PATCHing a role, but you must specify a division when
          creating one.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true

      responses:
        200:
          description: |
            Success.  Future versions will return feedback from the server about your PATCH.
        204:
          description: "Success."
        400:
          description: |
            The body of the PATCH did not describe a valid card type.  Card types have many rules,
            easily enforced in a graphical interface but less so in an API.  See the body of the
            response for help on what went wrong.

        403:
          description: |
            The operator has a privilege that allows viewing the item but not modifying it, or you
            tried to set the division to one you cannot configure, or the server is missing the
            necessary licence.

            You need the 'Configure Site' privilege on the item you are changing, which means you need
            on it on the item's current division.  You also need it on the new division, if you are
            changing that.

            This is also the response when the server does not have the 'RESTConfiguration' licence.

        404:
          description: |
            That is not the URL of a card type or your operator does not have the privilege to view
            it.  This probably means you have built the URL yourself instead of taking it from the
            results of a [GET](#operation--api-card_types-get).

        409:
          description: |
            The item is locked for editing by another operator.  The body of the response will
            tell you which operator is holding the lock.

    delete:
      tags: [ Roles ]
      summary: Remove [coming]
      description: |
        This call removes a role item from Command Centre.  Take its URL from a cardholder or a role
        search rather than [building it yourself](#topic-Forward-compatibility--HATEOAS-).

        It requires the RESTConfiguration licence.

      responses: 
        200: { description: "Success." }
        204: { description: "Success." }
        400:
          description: |
            Deleting failed.  This happens when the role is in use.  The usual reason is that
            cardholders are still connected by the role you are attempting to remove.

        403:
          description: |
            The operator has the permission to view the item but not delete it, or the server does
            not have the 'RESTConfiguration' licence.
        404:
          description: |
            That is not the URL of a role, or the operator is not privileged to view it.

  /api/schedules:
    get:
      tags:
      - Schedules
      summary: Search schedules
      description: |
        This returns a summary of the schedules matching your search criteria.

        The result will contain no more than 100 or 1000, depending on your version, or as many as
        you asked for more in your request; you should follow the `next` link, if it is present, to
        collect the next batch.

        If your result set is empty it means your operator does not have the privilege to view
        schedules, such as 'View Schedules', 'Edit Schedules', or 'Schedule Access Zone'.  Perhaps
        there are no schedules in the divisions in which your operator has privileges, or your
        operator has no privileges at all.

        Note that the privilege 'Schedule Access Zone' only lets you see Access Zone schedules, not
        the other five types.

        When you have loaded them all there will be no `next` link.

        Do not code this URL into your application.  Take it from the 'href' field in the
        `features.schedules.schedules` section of `/api`.

        Added in 8.50.
      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - name: "fields"
        <<: [*FIELDSDESC_SUM_810,
             *SCHEDULEFIELDS]
      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"
      responses:
        "200":
          description: |
            Success.  See the note in the description about privileges if your result set is empty.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleSearch'
        "403":
          description: |
            The site does not have the RESTStatus, RESTOverrides, or RESTCardholders licence.
          content: {}
    post:
      tags:
      - Schedules
      summary: Create a schedule
      description: |
        This is how you create a new schedule.

        Your POST needs a body containing JSON in the same from received from a GET, containing a
        division and type, and (if you want it to be useful) `dayCategories`.

        Do not code this URL into your application.  Take it from the 'href' field in the
        `features.schedules.schedules` section of `/api`.

        Added in 8.50.
      requestBody:
        description: |
          The only fields you must supply in a POST are `division` and `type`.  The server can
          make up a name for you, and is happy to leave the timetable empty.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleDetail'
        required: true
      responses:
        "201":
          description: Success.
          headers:
            location:
              description: The href of the new schedule.
              schema:
                type: string
                format: url
          content: {}
        "400":
          description: |
            The parameters are invalid.  Check the body of the response: it may be helpful.

            If you see 'No schedule found', the server could not parse the JSON in the body of your
            POST.  Remember that the `state` field is an array.
          content: {}
        "403":
          description: |
            The operator does not have a privilege that allows creating schedules, or the site does
            not have any of the RESTCardholders, RESTOverrides, RESTStatus, or (after 9.00)
            RESTConfiguration licences.
          content: {}
      x-codegen-request-body-name: not rendered
  /api/schedules/{id}:
    get:
      tags:
      - Schedules
      summary: Get details of a schedule
      description: |
        This returns the detail of one schedule.

        Follow the 'href' field in an [schedule summary](#definition-Schedule-summary) to get here.
      parameters:
      - name: id
        in: path
        description: The ID of the schedule.
        required: true
        schema:
          type: string
      - name: fields
        in: query
        description: |
          This instructs the server to return only these fields in the details page instead of the default set.  The values you can list
          are the same as the field names you would see in the results.  Use it to cut back on the size
          of the response.  Separate values with commas.

          Treat the string matches as case-sensitive.
        schema:
          type: string
          enum:
          - href
          - name
          - description
          - division
          - notes
          - type
          - dayCategories
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleDetail'
        403: {$ref: '#/components/responses/403nolicence'}
        "404":
          $ref: '#/components/responses/404schedule'
    delete:
      tags:
      - Schedules
      summary: Delete a schedule
      description: |
        Deletes the schedule identified by the request's URL.

        Added in 8.50.
      parameters:
      - name: id
        in: path
        description: |
          The ID of the schedule.  Do not add it yourself:  you will receive this URL from other
          API calls.
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          description: |
            You cannot delete a schedule that is in use.  The body of the 400 response will tell you
            if that is the case.  One way to find out which items are holding you up is to GET the
            same URL and look in the `scheduledItems` block.
          content: {}
        "403":
          description: |
            The operator does not have a privilege that allows deleting that schedule ('Edit
            Schedules'), or the site does not have any of the RESTCardholders, RESTOverrides,
            RESTStatus, or (after 9.00) RESTConfiguration licences.
          content: {}
        "404":
          $ref: '#/components/responses/404schedule'
    patch:
      tags:
      - Schedules
      summary: Modify a schedule
      description: |
        Modifies a schedule according to the body of the PATCH.

        Added in 8.50.
      parameters:
      - name: id
        in: path
        description: |
          The ID of the schedule.  Do not add it yourself:  you will receive this URL from other
          API calls.
        required: true
        schema:
          type: string
      requestBody:
        description: |
          You do not need to supply any fields in the body of this PATCH, but if you want it to
          achieve something you should add at least one.  Probably `dayCategories`.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleDetail'
        required: true
      responses:
        "200":
          description: |
            Success.  Future versions will return feedback from the server about your PATCH.
          content: {}
        "204":
          description: Success.
          content: {}
        "400":
          description: |
            The parameters are invalid.  Check the body of the response: it may be helpful.

            If you see 'No schedule found', the server could not parse the JSON in the body of your
            request.  Remember that the `state` field is an array.
          content: {}
        "403":
          description: |
            The operator does not have a privilege that allows modifying that schedule, or the site
            does not have any of the RESTCardholders, RESTOverrides, RESTStatus, or (after 9.00)
            RESTConfiguration licences.
          content: {}
        "404":
          $ref: '#/components/responses/404schedule'

  /api/visits:
    get:
      tags: [ "Visits" ]
      summary: Search visits
      description: |
        This returns the visits you are privileged to view.

        The result will contain no more than 100 or 1000 objects depending on your version; you
        should follow the `next` link, if it is present, to collect more, or use the `top` parameter
        to get more per page.

        When you have loaded all the visits there will no `next` link.

        [Do not code this URL](#topic-Forward-compatibility--HATEOAS-) into your application.  Take
        it from the href in the `features.visits.visits` section of `/api`.

        Visits are new to 8.50.

      parameters:
      - $ref: "#/components/parameters/sort"
      - $ref: "#/components/parameters/top"
      - $ref: "#/components/parameters/name"
      - $ref: "#/components/parameters/division"
      - $ref: "#/components/parameters/directDivision"
      - $ref: "#/components/parameters/description"
      - $ref: "#/components/parameters/visit_fields"
      - $ref: "#/components/parameters/pos"
      - $ref: "#/components/parameters/skip"

      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema:
                description: |
                  An array of visits, and a `next` link for more.

                properties:
                  results:
                    type: array
                    description: An array of visits. ***TODO*** change from the detail to the  summary
                    items: { $ref: '#/components/schemas/Visit' }
                    example:
                      - name: "Supervisor"
                        id: "1383"
                        href: "https://localhost:8904/api/visits/1383"
                      - name: "Contract manager"
                        id: "1399"
                        href: "https://localhost:8904/api/visits/1399"
                        serverDisplayName: "ruatoria.satellite.int"
                  next:
                    type: object
                    description: The link to the next page of results.  Absent if you have retrieved them all.
                    properties:
                      href:
                        type: string
                        format: url
                        example: "https://localhost:8904/api/visits?pos=1000&sort=id"
          
        403:
          description: The site does not have both the RESTCardholders and VisitorManagement licences.

    post:
      tags: [ "Visits" ]
      summary: Create a visit
      description: |
        This creates a new visit.

        In the interest of [forward compatibility](#topic-Forward-compatibility--HATEOAS-), do not
        code its URL into your application.  Take it from the href in the `features.visits.visits`
        section of `/api`.

        This POST expects a JSON body in the same format as a [visit detail](#definition-Visit).

        These fields are required:
        - name
        - reception
        - visitor type (access group)
        - host cardholder
        - start time (`from`)
        - end time (`until`)

        [Do not code this URL](#topic-Forward-compatibility--HATEOAS-) into your application.  Take
        it from the href in the `features.visits.visits` section of `/api`.

        Like all the visit endpoints, this one is new to 8.50.

      requestBody:
        description: |
          Pay particular attention to the field descriptions in the visit schema because some of
          the fields that the server sends you in response to a GET will not make sense in a POST,
          and some are optional.
        content:
          application/json:
            schema:
              description: |
                This is a sample POST body that creates a visit when sent to `/api/visits`.

                You need to put fewer fields in a POST than you receive from the server after a GET.  Only the
                reception, visitor type, host, name, and start and end date-times are required.  It will
                ignore `href`, and (unusually) `division` because it copies a visit's division from its
                reception.

              required: [ name, reception, visitorType, host, from, until ]
              properties:
                name:
                  <<: *VISIT_NAME
                description:
                  <<: *VISIT_DESCRIPTION
                reception:
                  <<: *VISIT_RECEPTION
                  example:
                    href: "https://localhost:8904/api/receptions/937"
                visitorType:
                  <<: *VISIT_VISITORTYPE
                  example:
                    href: "https://localhost:8904/api/access_groups/925"
                host:
                  <<: *VISIT_HOST
                  example:
                    href: "https://localhost:8904/api/cardholders/526"
                from:
                  <<: *VISIT_FROM_UNTIL
                until:
                  <<: *VISIT_FROM_UNTIL
                  example: "2023-03-08T14:35:00Z"
                location:
                  <<: *VISIT_LOCATION
                visitorAccessGroups:
                  <<: *VISIT_AGS
                  example:
                  - href: "https://localhost:8904/api/access_groups/926"
                  - href: "https://localhost:8904/api/access_groups/9260"
                visitors:
                  <<: *VISIT_ORS
                  example:
                  - href: https://localhost:8904/api/cardholders/940
                  - href: https://localhost:8904/api/cardholders/9040
      responses:
        201:
          description: "Success."
          headers:
            location:
              description: The href of the new visit.
              schema:
                type: string
                format: url
        400:
          description: |
            The body of the POST did not describe a valid visit.  Check the body of the server's
            response for hints.
        403:
          description: The site does not have both the RESTCardholders and VisitorManagement licences.

  /api/visits/{id}:
    parameters:
    - $ref: "#/components/parameters/id"
    get:
      tags: [ "Visits" ]
      summary: Get details of a visit
      description: |
        This returns details for a visit.  Follow the href in the
        [summary](#definition-Visit-search) to get here rather than [building the URL
        yourself](#topic-Forward-compatibility--HATEOAS-).

        All visit endpoints are new to 8.50.

      parameters:
      - $ref: "#/components/parameters/visit_fields"

      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Visit'}
        403:
          description: The site does not have both the RESTCardholders and VisitorManagement licences.
        404:
          description: |
            That is not the URL of a visit, or it is a visit but the operator does not have the
            privilege to see ('View Visits' or 'Edit Visits').

    patch:
      tags: [ "Visits" ]
      summary: Modify a visit
      description: |
        Changes an existing visit.

        Follow the href in a [visit search](#definition-Visit-search) to get here rather than
        [building the URL yourself](#topic-Forward-compatibility--HATEOAS-).

        New to 8.50.

      requestBody:
        description: |
          As well as simple attributes such as `from` and `until`, the PATCH body you send can
          contain instructions for updating the lists of visitors and access groups.
        content:
          application/json:
            schema:
              description: |
                This is a sample PATCH body that modifies a visit when sent to its href, `/api/visits/941`.

                The differences from a POST are in the `visitorAccessGroups` and `visitors` arrays.  In a POST
                they are arrays of hrefs, but in a PATCH they must be objects.  Each object should contain an
                array called `add` and / or an array called `remove`.  Each of those should contain hrefs to
                add to or remove from the visit.

                The other big difference between a POST and a PATCH is that all fields are optional in a
                PATCH.

              properties:
                name:
                  <<: *VISIT_NAME
                description:
                  <<: *VISIT_DESCRIPTION
                reception:
                  <<: *VISIT_RECEPTION
                  example:
                    href: "https://localhost:8904/api/receptions/937"
                visitorType:
                  <<: *VISIT_VISITORTYPE
                  example:
                    accessgroup:
                      href: "https://localhost:8904/api/access_groups/925"
                host:
                  <<: *VISIT_HOST
                  example:
                    href: "https://localhost:8904/api/cardholders/526"
                from:
                  <<: *VISIT_FROM_UNTIL
                until:
                  <<: *VISIT_FROM_UNTIL
                  example: "2023-03-08T14:35:00Z"
                location:
                  <<: *VISIT_LOCATION
                visitorAccessGroups:
                  <<: *VISIT_AGS
                  example:
                    add:
                    - href: https://localhost:8904/api/access_groups/926
                    - href: https://localhost:8904/api/access_groups/9260
                    remove:
                    - href: https://localhost:8904/api/access_groups/930
                    - href: https://localhost:8904/api/visits/941/visitor_access_groups/930
                visitors:
                  <<: *VISIT_ORS
                  example:
                    add:
                    - href: https://localhost:8904/api/cardholders/940
                    - href: https://localhost:8904/api/cardholders/9040
                    remove:
                    - href: https://localhost:8904/api/cardholders/937
                    - href: https://localhost:8904/api/visits/941/visitors/937

      responses:
        200:
          description: |
            Success.  Future versions will return feedback from the server about your PATCH.
        204:
          description: "Success."
        400:
          description: |
            The body of the PATCH did not describe a valid change to a visit.  Check the body of the
            server's response for hints.

            If you receive 'No fields have been defined for update', check that your submission body
            is valid JSON.
        403:
          description: |
            The site does not have the RESTCardholders and VisitorManagement licences, or the
            operator does not have the
            privilege to modify that visit ('Edit Visits'), or you attempted to set a field for
            which you have no privilege, or the visit has expired.  See the descriptions for each
            field for some rules about their use.
        404:
          description: |
            That is not the URL of a visit, or it is a visit that the operator does not have the
            privilege to see ('View Visits' or 'Edit Visits').

  /api/visits/{id}/visitors/{secondary_id}:
    parameters:
    - $ref: "#/components/parameters/id"
    - $ref: "#/components/parameters/secondary_id"
    patch:
      tags: [ "Visits" ]
      summary: Modify a visitor's status
      description: |
        Changes a visitor's state for a visit.  This is how you mark a visitor as signing in, signed
        in, on site, off site again, etc.

        Doing so will create an event if your visitor was not already in the state you attempted to
        move them to.

        It will not send a notification to the visitor's host or escort.  There are other API calls
        for notifying that a visitor is [signing
        in](#operation--api-visits--id--visitors--visitorId--notify_signing_in-post) or
        [on-site](#operation--api-visits--id--visitors--visitorId--notify_onsite-post).

        Note that this URL is different from a normal cardholder href because a cardholder can be a
        visitor on more than one visit at a time.

        [Do not code this URL](#topic-Forward-compatibility--HATEOAS-) into your application.  Take
        itf from a [visit search](#definition-Visit-search) or [visit](#definition-Visit).

        New to 8.90.

      requestBody:
        description: |
          This must contain a block called `status` containing a string called `value`, giving your
          desired state of the visitor.
        content:
          application/json:
            schema:
              description: |
                This is a sample PATCH body that marks a visitor as signing in.

              properties:
                status:
                  type: object
                  description: |
                    This is the same status that you see in a [visit GET](#definition-Visit) for each visitor
                    except that you only need to send the `value` field.
                  properties:
                    value:
                      type: string
                      description: |
                        An enum describing the state in which you want your visitor to be.
                      example: "signingIn"
                      enum:
                        [expected, signingIn, signedIn, onSite, expectedBack, departed, cancelled ]

      responses:
        200: { description: "Success.  Future versions will return feedback from the server about your PATCH." }
        204:
          description: "Success."
        400:
          description: |
            The body of the PATCH did not describe a valid change to a visitor's status.  Check the
            body of the server's response for hints.

        403:
          description: |
            The site does not have the RESTCardholders and VisitorManagement licences, or the
            operator does not have the
            privilege to modify that visit ('Edit Visits'), or you attempted to set a field for
            which you have no privilege, or the visit has expired.
        404:
          description: |
            That is not the URL of a visitor, or it is a visitor on a visit that the operator does
            not have the privilege to see ('View Visits' or 'Edit Visits').

  /api/visits/{id}/visitors/{secondary_id}/notify_signing_in:
    parameters:
    - $ref: "#/components/parameters/id"
    - $ref: "#/components/parameters/secondary_id"
    post:
      tags: [ "Visits" ]
      summary: Notify that a visitor is signing in
      description: |

        Sends an email and / or SMS notification to a visit's host.

        The difference between this and
        [notify_onsite](#operation--api-visits--id--visitors--visitorId--notify_onsite-post) is the
        type of event that Command Centre puts in the audit trail.  In all other ways they are
        identical.

        New to 8.90.

      requestBody:
        $ref: "#/components/requestBodies/visitorNotificationPOST"

      responses:
        200: { description: "Success.  Future versions will return feedback from the server about your PATCH." }
        204:
          description: "Success."
        400:
          description: |
            The body of the PATCH did not describe a notification.  Check the body of the server's
            response for hints.
        403:
          description: |
            The site does not have the RESTCardholders and VisitorManagement licences, or the
            operator does not have sufficient privileges, or the visit has expired.
        404:
          description: |
            That is not a visitor's notification URL, or it is a notification URL for a visitor on a
            visit that the operator does not have the privilege to see ('View Visits' or 'Edit
            Visits').

  /api/visits/{id}/visitors/{secondary_id}/notify_onsite:
    parameters:
    - $ref: "#/components/parameters/id"
    - $ref: "#/components/parameters/secondary_id"
    post:
      tags: [ "Visits" ]
      summary: Notify that a visitor is on-site
      description: |

        Sends an email and / or SMS notification to a visit's host.

        The difference between this and
        [notify_signing_in](#operation--api-visits--id--visitors--visitorId--notify_signing_in-post)
        is the type of event that Command Centre puts in the audit trail.  In all other ways they
        are identical.

        New to 8.90.

      requestBody:
        $ref: "#/components/requestBodies/visitorNotificationPOST"

      responses:
        200: { description: "Success.  Future versions will return feedback from the server about your PATCH." }
        204:
          description: "Success."
        400:
          description: |
            The body of the PATCH did not describe a notification.  Check the body of the server's
            response for hints.
        403:
          description: |
            The site does not have the RESTCardholders and VisitorManagement licences, or the
            operator does not have sufficient privileges, or the visit has expired.
        404:
          description: |
            That is not a visitor's notification URL, or it is a notification URL for a visitor on a
            visit that the operator does not have the privilege to see ('View Visits' or 'Edit
            Visits').
security:
  - API_key: []

servers:
  - url: https://localhost:8904

tags:

- name: Forward compatibility (HATEOAS)
  description: |
    This is a self-referencing REST API that follows the principles of HATEOAS.  Other than the
    initial `GET` to `/api` when it first connects, your source code should not contain any URLs,
    as they are subject to change.  You should append the query parameters this document describes
    for operations such as filtering and searching, but everying in the path should come from the
    results of `/api` or pages linked from it.

    `/api` only shows licensed API calls.

    Be prepared to append query parameters to URLs that already have their own:  do not assume
    that you can simply add a question mark and your parameters.

- name: Event field specifiers

  description: |
    What you can do with the `fields` query parameter on an events method has improved through the
    versions, so explaining it is a topic in itself.

    In 8.40 and later the values you can list are the same as the field names in the [details
    page](#definition-Event-detail), plus the special value for a personal data field described
    below.  You can pick whichever fields you want, including `defaults`, though we urge you to
    only list the fields you need.  Anything you wrote for 8.30 or earlier will
    work in 8.40 as it did before.

    In versions up to 8.30 you can only add fields to the event summary and details pages, not
    remove them.  If you send the parameter it must start with `fields=defaults`.  That gives you
    the default set.  What you can add after that depends on the version of Command Centre you're
    calling.

    In 8.10 and earlier the only field you can add is `cardholder.pdf_XXXX`, where XXXX is the ID
    of a PDF.  Find that ID with a query to the [PDFs
    controller](cardholders.html#operation--api-personal_data_fields-get).  Don't forget a
    separating comma between it and `defaults`.

    That will add a cardholder's PDF to the events that are related to them.

    You can only pick one PDF.  It will only appear on events that have a related cardholder, such
    as access events, because without a cardholder there is no PDF.  The security model applies
    too, so it will only appear if your REST operator has the appropriate privileges on that
    cardholder and PDF.

    In 8.20 and 8.30 you can also add `details`.  Make sure you have a separating comma after
    `defaults` or `cardholder.pdf_XXXX`.

    An event detail string can be kilobytes long so we left it optional.  It is the only field in
    the details page that is not in the search results, by the way, so if you are running 8.20 or
    later you can add it to your search results and you will not need the details page.

    | Server version | Valid fields parameter values
    | ------------ | --------------
    | Older than 8.20 | defaults,cardholder.pdf_XXXX 
    | 8.20 to 8.30 | defaults,cardholder.pdf_XXXX<br>or<br>defaults,details<br>or<br>defaults,cardholder.pdf_XXXX,details
    | 8.40 and later | any

    ## Per-event bookmarks

    If you are running 8.70 or later and you put `previous`, `next`, or `updates` in the field
    list of an event search, the server will add those fields to each event.  All server versions
    include links with those names at the end of results, but they are not useful if you crash out
    half way through processing a batch.  The per-event links, only available in 8.70 and later
    and only on request, give you a place to pick up from without being re-sent the events you
    already processed.

- name: Operator privileges
  description: |
    First, some background on operators, operator groups, and divisions.

    To determine your REST client's privileges, the server starts by searching the list of REST
    Client items in its configuration for the one with the API key in the `Authorization` header of
    your request.  Assuming it finds one, it takes the cardholder from that REST Client item.

    To be any use at all that cardholder must be a member of at least one operator group.  Being
    in an operator group makes a cardholder an _operator_.

    After the server has your operator, it needs to check whether that operator has access to the
    items or events in the request.  To explain that, it is necessary to cover divisions.

    Aside from some special items such as day categories, every item in Command Centre is in a
    _division_.  Divisions are hierarchical, with all divisions (but the root) being a child of
    another.  Multi-server installations have one division tree per server.

    Every event and alarm has a division.  It is usually the division of the source item.  Card
    events or 'forced door' alarms, for example, typically use a door as a source item; when an
    operator modifies an item, the event recording that change uses that operator's workstation as
    the source item; the alarm that the server generates when you send a bad API key uses the
    server item as the source.

    An event's division is not always its source's division.  'Card activated' events have the
    server as a source item, but take on the cardholder's division so that operators who can see
    the cardholder can also see when the server activates their cards.

    To link privileges to items and events, an operator group contains a list of privileges and a
    list of divisions.  Its operators enjoy those privileges on all the items, events, and alarms
    that are in those divisions.

    Having a privilege on a division also grants an operator that privilege on that division's
    descendants.  Therefore an operator with a privilege on the root division has that privilege
    on all that server's items and events.

    A common misconception is that the division an operator is in, or the division an operator
    group is in, have a bearing on the operator's privileges.  They do not.  It is all about the
    divisions in the operator group's 'Operator privileges' list.

    ## If your privileges do not seem to be working

    First, to protect Command Centre from accident and malice, you should strive to grant your
    REST clients the fewest and lowest-level privileges you can.  Do not give them 'advanced
    user'.  Reaching a point where you do not receive the results you want is a good thing:
    it means you have screwed things down a little too tightly.

    **If changing privileges in Command Centre does not seem to make any difference**, remember to
    push the 'Refresh operator privileges' button in the properties window of your REST Client
    item.

    Here are some general rules that may help if you are still not receiving the results you
    expect.

    - Receiving a 403 from a GET means the server may not have a license for the retrieval you are
      attempting or your operator does not have the privilege to view that object.  If it is a
      licensing problem, the body of the response will describe it.

    - Receiving a 403 from a PATCH, POST, or DELETE means your operator does not have the
      necessary privilege to perform that operation.  You need one of the privileges beginning
      with 'Edit', 'Modify', or 'Create'.

    - Receiving a 404 when trying to get one item or event means it either does not exist or your
      operator does not have the privilege to view it.

    - Receiving a 200 and an empty result set from a search means you are licensed for that search
      but your operator could not see any items or events that matched.  One possible cause is
      that your operator is not licensed to see _any_ items or events of that kind.  Make sure
      that one of the operator groups that your operator is in has a 'View' privilege such as
      'View events' or 'View cardholders' - whatever is appropriate.  If it does, and you have hit
      the button mentioned above, then check that the divisions on the operator group contain the
      items you expect.  If it is events you are searching for, check the source item on those
      events either by using a REST operator with 'View events' on the root division or by looking
      at them in one of the thick clients.

- name: Text encoding
  description: |
    Command Centre's REST API encodes all payloads using UTF-8, and expects clients to do the
    same.  It does not escape special characters in response bodies except where required to embed
    them in JSON.

    Specifically, it does not sanitise HTML, XML, or SQL.  Your clients should expect to receive
    strings exactly as they were sent, even if they were sent by a hostile client.  Write your
    clients to resist injection attacks.

- name: Item status
  x-traitTag: true 
  description: |

    Most items have a status.  Access zones, for example, can be in one of a few different modes,
    and have a _zone count_ that rises and falls with cardholders arriving and leaving.  Inputs
    and outputs can be on or off.  Any item can be in an unknown state when the REST server is out
    of touch with its hardware.  Et cetera.

    The REST API can send an item's status to you in a string ready for human consumption in a UI,
    or as a list of flags more suitable for an integration.  Neither of those fields are on an
    item's summary or details pages by default; to obtain them reliably you need to subscribe to
    updates.

    ## Subscribing to status updates

    The server does not always have an item's status:  to prevent unnecessary work on the
    controller, network, and server, it will stop requesting updates when nothing is subscribed to
    them.  It is very important that items stay in touch with their controllers, and controllers
    with each other, but it is normal for controllers to limit what they send back to the server.

    The server will be up to date when one of the following happened recently:

    - an operator had the item visible in the Configuration, Command Centre, or mobile clients,
    - an application monitored the item via another API,
    - a REST client used the item in a [status subscription](events.html#status-subscriptions), or
    - a REST client followed the item's `updates` link from its details page.

    If it is not up to date and you request the status on an item's summary or details page, the
    server will report that the status is unknown.

    To retrieve the status of one item you should GET the item's `updates` link from its details
    page.  To monitor the status of many items you should use the [status subscription
    API](events.html#status-subscriptions) on the items controller (added in 8.30).

    Whichever API you use, if the server does not have an item's status when you ask it will
    request an update from the item itself.  For hardware items that may involve a conversation
    with another server, a hardware controller, and another piece of hardware on the end of a
    serial line.  That all takes time, but the server answers you immediately, so the first
    response you receive may be 'unknown'.  The status request continues in the background.

    No matter what you receive, you should follow the `next` link in a loop until it gives you a
    status you are looking for, or another status indicating why it cannot.  Your original request
    started a subscription, which every subsequent request refreshes, so while you stay in that
    loop the server will have the item's current status for you and all other callers.

    The first status you will receive after 'unknown' will probably be 'controller unknown', which
    means that the controller (or other hardware) has received the server's request but does not
    yet have an answer, because of that serial line.  You need something better, so stay in the
    loop.

    ## Staying current

    When you use the `updates` link on the item's details page it will return immediately.  When
    follow the `next` link in the page it returns, it will send back the status straight away if
    it changed since your previous call, or block until it does change.  If nothing happens within
    a minute or so, it will return with no updates.

    Whether you received an update or not, the body will contain a `next` link for you to follow
    for the next update.

    State changes are not queued:  the API only keeps the last, so it only takes one call to get
    yourself up to date with the server.  Remember that the server itself may not have been up to
    date, and your making the call will have started it on its own little journey of discovery,
    which will cause more updates.

    The 'Site' tab of the sample application shows this in operation.

    ## For a user interface

    The `statusText` field describes the state of the item in a multi-line string taken from the
    server's language pack.  The natural state of a door, for example, is

    <pre>
    Closed, locked, secure access.
    </pre>

    A fence zone's status text could be

    <pre>
    On - HV.
    Voltage: 8.2 kV.
    Seven day High Voltage min to max: 0.1kV to 9.8kV.
    Pre-arm check while Alarm Zone is arming.
    </pre>

    For one-line display, the `status` field is the same thing with spaces instead of line
    endings.

    Neither of these is intended for integrations.  By all means display them in a user interface
    (as Gallagher software does) but do not attempt to parse information out of them.

    ## For an integration

    The `statusFlags` field contains an array of string enumerations (flags) that describe the
    item's condition in a reliable and machine-readable way.

    Each item type has a different set of flags.  Some overlap (doors, inputs, and outputs can all
    be closed, for example) but most flags apply to only one kind of item.  The common exceptions
    are the flags which indicate why the server cannot return the item's actual status, covered
    next.

    ### Abnormal status flags

    These are the status flags that indicate the server does not have the current status of the
    item:

    - `unsaved` and `deleted` are transient conditions you should not encounter in normal use.
      Either way, the item is in no condition to query.

    - `unconfigured` is very common while a site is being set up.  It means the item is not fully
      configured yet.  An access zone is not configured until it has at least one door, for
      example.

    - `remoteServerOffline` is only possible in a multi-server setup.  It means that the item is
      remote (on a different server) and the server answering your REST query cannot reach it.

    - `processOffline` means the Controller service that is meant to be running on the Command
      Centre server, and handling all the communications with hardware controllers, is not.

    - `controllerOffline` means the software on the server is as it should be but the hardware
      controller (such as a C6000) is offline.  That could mean it needs its certificate
      revalidated, or just that its power or networking is out.

    - `notPolled` means the item is shunted:  Command Centre is ignoring the item's
      communications at the request of an operator.  You normally do it to stop spurious alarms.

    - `deviceNotResponding` means exactly that.  It means the server is in contact with the
       hardware controller, but there is a problem between there and the item.  Probably a cable
       fault, unless `encryptionKeysTampered` accompanies it.

    Those are fault conditions.  If you see one of those, there is a configuration or hardware
    fault or a shunt preventing the server communicating with the item.

    They are in priority order:  if you receive one near the bottom of the list you can take heart
    in the knowledge that your item is suffering none of the preceding abnormalities.

    There are two more flags that are common to most item types.

    - `unknown` means everything else is in order but you caught the server in a period when it
      simply had no need to stay in touch with the item.  You will get this on a summary or
      details page, because they do not subscribe to updates for the item.  The 'updates' link
      will not send you this status flag.

    - `controllerUnknown` is a transient state, hopefully.  The 'updates' call often returns it
      the first time if the server does not have the item's status already.  It means a component
      (such as a hardware controller) between the server and your item is working on bringing in
      an update.  This generally resolves quickly, so if you follow the 'next' link you will
      receive the latest status.

    The server will not send any other flags with one of those eleven, apart from the possible
    pairing of `encryptionKeysTampered` and `deviceNotResponding`, and some unusual combinations
    noted later.

    Do not go looking for all of the abnormal status flags above and assume the best if they are
    not there.  Gallagher may add more fault conditions in future versions of the API.

    Instead, read each item's section under Operations for what its flags will be when it is
    online.  A paragraph called "flag rules" shows how you can tell if the item is in a correct
    state.  For the impatient:  doors, inputs, and outputs will be open or closed, fence zones
    will be on or off, and alarm and access zones will be in one of four zone states.

- name: Access groups

  description: |

    These methods give you read access to the access groups in Command Centre.  You can search for
    groups, see their lineage, and list their cardholder members. In 8.40 or later you can see how
    they affect those members.  In 9.30 and later you can create, modify, and delete them.

    Your REST operator will need the 'View' or 'Edit Access Groups' operator privileges for the
    GETs, and 'Edit Access Groups' for the POST and PATCH.

    These methods also provide the links you need to manage memberships.  Those links are hrefs to
    cardholders, to which you would send [PATCH](#definition-Cardholder-PATCH-example) requests
    containing your updates.  Your REST operator will need 'Edit Cardholders' privilege on the
    cardholder for that.

    ### Use cases

    #### Finding members of an access group, and managing memberships.

    1. `GET /api`.
    2. Follow the link at `features.accessGroups.accessGroups.href`
       [↪](#operation--api-access_groups-get) (adding search terms, and setting `top` high to save
       pagination).
    3. Find your access group in the results.

    4. The link at `cardholders` [↪](#operation--api-access_groups--id--cardholders-get) returns the
    cardholders who have *direct* membership of your group.  This is only a subset of the
    cardholders who are affected by that group, as the groups that list this group as their parent
    inherit its effects recursively.  If you are after every cardholder who has *effective*
    membership of your group, follow the group's href to get its detail page, which includes its
    child groups in an array called `children`.  In a depth-first traversal you would recurse down
    through the hrefs in that array before proceeding.

    5. Get the link at `cardholders` (which is the same on the search results and the details page),
    look in that cardholder's `accessGroups` array, and manage each membership as you require.  Send
    a DELETE to a membership's href to remove it, or an HTTP PATCH to the cardholder href to update
    it.

    #### Building the group hierarchy.

    1. `GET /api`.
    2. Follow the link at `features.accessGroups.accessGroups.href`
       [↪](#operation--api-access_groups-get).  If you follow the efficiency tips in the cardholder
       section you will add `top` and `sort` parameters.
    3. Record each group's href, name (if you intend to display the results), and `parent.href`,
       if it is there.  An access group may have no parents or one parent, never more.
    4. Follow the link at `next.href`, if there is one, and repeat.

    You can now assemble the groups into a tree.

- name: "Access Zones"

  description: |
    These methods give you read access to Access Zones in the Command Centre database, and
    let you change their modes, lock them down, and send other overrides.

    The first use case below introduces the main entry point.  It is a paginated search interface
    that gives any number of access zones, each containing the fields you ask for in the query.

    ### Overrides

    Note:
    
    1. End-times on overrides are not accurate to the second.  Internally, Command Centre
       converts the end time to a duration, so you may find that submitting end times in
       the very near future does not have the exact effect you expect.
    2. An override without an end time lasts until the next
       mode change or 'cancel untimed overrides' entry in the access zone's schedule.
    3. The end time you set for an override cannot be in the past or more than 24 hours into
       the future.

    ### Access Zone status flags

    If the access zone is online, its `statusFlags` field may contain one or more of these flags:

    - `saltoOutputOnly` means the the access zone would be considered unconfigured because it is
      missing doors, and therefore offline, except that it has a Salto output number assigned to it.
      That is a normal operational configuration.

    - `mobileZone` also means the access zone would be considered unconfigured (missing doors) and
      therefore offline, except that a mobile reader is able to badge cardholders into it, making it
      a perfectly useful access zone.  It will also have a `secure` flag.

    - `lockedDown` means only cardholders with the privilege to enter locked-down zones shall pass.
      The zone will also be 'secure'.  When the lockdown override ends it will return to its
      previous access mode.
    - `usePin` means when you use a card at a reader to unlock the door or at a terminal to control
      an alarm zone, you will also need your PIN.
    - `zoneCountTooHigh` means the zone count is above its maximum.
    - `zoneCountTooLow` means the zone count is below its minimum.
    - `zoneCountInGrace` means the zone count recently became too low or high.

    The following four give the zone's access state.  An online access zone will always return one
    of them.

    - `secure` means the doors are locked.
    - `dualAuth` means the doors are locked and - depending on configuration - cardholders will need
      a second credential to open them.
    - `codeOrCard` means you can unlock a door either with a card, the zone's access code, or (if
      suitably configured on the reader) a personal user code.  You will not see this flag if the
      zone is locked down.
    - `free` means the zone's doors are unlocked.  You will not see this when the zone is locked down.

    #### Access Zone flag rules

    - If and only if the zone online and not locked down, there will be exactly one of 'secure',
      'dualAuth', 'codeOrCard', or 'free'.

    - If and only if the zone online and locked down, there will be exactly one of 'secure' or
      'dualAuth'.

    - Because 'saltoOutputOnly' and 'mobileZone' are variations of the unconfigured offline
      condition, 'saltoOutputOnly' will be alone and only 'secure' will accompany 'mobileZone'.

    - If a zone has both a Salto output number and mobile access, only 'saltoOutputOnly' will
      appear.

    - If there is 'zoneCountInGrace' there will always be exactly one of 'zoneCountTooHigh' or
      'zoneCountTooLow' (never both).

    Using the first three rules above, your test for an access zone being in error is 'secure',
    'dualAuth', 'codeOrCard', 'free', 'saltoOutputOnly', and 'mobileZone' all missing.

    ### Use cases

    #### Searching for access zones by name
     1. `GET /api`.
     2. Follow the link at `features.accessZones.accessZones.href`
        [↪](#operation--api-access_zones-get), appending a search term such as `name=substring` to
        filter the access zones, and `fields` to tell the server what to return about each.  The
        next section covers those query parameters.
     3. Process the results, following the `next` link until there isn't one.

    #### Changing an access zone's access mode
     1. Find the href for the access zone using the process above.
     2. GET it.
     3. Find the API URL you require in the `commands` structure of the results, such as `free` or
        `securePin`, from [the detail](#definition-Access-Zone-detail).  Use the `until` variants if
        you are specifying an end time.
     4. POST to that URL.  Some require a JSON object (resetting the zone count, and all
         those with `until` in their command block keys).  The others expect an empty body.

    #### Finding an access zone's status
    1. Find the href for the access zone using the process above, and GET it.
    3. Take the `updates` [↪](#operation--api-access_zones--id--updates-get) href from that page.  For a
       version 8.00 server append the query parameter separator (`?` or `&`) then
       `fields=defaults,zoneCount` if you need the zone count as well as the default status fields.
       The zone count is included by default in 8.10 and later.
    4. GET it.
    5. Use the flag rules above to interpret the status flags you receive.
    5. Follow the `next` link to stay up to date.

- name: Alarms
  description: |

    Use these methods to download, monitor, and manage Command Centre alarms.

    ## Alarm use cases

    ### Downloading and managing unprocessed alarms
    1. `GET /api`
    2. Follow the link at `features.alarms.alarms` [↪](#operation--api-alarms-get).  You will
       receive up to 100 alarms, each containing links to its management functions.
    3. If step 2 returned results and there is a link at `next.href`, follow it and
       repeat.

    ### Staying up to date

    After getting all the current alarms using the process above, which is following `next.href` in
    a loop until there are no more alarms to get, follow the link at `updates.href`.  It will block
    until there is a new alarm or a change to an existing alarm.  After handling that update, follow
    the link it contains at `next.href` and keep following it in a loop to stay up to date.

    ### Licensing

    * The GETs that collect alarms and events require the RESTEvents licence.

- name: "Alarm Zones"
  description: |
    These methods give you read access to Alarm Zones in the Command Centre database, and
    let you change their states:  armed, disarmed, two user-defined states, and (if at
    least one Fence Zone is directing its events to this Alarm Zone) 'Armed - High
    Voltage' or 'Armed - Low Feel'.

    Alarm zones may run by a schedule, but it is optional.  Alarm zones that do not have a
    schedule change state only through manual overrides, meaning they do not have a
    natural state.  That in turn means that you cannot override them for a duration --
    they have no state to return to.

    The first use case below introduces the main entry point.  It is a paginated search interface
    that gives you any number of alarm zones, each containing the fields you ask for in the query.

    ### Overrides
    Note:
    
    1. End-times on overrides are not accurate to the second.  Internally, Command Centre
       converts the end time to a duration, so you may find that submitting end times in
       the very near future does not have the exact effect you expect.
    2. Submitting an override without an end time makes it take effect until the next
       state change or 'cancel untimed overrides' entry in the alarm zone's schedule.
    3. Overrides you submit via REST are not subject to the "manual unset" timeouts you
       can set in the Configuration Client.  Those only affect readers, terminals, and
       pushbuttons.
    3. The end time you set for an override cannot be in the past or more than 24 hours into
       the future.

    ### Alarm Zone status flags

    If the alarm zone is online, its `statusFlags` field will contain one or more of these flags:

    - `armed` means the alarm zone is armed.  It will be called that even if you have changed the
      terminology in the Server Properties.
    - `disarmed` as above.
    - `user1` will be called that even if you have given it a different name in Server Properties.
    - `user2` as above.
    - `exitDelay` means the zone is temporarily ignoring input triggers.  One of the previous four
      flags shows you the state the zone is about to change away from.
    - `entryDelay` means an input has triggered the alarm zone but Command Centre is giving a
      cardholder the opportunity to disarm the zone.

    - `lowFeel` means the alarm zone has a fence zone attached, and that it is in 'low feel' mode
      (meaning it is delivering lower voltage than you would use for a strong deterrant).
    - `highVoltage` means that the alarm zone has a fence zone attached, and that it is 'high
      voltage' mode (meaning it is delivering a strong deterrant pulse).

    #### Alarm Zone flag rules

    - If and only if the zone is online, there will exactly one of 'armed', 'disarmed', 'user1', or
      'user2'.  That is your test for whether an alarm zone is in error.
    - 'exitDelay' and 'entryDelay' cannot appear together.
    - If and only if the zone is online and has a fence zone, there will be exactly one of 'lowFeel'
      or 'highVoltage'.

    ### Use cases

    #### Searching for alarm zones by name
    1. `GET /api`.
    2. Follow the link at `features.alarmZones.alarmZones.href`
       [↪](#operation--api-alarm_zones-get), appending a search term such as `name=substring` to
       filter the access zones, and `fields` to tell the server what to return about each.  The next
       section covers those query parameters.
    3. Process the results, following the `next` link until there isn't one.

    #### Changing an alarm zone's state
    1. Find the href for the alarm zone using the process above.
    2. GET it.
    3. Find the API URL you require in the `commands` structure of the results, such as `arm`
       [↪](#operation--api-alarm_zones--id--arm-post) or `disarm`
       [↪](#operation--api-alarm_zones--id--disarm-post), using [the
       detail](#definition-Alarm-Zone-detail).  Use the calls with `Until` on the ends of their
       names if you are specifying an end time.
    4. POST to that URL.  All those with `Until` in their names require a JSON object in
    the body giving the time at which the override should end; the others do not.

    #### Finding an alarm zone's status
    1. Find the href for the alarm zone using the process above, and GET it.
    3. Follow the `updates` [↪](#operation--api-alarm_zones--id--updates-get) href from that page.
    4. Use the flag rules above to interpret the status flags you receive.
    5. Follow the `next` link to stay up to date.

- name: "Cardholders"
  description: |
    A cardholder is a user account.

    These methods give you read and write access to the cardholder data in the Command
    Centre database.  You can download cardholders, create them, search them by name or
    Personal Data Field (PDF) value, and work on them as you would in the interactive
    clients.

    The first use case below introduces the main entry point.  It is a paginated search interface
    that gives you basic data for any number of cardholders.  You won't receive many fields by
    default, but you can ask for more using the `fields` query parameter.

    A field called 'href' serves both as a unique identifier for the cardholder and the location of
    what we call his or her _details_ page.  You can submit an HTTP GET to that href to retrieve the
    entire cardholder record, or an HTTP PATCH to update it, or an HTTP DELETE to remove it.  Be
    careful:  there is no coming back from deleting a cardholder.

    ### Use cases

    #### Searching for cardholders by name
    1. `GET /api`.
    2. Follow the link at `features.cardholders.cardholders.href`
       [↪](#operation--api-cardholders-get), appending a search term to narrow the results and the
       'fields' parameter to add the fields you need.
    3. Process the results, following the `next` link until there isn't one.

    #### Downloading all cardholders 
    1. `GET /api`

    2. Follow the link at `features.cardholders.cardholders.href`
       [↪](#operation--api-cardholders-get).  This is effectively a cardholder search with no
       filters.  You should add `sort` and `top` query parameters to sort by ID and increase the
       number of cardholders per page:  see the efficiency tips!

    3. Process the bundle of cardholders in the result.
    4. Follow the link at `next.href` if there is one, and repeat.

    #### Synchronising a user directory

    This is a common use case, described in the section on [Cardholder
    changes](#tag-Cardholder-changes).  It shows how to:

    1. Get a bookmark at the head of the queue of cardholder changes.
    2. Do a one-off sync of all cardholders.
    3. Loop to stay up to date, starting with the bookmark.

    That is how Gallagher's cardholder-synchronising integrations work.

    #### Searching for cardholders by Personal Data Field value

    Say you want to find a cardholder with a particular employee ID, and Command Centre is
    holding that in a personal data field called "employee_ID".

    First, reconsider, and look at the 'Synchronising a user directory' use case above.  If you are
    going to be doing this for many cardholders, GETting cardholders in bulk and filtering out the
    interesting ones client-side is more efficient than a large number of unique PDF searches.  You
    don't have to get all cardholders; you could get all cardholders in one division, or all
    cardholders with a non-blank value for your PDF (shown below), or a combination.  It will be
    quicker than a sequence of searches that return one cardholder each.

    Before you can start a cardholder search, you must find the PDF's identifier.

    1. `GET /api`.

    2. v8.10 or later:  follow the link at `features.personalDataFields.personalDataFields.href`
       [↪](#operation--api-personal_data_fields-get), appending the query `name="employee_id"`.
       This will return every PDF in the system with that name.  There will be more than one, in
       rare cases.

    2. Earlier versions:  follow the link at `features.items.items.href`
       [↪](events.html#operation--api-items-get), appending the query `name="employee_id"` (after a
       `?` or `&`, of course).  This will return every item in the system with that name.  Pick the
       one with a type name of 'Personal Data Field'.  Or you could append `type=33` to the item
       search:  you will only be shown PDFs.

    3. Note the ID of the item.  It will be a short alphanumeric.

    Case does not matter when searching by name but remember the quotes:  Command Centre will
    perform a substring match if you omit them, which is vastly slower and (for the example above)
    return you the PDFs 'previous_employee_ID' and 'employee_ID_allocated_flag', if you have
    PDFs with those names.

    Now you can use that PDF ID in a cardholder search.

    1. Recall the JSON object you received from `GET /api`.
    2. Follow the link at `features.cardholders.cardholders.href`
       [↪](#operation--api-cardholders-get), adding a query separator and
       `pdf_<your_pdf_id>=<your_pdf_value>`, without the angle brackets.

    The results will only include cardholders who have *\<your_pdf_value>* as a substring of
    the Personal Data Field with ID *\<your_pdf_id>*.  Again, the search is
    case-insensitive and you should bookend *\<your_pdf_value>* with quotes if you want to anchor it at
    each end.  In our example we would `GET /api/cardholders?pdf_345="EID8888"`.

    Use a percent sign `%` for *\<your_pdf_value>* if you want to see all cardholders who have a
    non-blank value for that PDF.

    The server will reply with a default set of fields for your cardholder.  If they are not what
    you'd like, you can use the `fields` query parameter to change them.

    See the [cardholder GET](#operation--api-cardholders-get) for more.

    #### Creating a cardholder
    1. `GET /api`.
    2. Use the link at `features.accessGroups.accessGroups.href` to find the hrefs of access groups
    you wish to add your new cardholder to.

    3. Do the same for the competencies, relationships (`roles`), lockers, PDF definitions, and
    cards/credentials (`cardTypes`) that your new cardholder needs, using other URLs in the
    'features' section of `/api`.  In v8.10, the card types that your operator has the privilege to
    assign are at a new URL given in the field `features.cardTypes.assign.href`
    [↪](#operation--api-card_types-assign-get).

    4. Compose a JSON body using [this example](#definition-Cardholder-POST-example) and
    [this detail](#definition-Cardholder-detail), then
    [POST](#operation--api-cardholders-post) it to the href at
    `features.cardholders.cardholders.href` [↪](#operation--api-cardholders-post) on the `/api` page.
    
    #### Modifying a cardholder
    1. Find your cardholder using one of the processes above.
    2. If you need the current values before you update them, use the `fields` parameter to add
    fields (such as accessGroups, cards, or competencies) to the search results.

    3. [PATCH](#operation--api-cardholders--id--patch) the cardholder's href with a
    document describing the additions, deletions, and modifications you wish to make to
    the cardholder and his or her associations.

    In its simplest form, your document could be a collection of key/value pairs much the same as
    you receive from a GET to the same href.  [More complex
    forms](#definition-Cardholder-PATCH-example) allow adding, modifying, and removing cards,
    competencies, group membership, PDFs, and relationships.  Three examples follow.

    #### Removing a cardholder from groups

    1. Find your cardholder using one of the processes above.
    2. Follow the link to their details page or add `fields=accessGroups` to the search.  That will
       show all their access group memberships.

    3. [PATCH](#operation--api-cardholders--id--patch) the cardholder with the hrefs of the
       memberships you want to delete in an array called `remove` inside a block called
       `accessGroups`.

    The [access groups](#tag-Access-groups) section describes what to do when you want to
    start with a group and remove several cardholders from it.

    #### Removing all group memberships, competencies, relationships, cards, or lockers

    This shows how you could remove a cardholder from all his or her access groups, but you could
    just as simply apply the process to other fields that come back as arrays, such as competencies,
    relationships, operator groups, cards, and lockers.

    1. GET your cardholder's details page, or search with `accessGroups` in the field list.  Either
    way, you will receive all their access group memberships.
    2. Take the array at `accessGroups`, rename it to `remove`, and put it in object called
    `accessGroups` at the root level of a [JSON object](#definition-Cardholder-PATCH-example).
    3. [PATCH](#operation--api-cardholders--id--patch) the cardholder with that JSON object.  That
    will remove the cardholder from all the groups that came back in the GET.

    #### Assigning a new card to a cardholder

    1. `GET /api`.
    2. Follow the link at `features.cardTypes.cardTypes.href` [↪](#operation--api-card_types-get) to
       find the href for the new card's type.
    3. If you want to create a card in a state other than the default, get the state from the same page.
    4. Find the href for the cardholder using one of the search methods above.
    5. Optional:  follow the link at `edit.href` on the cardholder page.  If there is a link at
       `update.href`, your REST client has permission to modify the cardholder.
    4. PATCH the cardholder's href according to the [cardholder patch
       schema](#definition-Cardholder-PATCH-example).

    #### Deleting a cardholder's PDF value
    1. Find the URL of your cardholder using one of the processes above.
    4. [PATCH](#operation--api-cardholders--id--patch) your cardholder with this in the body:
      `{ "@name_of_PDF": null }`
    
    
    #### Deleting a cardholder
    1. Find your cardholder using one of the processes above.
    2. Send an HTTP DELETE to the cardholder's href.

    #### Updating a cardholder's location
    1. Find the href of your target access zone using the link at
       `features.cardholders.updateLocationAccessZones`
       [↪](rest.html#operation--api-access_zones-update_cardholder_location-get) in the results of
       `GET /api`.
    1. Find your cardholder using one of the processes above.  If you are using
       [search](#operation--api-cardholders-get), add `updateLocation` to the `fields` parameter to
       save you having to GET their details page later.
    2. Send an [HTTP POST](#operation--api-cardholders--id--update_location-post) to that
       cardholder's `updateLocation.href` link.

    #### Finding which access zones and doors a cardholder can access
    1. GET your cardholder's details page, or search cardholders with `accessGroups` in the field
    list.  Either way, you will receive all their access group memberships.
    2. Iterate through all the access groups looking into their `access` blocks for access zones and
    schedules.  Recurse up the access group hierarchy by following each group's `parent.href`.

    Now you have the cardholder's access zones.  If you want doors:

    3. For each access zone, GET its href and look in its `doors` block.

    #### Finding recently-created cardholders

    Informing you when Command Centre creates cardholders is a function of the [Cardholder
    changes](#tag-Cardholder-changes) call, described there.

    However for that to work you need to make API calls before and after the cardholders are
    created.  If they already exist, a workaround is to get a page of cardholders sorted by
    database ID _descending_ using `sort=-id&top=10`.  Change the ten to the number of cardholders
    you'd like, obviously.  Because Command Centre allocates database IDs to new items in
    increasing order, the first page you get will be the most-recently created cardholders.  This
    is not suitable for use in a production system!  Use the cardholder changes call instead.

    ### Field names in query parameters

    The cardholder [search](#operation--api-cardholders-get) and
    [details](#operation--api-cardholders--id--get) operations' `fields` parameter and the [change
    tracking](#operation--api-cardholders-changes-get) operation's `fields` and `filter` parameters
    take a list of field names.  Other sections of this document describe how those parameters
    affect the API calls, but their format is the same so this section will cover it once.

    You can form the name of a field by joining the components of its JSON path with dots.  Fields
    at the root level of the cardholder object, such as `firstName` and `@emailAddress` (a PDF),
    have just one component.  Fields that are one level down, such as `accessGroups.status`, have
    two.

    Treat the string matches as case sensitive:  use `lastName` rather than `lastname`.

    The string must not contain any spaces.  Just alphanumerics, underscores, commas, and dots.

    To serve as examples, this is the list you can choose from in 8.30:

    `href`, `id`, `firstName`, `lastName`, `shortName`, `description`, `authorised`,
    `lastSuccessfulAccessTime`, `lastSuccessfulAccessZone`, `division`,
    `personalDataFields`, `cards`, `accessGroups`, `competencies`, `notes`, `notifications`,
    `relationships`, `lockers`,
    `cards.href`, `cards.number`, `cards.from`, `cards.until`, `cards.cardSerialNumber`, `cards.type`,
    `cards.status`, `cards.invitation`, `cards.issueLevel`, `cards.pivData`,
    `cards.pivData.chuid`, `cards.pivData.pivStatus`, `cards.pivData.lastCheckTime`,
    `cards.pivData.chuid.hash`, `cards.pivData.chuid.fascn`, `cards.pivData.chuid.duns`,
    `cards.pivData.chuid.orgIdentifier`,
    `cards.invitation.href`, `cards.invitation.singleFactorOnly`, `cards.invitation.email`,
    `cards.invitation.mobile`,
    `notifications.enabled`, `notifications.from`, `notifications.until`,
    `accessGroups.href`, `accessGroups.accessGroup`, `accessGroups.from`,
    `accessGroups.until`, `accessGroups.status`,
    `relationships.href`, `relationships.cardholder`, `relationships.role`,
    `lockers.href`, `lockers.locker`, `lockers.from`, `lockers.until`

    Later versions of Command Centre added many more.  See the
    [details](#operation--api-cardholders--id--get) operation for the complete list of cardholder
    fields.

    A special value `default` applies a default set of fields that varies with the call you're
    making.

    `personalDataFields` is also special.  It will give you the personalDataDefinitions block plus
    all the PDF values at the root level with their names preceded by '@'-signs.

    ### Licensing

    All of the API calls described here are available with the RESTCardholders licence, with the
    following exceptions and notes:

      * Visitor management calls need both RESTCardholders and VisitorManagement.

      * Creating, modifying, and deleting cardholders' connections to competencies requires the
        RESTConfiguration licence.

      * Creating, modifying, and deleting competency items requires the RESTConfiguration licence.

      * Managing access group _memberships_ is enabled by the RESTCardholders licence but managing
        access group items, card types, personal data definitions, and roles will require the
        RESTConfiguration licence.  These features are coming soon.

      * Lockers and locker banks are also available with the RESTStatus licence, and a subset of
        their fields (enough to allow overriding them) are available with the RESTOverrides licence.

    The server will return a 403 if you attempt an operation for which the server is not licensed.

    ### Versions

    The body of this document clearly indicates when recent features arrived in the API so that
    readers with older versions of Command Centre know not to expect them.
    
    #### Cardholder API changes on the roadmap

    * You will be able to create, delete, and change the the basic configuration of
      roles, PDFs, and card types.

    * POTENTIALLY BREAKING CHANGE:  searching for cardholders using `pdf_xxx=""` or `pdf_xxx=`
      currently returns no cardholders.  That is neither useful nor desired.  Instead, a future
      version of Command Centre will return cardholders with a blank value for that PDF.

    * POTENTIALLY BREAKING CHANGE:  the API route that lets you modify a cardholder by PATCH also
      works if you send it a POST.  It should not, because POSTs create things, not modify them.
      The fix will break clients that rely on this.  There should be none, since the POST was not
      documented.

    * POTENTIALLY BREAKING CHANGE:  in future, PATCH methods will return "200 Success" instead of
      "204 No Content" and may contain the object you modified plus a message from the API giving
      you feedback on your request.  Please be aware that all 200-level response codes mean success,
      not just the ones old versions have been sending you.

    * A cardholder's visits and escort.

    * "Revealable" access levels on PDFs.

    * Current versions of the API only show a PDF on a cardholder if he or she has a value for that
      PDF.  That makes it difficult to find out which PDFs a cardholder _could_ have, so a future
      version will allow you to ask for all of them with `fields=allPdfs`.

    * You will be able to request the competencies that your operator has the permission to assign.
      That is determined by privileges, a competency setting, and an operator group setting.
      Current versions let you request the competencies that your operator has the permission to
      view, which is a larger set determined by privileges alone, and not suitable for interactive
      REST clients.

- name: Cardholder changes
  description: |
    This feature keeps you up to date with cardholders by telling you the changes that happened
    since the last time you called.  It works for creations, modifications, and deletions coming
    from all
    sources, including Gallagher's clients, EDI, Active Directory, remote servers, and the other
    cardholder APIs.

    It first appeared in version 8.30.

    Because it also reports changes made through the REST API, it will tell you about your own
    changes.  If you are using this API both for managing cardholders and as a source of truth, you
    should be careful not to get yourself into a loop.

    This API was built to synchronise a second system with Command Centre's cardholder directory,
    not for auditing or reporting.  You will find the [events API](eventsApi.yaml) quicker and more
    flexible for those tasks.

    ### Recommended use

    1. First, get a bookmark at the end of Command Centre's list of changes as follows:
      
        1a. `GET /api`

        1b. Follow the link at `features.cardholders.changes` [↪](#operation--api-cardholders-changes-get).

        1c. Take note of the href in the `next` block.  This is your bookmark.  Later on you will
        ask for all the changes that happen after this point.

    1. If you are filling a user directory from Command Centre, download all cardholders using [this
    advice](#downloading-all-cardholders).  Here is a reminder:

        2a. Using the results of `GET /api` again, follow the link at
          `features.cardholders.cardholders` [↪](#operation--api-cardholders-get), adding query
          parameters `top=1000` and `sort=id`.

        2b. Process those cardholders (probably 1000) and follow the `next.href` link in
          a loop until you have extracted all of them.

    1. This is the start of your update loop.  The first time through, to catch the changes that
       came in during the big download you did in step two, use the href that you got in step one.
       Simply GET it.

    1. If the `results` array you get back is empty you are up to date and you have nothing to do.
       Sleep for a time before your next poll, to avoid a tight loop and ease the load on your
       database.  When it comes time to poll again, do not be tempted to resubmit the same request:
       the URL to use sometimes changes even when there are no results, so always get it from
       `next.href`.

    1. If the `results` array is not empty it will contain the first changes that happened after
    your previous call.  The sections below will help you process them.

    1. Restart your polling loop using the link in `next.href`.

    ### Use case:  detecting when cardholders are created.

    The first thing you need to do is get a link from the changes API call _before_ the cardholders
    you are interested in are created in Command Centre.  If you didn't do that, there is a
    workaround described in the cardholder use cases, but it is not suitable for production.

    When you call this API the second time you will receive all changes made to cardholders since
    the previous call.  To find the new cardholders, discard all the results that do not have
    `type=add`.

    Since you are only interested in new data, you can optimise the call a little with
    `fields=newValues`, which will remove the fields you do not need.

    ### Notes

    - The API will not notify changes to any fields that you cannot see in the cardholders API, such
      as user codes, passwords, card PINs, car park assignments, biometric credentials, and (in
      versions before 8.50) operator settings.

    - There is a known issue in 8.50 preventing operator group membership changes coming out of this
      API.  It was fixed in 8.60.  Changes to the other five operator settings work correctly in
      8.50.

    - The API will return the pre-change values of some fields, but not those that require a lot of
      storage such as image PDFs and PIV certificates.  Command Centre does not hang on to them
      after they change.

- name: Card types
  description: |
    The main purpose of the card type API is to find the card type you need when assigning a card to
    a cardholder.

    A card connects a cardholder to a card type.  A new card takes some defaults from its card type
    (such as its activity period, given by 'from' and 'until'), some limits (on the card number and
    PIN, for example), and other behaviours (such as how long a card can be inactive before Command
    Centre disables it).

    The 'Site Installation' chapter of the Configuration Client online help has a section that
    describes card types.

    As it does for the other item types, the REST API gives you read access to card types through
    search and details pages.  However the privilege model for card types is more flexible than for
    other items:  the 'View site' privilege determines whether you are allowed to view a card type,
    while the cardholder editing privileges ('Create', 'Edit', 'Create and edit') determine whether
    you can assign cards of that type to a cardholder, so version 8.10 of the API added a page that
    returns the card types that your operator is allowed to use in that way.  Take its URL from
    `features.cardTypes.assign` in the results of `GET /api`.

    This API uses the term 'card' but more broadly we prefer 'credential', because not all card
    types involve a physical card.

    The API's coverage of PIV cards is in [its own document](piv.html).

    API routes that allow creating, modifying, and deleting card types are in development.

    ### Use cases

    ### Finding the PIV card type

    When you give a cardholder a card, PIV or otherwise, you need to provide the identifier of the
    card type.  It will vary between Command Centre installations so you cannot use a value from
    another installation or from these examples.  It will not change while Command Centre is running
    but it may change at upgrade, so your application should follow this process at startup.

    It takes two queries and a loop:

      1. `GET /api`.
      2. If running 8.00 or earlier, follow the link at `features.cardTypes.cardTypes.href` (which
         will be to `/api/card_types`), or
      2. if running 8.10 or later, follow the link at `features.cardTypes.assign.href` (which will
         probably be to `/api/card_types/assign`.  Both URLs will work in 8.10, but the advantage of
         this URL is that your operator can access it at a lower privilege level).
      3. Iterate through the array to find the element with `credentialClass:  piv`, and
      4. note its `href`.

    You can accomplish the last two steps with the JSONPath filter

    `$.results[?(@.credentialClass=='piv')].href`.
    
    Explanation:  Command Centre ships with a handful of card types, and administrators can add
    more, but the one that Command Centre uses for PIV and PIV-I cards has its own credential class.
    It will look like [the example below](#definition-PIV-card-type).

- name: Competencies
  description: |
    Competencies are items to which cardholders can be linked, and which access zones may require on
    a cardholder before allowing them in.

    They have their own access privileges, so operators can see or edit a cardholder's competencies
    based on the competency's settings as well as the cardholder's division and the privileges the
    operator has in that division.

    Notification settings on the competency cause advance warnings to go to the cardholder and his
    or her related cardholders (line managers, for example) before the competency expires.

    Competencies differ from access groups in that a cardholder can have only one link to a given
    competency.  Attempting to create another will either fail or raise a stateful alarm depending
    on your version of Command Centre.

    The REST API gives you access to competencies through create, search, dereference, update, and
    delete functions described below.

    The Configuration Client online help describes competencies fully.

- name: "Day Categories"
  description: |-
    A day category links a calendar to a schedule.  The calendar determines the days of the year
    that fall into a day category, and the schedule determines what happens at certain times on
    those days.
    
    The method in this group gives you the day category hrefs you need when creating and modifying
    schedules.

    Day categories are new to the 8.50 API.

    ### Use case:  listing day categories
    1. `GET /api`.
    2. Follow the link at `features.dayCategories.dayCategories.href`, appending a search term such
       as `name=substring` or `name="full name"` to filter the selection, and `fields` to tell the
       server what to return about each day category.
    3. Search the results for the day category you are after.  Normally you would follow the `next`
       link until there isn't one, but day categories are not that numerous so they will most likely
       to fit on one page.  Especially if you set `top=1000` (which is advised).

- name: Divisions
  description: |
    These methods provide access to the Command Centre divisions that are available to the REST
    client.  Call `/api` and use the link at `features.{your_feature}.divisions.href` to retrieve
    the divisions in which the REST operator has privileges for that feature.  Pick out the ones of
    interest and use those IDs in event, alarm, or item searches if you don't want the search to
    scan everything.

    Or, you may end up here by following a division's link from a reception item when you need to
    retrieve the visitor management configuration for that reception's division.

    ### Licensing

    Every REST licence enables the divisions controller:  RESTEvents, RESTCreateEvents, RESTCardholders,
    RESTStatus, and RESTOverrides.

- name: "Doors"
  description: |-
    These methods give you read access to basic data about Doors in the Command Centre
    database, and let you open them.

    The first use case below introduces the main entry point.  It is a paginated search interface
    that gives you any number of doors, each containing the fields you ask for in the query
    (including, for example, the URLs to open them).

    ### Door status flags

    If the door is online, its `statusFlags` field will contain one or more of these flags:

    - `forced` means the door was opened or unlocked while secure.
    - `openTooLong` means the door has been open for longer than its configured DOTL time.
    - `tamper` means one of the door's inputs is in a tampered state.  The usual cause of that is a
      resistance moving outside nominal range, meaning the input has been cut or shorted.
    - `open` means the door has a sensor for detecting its openness and it is reporting as such.
    - `closed` is the inverse.  The door is closed or has no open sensor.
    - `locked` means the door locked.  It reflects the state of the door's unlock sensor, if it has
      one.  Otherwise it reflects the state of the door's unlock output, if it has that.  Without an
      unlock output, a door is not capable of access control.
    - `unlocked` means 'locked' is not set.
    - `secure` means the door's normal state is closed and locked.
    - `free` is the opposite of 'secure' -- nobody needs to badge to open it.

    `secure` and `free` do not change when the door opens.  They are about whether the door is
    enforcing access control, not about the current state of the door hardware.

    When allowing passage, a door normally moves from closed and locked to closed and unlocked, to
    open and unlocked (extremely briefly), then to open and locked while someone is walking through
    it, then back to closed and locked.  It will be secure throughout.

    #### Door flag rules

    - If and only if the door is online, exactly one of 'closed' or 'open' will appear, and one of
      'locked' or 'unlocked', and one of 'secure' or 'free'.

    So, to establish if the door is in a normal state, look for 'closed' or 'open'.  If neither is
    present, your door is in an error state.

    ### Use cases

    #### Listing Doors
    1. `GET /api`.
    2. Follow the link at `features.doors.doors.href`, appending a search term such as
       `name=substring` to filter the selection if you have a lot of doors, and `fields` to tell the
       server what to return about each.  The next section covers those query parameters.
    3. Process the results, following the `next` link until there isn't one.

    #### Opening a Door
    1. Find the href for the door using the process above.
    2. GET it.
    3. POST to the `open` [↪](#operation--api-doors--id--open-post) URL in the `commands` structure
       of the [results](#definition-Door-detail).

    #### Finding a door's status
    1. Find the href for the door  using the process above, and GET it.
    3. Follow the `updates` href from that page.
    4. Use the flag rules above to interpret the status flags you receive.
    5. Follow the `next` link to stay up to date.

- name: "Elevator Groups"
  description: |-
    These methods give you read access to Elevator Groups.

    The reason you would want that is to allocate default floors to cardholders.  Each cardholder
    can have one default floor per elevator group, so that when they badge into that group's lobby
    area the elevator system can arrange a car to take them to their favourite floor.

    Each elevator group only goes to certain floors, so to give a cardholder a default floor you
    need to see which floors each elevator group services.

    Command Centre represents floors with access zones.  If an elevator car has two doors, front and
    rear, it may service two access zones on the same physical floor.  A cardholder could pick
    either of those access zones as their default for that elevator group.

    The main entry point is a paginated search that returns what you need to pick default floors for
    a cardholder, limited by the privilege that enables that operation on a cardholder.  That is the
    call that you are most likely to need, but there is another that gives you all elevator groups
    that your operator can view, rather than the smaller set of groups your operator can use in a
    cardholder edit.

    ### Use cases

    ### Choosing and setting a cardholder's default floor

    Your client will first need to list all elevator groups, and the floors and access zones on
    those elevator groups, so that it can pick from them (if knows them by name already) or present
    a list and allow a user to pick one (if it is interactive).

    Then it will need to send a PATCH back to the cardholder to set his or her default floor for an
    elevator group.

    #### Listing elevator groups and their access zones

    1. `GET /api`.
    2. Follow the link at `features.cardholders.modifyPassengerDetails.href`, appending a search term
       such as `name=substring` to filter the selection if you have a lot of elevator groups.
    3. Find the elevator group you are after, following the `next` link if you have lots of elevator
       groups.
    4. Look in the `floorAccess` array for the floor names and access zone names you can use for
       picking the floor, and the access zone hrefs to use in the
       [PATCH](cardholders.html#operation--api-cardholders--id--patch) coming up.

    #### Setting a cardholder's default floor

    1. [Find the href](cardholders.html#tag-Cardholders) for the cardholder.
    2. [PATCH](cardholders.html#operation--api-cardholders--id--patch) it with a [request
       body](cardholders.html#definition-Cardholder-PATCH-example) containing the hrefs of the
       elevator groups and access zones you wish to set as that cardholder's defaults.

- name: "Events"
  description: |
    Use the GET methods in this API for historical searches or to stay up to date with new events as
    they occur.  Use the POST method (added in version 8.10) to create events of your own.

    There are no PATCH actions on events, because they are immutable.  If an event is also an alarm
    it carries some changeable state and a log of activity and comments, but the underlying event
    never changes.

    The API only returns events that are still in Command Centre's database.  It will not return
    events that have been removed, even if they are in an archive file.

    ### Location events in 9.00

    Command Centre has about 80 event types that occur when somebody authenticates at a device,
    usually by badging a card.  Some of those event types also contain the access zones that the
    person started and finished in.  Version 9.00 introduced some improvements that presented the
    cardholder and the two zones to API clients in a consistent way:

      * A new event type `hasLocation` that lets you filter for only those events that reveal a
        cardholder's location.  If your server is 9.00 or better, use it in the `type` query
        parameter as you would normally use an integer event type:  `type=hasLocation`.  Gallagher
        will update this as new versions add more event types.  Do not use it on 8.90 or earlier:
        those servers will reject it.

      * A new `location` block on events of those types that contains fields containing the
        cardholder and their location.

    For more on using these new features, see the relevant use case below (search for 'location').
 
    ## Event use cases

    ### Downloading the entire event database
    1. `GET /api`
    2. Follow the link at `features.events.events.href` [↪](#operation--api-events-get).  You
       can add query parameters to alter the search.  If you are running 8.70 or later and there
       is a danger that you might encounter a problem while processing a batch of events you should
       also use `fields` to get the `next` link for each event.  Note that this is different from
       the `next` link you receive at the end of each result set.
    3. Process the events you receive in that call.  If you asked for the `next` field, write the
       link for each event you successfully process to disk before attempting the next one.  Then,
       if the worst happens, your client can read that link from disk and pick up where it left off.
    4. If there were results, follow the link at `next.href` and repeat.

    If you then wish to stay up to date, switch to following the link at `updates.href`
    [↪](#operation--api-events-updates-get) in the results.  That call will block until more
    events arrive, or a minute passes (approximately).

    ### Downloading the most recent events
    1. `Get /api`
    2. Take the link at `features.events.events.href` [↪](#operation--api-events-get) and
       append `previous=true&top=20`.  Add the appropriate query separator `?` or `&` first,
       depending on whether there is a query parameter in the URL already, and change the 20 as
       appropriate.  The default is 1000, which is probably more than you want.
    3. Process the events you receive in that call.
    4. Follow the link at `previous.href` to get earlier events, or `next.href` or `updates.href`
       for later events.  The last is a long poll, which means that if no events are ready when
       you make the call it will block until new events arrive.
    
    ### Reporting on events over a period.
    1. `GET /api`
    2. Follow the link at `features.events.events.href` [↪](#operation--api-events-get) appending
       `after=2017-01-01Z&before=2017-02-01Z` or whatever timestamps are appropriate (after the
       correct query separator, `?` or `&`).

    Remember that some remote systems take their time sending events to Command Centre, so
    do not be too hasty running your reports.  If you fire them off at the stroke of
    midnight, you may miss events that occurred before midnight but have not yet arrived
    at Command Centre.

    ### Receiving new events as they occur, starting from now
    1. `GET /api`
    2. Follow the link at `features.events.updates.href`
       [↪](#operation--api-events-updates-get) adding query parameters containing your search
       terms.  The call will block until at least one matching event arrives at the server.
    3. Process the events you receive in that call.  Often there is only one:  the first that
       arrived after you made the call.
    4. Sleep to reduce load on the server.
    5. Loop, following the link at `updates.href` after processing each batch of events.  It will
       return immediately if there are new events waiting, or it will block until new events arrive.
       Follow the advice in [downloading the entire event
       database](#downloading-the-entire-event-database) about keeping track of your position if you
       might encounter a problem writing events mid-batch.  Note that that advises using the `next`
       field, but you will be using the `updates` field, which is the same thing in long-poll form.

    ### Receiving new events as they occur, starting from now, with no long polls
    1. `GET /api`
    2. Follow the link at `features.events.events.href` [↪](#operation--api-events-get) and append
       `previous=true&top=1`.  Add the appropriate query separator `?` or `&` first, depending on
       whether there is a query parameter in the URL already.  The call will return one event (which
       you can ignore) and a `next` link you'll need later.
    5. Sleep and loop, following the link at `next.href` after processing each batch of events.  It
       will return immediately whether or not there are new events waiting.  Follow the advice in
       [downloading the entire event database](#downloading-the-entire-event-database) about keeping
       track of your position if you might encounter a problem writing events mid-batch.

    ### Receiving new events as they occur, starting in the past
    1. `GET /api`
    2. Follow the link at `features.events.events.href` [↪](#operation--api-events-get) appending
       the query parameter `after=2021-05-08Z` (or whatever timestamp is appropriate).
    3. Process the events you receive in that call.
    4. Sleep to reduce load on the server.
    5. Loop, following the link at `updates.href` after processing each batch of events.  It will
       return immediately if there are new events waiting, or it will block until new events arrive.
       Follow the advice in [downloading the entire event
       database](#downloading-the-entire-event-database) about keeping track of your position if you
       might encounter a problem writing events mid-batch.  Note that that advises using the `next`
       field, but you will be using the `updates` field, which is the same thing in long-poll form.

    ### Searching for events related to particular cardholders
    1. `GET /api`

    2. Follow the link at `features.items.items.href` [↪](#operation--api-items-get), adding
       `name="your_cardholder_name"&type=1` to the query after the appropriate separator (`?` or
       `&`).

       The 'items' controller necessary for that step is available with the RESTEvents licence.  If
       you also have the RESTCardholders licence you could use the link at
       `features.cardholders.cardholders.href` [↪](cardholders.html#operation--api-cardholders-get)
       instead, adding a separator and `name="your_cardholder_name"`.

       In either case, remove the quotes if you want a substring search and can handle more than
       one cardholder in the results.
       
    1. Extract the item ID of your cardholder or cardholders from that page, repeating as
       necessary for additional cardholders.

    1. Follow the link on the `/api` page at `features.events.events.href`
       [↪](#operation--api-events-get) appending the separator and `cardholder=XX` or
       `cardholder=XX,YY,ZZ` with the cardholders' IDs.

    To further improve the efficiency of your search, filter by event types and a time
    range.

    ### Searching for events that indicate location or movement

    If your server is running 8.60 or earlier, use the search filter
    `type=20001,20002,20003,20047,20107,15582,15583,15800,15808,42415`.  That is not a complete list of movement event
    types but it includes the popular ones.

    If your server is running 8.70-8.90 inclusive, give your operator the 'View cardholder events'
    privilege instead of 'View events'.  Then you can request all events, and the server will only
    send you movements because that is all your operator is permitted to see.

    If your server is running 9.00 or later, the 'View cardholder events' privilege is still an
    excellent idea to limit your operator's vision but you can also use the search filter
    `type=hasLocation&fields=location` (with a leading `?` or `&` of course, and more fields if you
    need them).  That will limit the results to location events.

    When using a server at version 9.00 or better:

    1. `GET /api`

    2. Get the URL of the head of the event queue by following the link at
       `features.events.updates.href` [↪](#operation--api-events-updates-get) appending
       `type=hasLocation&fields=location` with the appropriate query separator `?` or `&` depending
       on whether there is a query parameter in the URL already.  The call will block until a new
       location event arrives.

    5. If this is your first time here you will have an array containing one event.  If you looped
       up from a later step, the array may contain many more.  In any case, process all the events
       in the results using the advice immediately below about interpreting the `location` block.
       Also follow the advice in [downloading the entire event
       database](#downloading-the-entire-event-database) about keeping track of your position if you
       might have to abort mid-batch.  Note that that advises using the `next` field, but if you
       want long polls you will be using the `updates` field.

    4. Sleep for a short time to reduce load on the server.

    5. Follow the link at `updates.href` for a long poll that waits for new events to arrive, or
       follow `next.href` for a call that will return immediately even if there are no new events
       for you.

    6. Loop up to process the events you received.

    Interpreting the `location` block:

    * If you are simply after a person's location and do not care how they arrived there, use the
      `afterLocation` block inside `location`.  The `canonicalTypeName` field in there will tell you
      what kind of location it is (reception or access zone).  The [schema definition](#definition-EventDetail) describes
      `afterLocation` in more detail.

    * If you are after movements, which happen when a door grants a person access or an operator
      moves them on a tag board or via the API, and happen to some types of visitors when their host
      moves, ignore all events except those that have a `location.type` of `moved`.  Look at the
      `afterLocation` to see where they landed.  There will also be a `beforeLocation` if the door
      had two zones configured on it, in case you're interested in where they came from.  The
      `canonicalTypeName` field in both blocks will tell you what kinds of item they are.

    * If you are after denials, which happen when a person authenticates but fails the access check,
      look at the events that have a `location.type` of `denied`.  Like 'moved'-type events,
      `location.afterLocation` will show where they ended up.  The difference is that with
      'denied'-type events, they started there too.

    Each of those fields is covered in the [schema definition](#definition-EventDetail).

    Be aware that the events you receive are limited to those with a source item that is in a
    division in which your operator has a privilege that allows viewing events.  In 9.00 those
    privileges are 'View Events' and 'View Cardholder Events', and of course 'Advanced User'.  That
    makes this API unsuitable for handling emergencies such as evacuations if your operator's view
    is limited:  if your operator does not have the privilege to view events generated by a
    particular door, this API will not tell you about movements through that door.

    ### Searching for events coming from other items

    Events such as 'access granted' and 'zone count maximum' come from doors and access zones.  To
    search for them, follow the same process as the previous use case (getting cardholder events)
    but use the `source` filter parameter instead of `cardholder`.  It will limit the results to
    just those events that came from the items you gave in the query.  If you have the RESTStatus
    licence (added in v8.00), you can use [that API](rest.html) to search for access zones, alarm
    zones, fence zones, macros, outputs, doors, and (in 8.10) inputs.  If you do not, or if your
    source is not one of those types, use the [items API](#tag-Items) with a suitable `type` filter.

    You can also use the `type` parameter to limit the events to particular event types.  By doing
    this you can (for example) subscribe to 'access granted' events from a collection of doors.

    New in v8.70, you can also filter by `relatedItem`. Use this to find events related
    to item or items regardless of the type.

    ### Creating a new event

    1. `GET /api`
    2. POST to the link at `features.events.events.href` [↪](#operation--api-events-post)

    There are some rules around creating events, so you should first have a careful read of the
    [POST documentation](#operation--api-events-post).

    ### Listing all event types

    1. `GET /api`
    2. GET the link at `features.events.eventGroups` [↪](#operation--api-events-groups-get)

    That will return all event types in their groups.
    
    ## Licensing

    * The GETs that collect alarms and events require the RESTEvents licence.

    * The POST that creates events requires RESTCreateEvents.

    * The GET to collect event types requires RESTEvents or RESTCreateEvents.
    
    ## Efficiency tips

    * Use search parameters to reduce the filtering burden on the server.

    * When downloading a significant number of events, leave `top` at 1000 or more,
      provided your client can handle results over a megabyte (events are
      around 1 KB each).  Performance tests have shown that throughput decreases
      dramatically if `top` is too low.

    * If using 8.40 or later, use its `field` query parameter to cut back on the fields the server
      sends to you.  Not only will it save bandwidth, but it will save the server looking up all
      those values and serialising them for you.
        
    * If you are using the `updates` link to keep up to date with events, sleep between calls for as
      long as your requirements allow.  Doing that will improve the likelihood of your collecting
      more than one event when it is busy.<br>For example, if Command Centre is generating ten
      events per second and you do not sleep between REST calls, you will be calling `updates` ten
      times per second for one event each time.  However if you sleep for two seconds after each
      call you will receive 20 events at a time, saving CPU and I/O.

    

- name: "Fence Zones"

  description: |
    These methods give you read access to Fence Zones in the Command Centre database, and
    let you turn them on and off, change their modes, and shunt them.

    The first use case below introduces the main entry point.  It is a paginated search interface
    that gives you any number of fence zones, each containing the fields you ask for in the query.

    ### Fence Zone status flags

    If the fence zone is online, its `statusFlags` field may contain one or more of these flags:

    - `notPolled` means the fence zone is shunted, which means intentionally ignored, and is
      essentially offline.
    - `overridden` means just that.
    - `deterrentUnknown` means the controller cannot determine the state of the fence zone.  This
      happens when there is a cabling problem between the C6000 and the fence controller
      (energiser).
    - `on` means the fence zone is live, energised.  Take care.
    - `off` means the fence zone is off.
    - `lowFeel` means the fence energiser is delivering enough voltage to detect disturbances.
      Depending on the fence zone's configuration, it may also be a deterrant.
    - `highVoltage` means the pulse is delivering a deterrant pulse.
    - `hVPlusMode` means the fence voltage has increased in response to a disturbance.  After some
      time or an override it will leave this mode.  See the description of HVPlus mode in the
      Configuration Client's online help.
    - `serviceMode` means a technician has manually forced service mode at the fence controller.
      This safety measure prevents a Command Centre operator energising a hardware technician.
    - `voltageKnown` means Command Centre has the current voltage for the zone, provided there has
      been at least one pulse from the energiser recently.  This can only happen when the zone is
      on, obviously.  The 'voltage' field will contain the voltage at the last pulse.
    - `alert` means the fence voltage is outside the alert range.  Typically this means an electical problem.
    - `warning` means the fence voltage is between the alert and warning ranges.  Typically this
      means it has grounded somewhere.
    - `preArm` means the zone is performing its pre-arm check.
    - `lockedOut` means the zone has been locked out at a keypad.
    - `parentAlert` means there is a problem with the fence controller.

    #### Fence Zone flag rules

    - If and only if the fence zone is online, there will be exactly one of 'deterrentUnknown',
      'on', or 'off'.  That is your test for whether a fence zone is in error.
    - If 'on', there will be exactly one of 'lowFeel', 'highVoltage', or 'hVPlusMode'.
    - If 'off', there will be exactly one of 'lowFeel' or 'highVoltage'.
    - 'hVPlusMode' will only appear if the fence zone is on.
    - If there is 'alert' there will never be 'warning'.
    - None of the flags above will appear if the fence zone is offline and only 'notPolled'
      will appear if it is not polled.  
    - The 'voltage' field only contains a valid value if you receive 'voltageKnown' and the
      energiser has pulsed at least once since the zone turned on.

    ### Use cases

    #### Searching for fence zones by name
    1. `GET /api`.
    2. Follow the link at `features.fenceZones.fenceZones.href`
       [↪](#operation--api-fence_zones-get), appending a search term such as `name=substring` to
       filter the fence zones, and `fields` to tell the server what to return about each.  The next
       section covers those query parameters.
    3. Process the results, following the `next` link until there isn't one.

    #### Overriding a fence zone
    1. Find the href for the fence zone using the process above.
    2. GET it.
    3. Find the API URL you require in the `commands` structure of the results, such as
    `off`, `highVoltage`, or `shunt`, from [the detail](#definition-Fence-Zone-detail).
    4. POST to that URL.  You do not need to send anything in the body of the POST.

    #### Finding a fence zone's status
    1. Find the href for the fence zone using the process above, and GET it.
    3. Take the `updates` [↪](#operation--api-fence_zones--id--updates-get) href from that page.  If
       you are after the fence's voltage and are using version 8.00, append
       `fields=defaults,voltage` (after a `?` or `&`).  You do not need that for later versions as
       `voltage` became a default field in 8.10.
    4. GET it.
    4. Use the flag rules above to interpret the status flags you receive.
    5. Follow the `next` link to stay up to date.

- name: "Inputs"
  description: |-
    These methods, introduced in v8.10, give you read and override access to Input items.
        
    The first use case below introduces the main entry point.  It is a paginated search interface
    that gives you any number of inputs, each containing the fields you ask for in the query.  You
    can, for instance, ask for the URLs you need to shunt or isolate an input.

    ### Input status flags

    Even though the Configuration client lets you set your own state names for open, closed,
    tampered open, and tampered short, status flags will always use 'closed' or 'open', and possibly
    'tamper'.

    Two-state inputs cannot report a tamper, because it is impossible to detect.  They can only be
    open or closed.  Hence the name.

    Three-state inputs can report a tamper, but only one of tampered open or tampered closed,
    depending on their end-of-line resistance settings.

    Four-state inputs can report tampered open (an open circuit) or tampered closed (a short).

    If the input is online, its `statusFlags` field may contain one or more of these flags:

    - `closed` means the input circuit is closed.
    - `open` means the input circuit is open.

    - `tamper` means the input circuit is shorted or open.
    - `notPolled` means the input is shunted, which means intentionally ignored, and is essentially
      offline.
    - `isolated` means the input state will not prevent arming an alarm zone.

    #### Input flag rules

    - If and only if the input is online and not shunted ('notPolled' status flag), exactly one of
      'closed' or 'open' will appear.
    
    - 'closed' or 'open' may still appear if the input is tampered.

    So, to establish if the input is in a completely normal state, look for 'closed' or 'open', and
    make sure 'tamper' is _not_ there.  However bear in mind that inputs are often shunted for
    ordinary reasons.

    ### Use cases

    #### Listing Inputs
    1. `GET /api`.
    2. Follow the link at `features.inputs.inputs.href`, appending a search term such as
       `name=substring` to select the inputs, `top` if you expect lots of them, and `fields` to tell
       the server what to return about each.  The next section covers those query parameters.
    3. Process the results, following the `next` link if there is one.

    #### Overriding an Input
    1. Find the href for the input using the process above.
    2. GET it.
    3. Find the API URL for the override you need in the `commands` structure of the
       [results](#definition-Input-detail).
    4. POST to that URL with an empty body.

    #### Finding an input's status
    1. Find the href for the input using the process above, and GET it.
    3. Take the `updates` [↪](#operation--api-inputs--id--updates-get) href from that page.
    4. GET it.
    4. Use the flag rules above to interpret the status flags you receive.
    5. Follow the `next` link to stay up to date.

- name: "Interlock Groups"
  description: |-
    These methods, yet to be released, will give you read access to Interlock Group items.
        
    **API support for interlocks is still in development and may change in future versions.**

    The first use case below introduces the main entry point.  It is a paginated search interface
    that gives you any number of interlock groups, each containing the fields you ask for in the
    query.  You can, for instance, ask for the IDs you need to monitor their status.

    ### Interlock Group status flags

    If an interlock is not in an error state it will return one flag out of the following set:

    - `secure` means the interlock items are closed and the door/s will open to a badge.  This is
      probably where an interlock group spends most of its time.

    - `open` means the interlock's doors will not open because at least one of the other items in
      the group already is.  This is a normal state after someone gains access at an interlock door.
      It will last until the door closes.

    - `overridden` means the interlock group has received a disable override.  Doors will open as
      normal.

    - `forced` means that the interlock rules have been breached.  This could be because someone
      forced a door, or used an emergency release while another door was already open.

    If an interlock is completely normal it will report 'secure' or 'open'.

    ### Use cases

    #### Listing Interlock Groups
    1. `GET /api`.
    2. Follow the link at `features.interlockGroups.interlockGroups.href`, appending a search term
       such as `name=substring` to select the interlocks, `top` if you expect lots of them, and
       `fields` to tell the server what to return about each.  The next section covers those query
       parameters.
    3. Process the results, following the `next` link if there is one.

    #### Finding the status of many items including an interlock group
    1. Find the IDs of all the items you're interested in, including the interlock group, by
       searching for them with a query parameter appended such as `fields=name,id`.
    2. Create a [status subscription](events.html#status-subscriptions) for those items.

    #### Finding the status of an interlock group
    1. Find the href for the interlock using the process above, and GET it.
    3. Take the `updates` href from that page.
    4. GET it.
    4. Use the flag rules above to interpret the status flags you receive.
    5. Follow the `next` link to stay up to date.

    #### Overriding an Interlock Group
    1. Find the href for the interlock using the process above.
    2. GET it.
    3. Find the API URL for the override you need (disable or re-enable) in the `commands` structure
       of the [results](#definition-Interlock-Group-detail).
    4. POST to that URL with an empty body.

- name: Items
  description: |

    These methods let you find items for your search filters and events, and monitor their states.
    They return all items, including those that this API does not yet support in depth, and items
    added by customisations.  However because they do not have deep knowledge of item types they can
    only give you the most basic fields.

    ### Searching for items

    Use the search methods when you are building a filter for an [event
    search](#operation--api-events-get) or a [status
    subscription](#operation--api-items-updates-post) and need the ID of an item or an item type, or
    when you are [creating an event](#operation--api-events-post) and need an href to use as the
    event source.

    To find an item, pass a substring of its name to the link at `features.items.items.href` in the
    results of a call to `/api`.  If you are sure of its name, place the name inside `"` quotes, and
    it will use a full string match.  Both types of search are case-insensitive.

    To limit the search to items of a particular type, first get the ID of the type you
    are after using the link at `features.items.itemTypes.href` in the results of `GET /api`.
    Add that ID as the `type` parameter to the call above.  You can specify multiple item
    types if, for example, you are interested in all the different kinds of doors.

    For example, if you were after a list of divisions, following the instructions above on the
    current versions of Command Centre would produce the URL `/api/items?type=15`.

    ### Status subscriptions

    The [item-specific APIs](rest.html) monitor only one item at a time, and are therefore not
    suitable for watching large collections.  If you have CC version 8.30 or later, you should use
    the status subscription methods instead.  We have tested subscriptions of 1000 items without
    noticing undue strain on the server.  While the calls do not impose an upper bound on that we
    suggest keeping a watchful eye on the performance of the overall system if you go much higher.

    The basic operations for monitoring item states is:

      1.  Get all the IDs of the items you wish to monitor.  You can do that using this API's own
      [search](#operation--api-items-get) with a `name`, `division`, or `type` parameter.  If you're
      searching by division you'll need a division ID which (slightly recursively) is best found by
      using the same search function filtering for just divisions.  If you're searching by type
      you'll need a [type ID](#operation--api-items-types-get).

      1.  [POST](#operation--api-items-updates-post) to create a subscription.  Your program should
      get the URL from `items.updates.href` in the results of `GET /api`.

      1.  Take the current state of your items from the results of that call.  If that's all you
      need, terrific.  But if you want to monitor their state, continue.

      1.  [GET](#operation--api-items-updates-get) the
      `next.href` link that came in the results.  The call will block until one of your
      monitored items changes state.  When it returns, the results will be in the same format as the
      result of the POST, including the `next` link.

      1.  Goto 4.

    ### Licensing

    Every REST licence enables the items controller:  RESTEvents, RESTCreateEvents, RESTCardholders,
    RESTStatus, and RESTOverrides.

- name: Lockers
  description: |

    The locker bank API exists for two purposes:  finding a locker to assign a cardholder to, and
    integrating with operational locker management software that expects a bank-centric view rather
    than the cardholder-centric view available in the cardholder API.  So a locker bank's detail
    page shows all its cardholder assignments.

    You cannot use the API to create or configure lockers or banks, or to see the
    hardware features of a locker such as readers, inputs, and outputs, nor the door-like
    settings on the bank such as the lock type and unlock time.  The locker configuration tool
    exists for this purpose.

    To change the cardholder assignments you should PATCH the cardholder's href, since it is the
    cardholder you are updating, not the locker.  The locker bank API supplies that URL.

    ### Locker status flags

    Regardless of whether a locker is online or not, its status may contain these:

    - `quarantined` means the locked cannot be allocated to a cardholder.  It needs a clean, in
      other words.

    - `allocated` means it is allocated to a cardholder, so another cardholder using a T20 reader
      cannot self-allocate it.

    - `free` means it is not allocated to a cardholder.

    If the locker is online, its `statusFlags` field may contain one or more of these flags:

    - `forced`, `openTooLong`, `tamper`, `closed`, `open`, `locked`, `unlocked`, the same as a
      [door](rest.html#tag-Doors).

    ### Locker status flag rules

    - If `quarantined` is in the status flags, `allocated` and `free` will not.

    - If not quarantined, a locker will report exactly one of `allocated` or `free`.

    - Like a door, if and only if the door is online, exactly one of the `closed` or `open` flags
      will be there and one of `locked` or `unlocked`.
    
    ### Use cases

    #### Displaying all banks and lockers, and the cardholders assigned to them

    1. `GET /api`
    2. Follow the link at `features.lockerBanks.lockerBanks.href`
       [↪](#operation--api-locker_banks-get), adding a search term to the query to thin out the
       results.
    3. Follow the href of the locker bank you are after.

    The results of that query are the [locker bank detail](#definition-Locker-bank-detail).

    #### Assigning a locker to a cardholder

    1. Find the href of the locker, as above.  Normally one that does not have someone already allocated.

    1. Find the href of the cardholder using the [cardholders
       API](#operation--api-cardholders-get).

    3. [PATCH](#operation--api-cardholders--id--patch) the cardholder with the locker's
       href in a property called `locker` in an element of an array called `lockers.add`.
       Add `from` and `until` properties as you like.

    #### Opening or quarantining a locker

    Command Centre version 8.10.1112 lets you use the 'fields' parameter on the locker bank search
    to request the 'open' override URLs for lockers, which in prior versions was only available on
    their details pages.  Version 9.10 adds the ability to quarantine lockers, which prevents anyone
    from allocating them to a cardholder.

    1. `GET /api`
    2. Follow the link at `features.lockerBanks.lockerBanks.href`
       [↪](#operation--api-locker_banks-get), adding `?` or `&` as appropriate then
       `fields=name,lockers.name,lockers.shortName,lockers.commands`.  Also add a search term to
       thin out the results, if you have a lot of locker banks.
    3. Dig through the results for your locker bank, then through the `lockers` array of that locker
       bank for your locker, then into the `commands` block of that locker for another block called
       `open` or `quarantine`, depending on your need.  If your operator is able to override that
       locker, that block will contain a field called `href` which gives the URL you need to
       POST to open the locker ([open](#operation--api-lockers--id--open-post), for example).

- name: "Macros"
  description: |
    These methods give you read access to basic data about the Macros in the Command
    Centre database, and let you run them.

    Reading the section 'Understanding Macros' in the Configuration client help is an
    excellent way to do exactly that.

    The first use case below introduces the main entry point.  It is a paginated search interface
    that gives you any number of macros, each containing the fields you ask for in the query,
    including (for example) the URL you need to run the macro.

    You cannot use the REST API to change a macro's schedule.  You must use the Command
    Centre or Configuration client for that.

    ### Overrides

    You can use this API to run a macro.  That is the only override they accept.
    
    ### Macro status flags

    Being very simple creatures macros normally bear no flags of status, but an experimental
    addition to version 9.30 adds the flag `closed` while a macro is running.  If you have
    subscribed to status updates you will see this flag flash past, but if you simply ask for a
    macro's status on your own schedule you are very unlikely to strike it during the extremely
    brief time it is active.

    This is a feature meant for Gallagher clients only.  A future version may change the flag's
    name so we suggest avoiding it for now.

    ### Macro flag rules

    * Do not rely on `closed` meaning that the macro is running.
    
    ### Use cases

    #### Listing Macros
    1. `GET /api`.
    2. Follow the link at `features.macros.macros.href`
       [↪](#operation--api-macros-get), appending a search term (described below) to
       narrow the results if your installation has a lot of macros.
    3. Process the results, following the `next` link until there isn't one.

    #### Running a Macro
    1. Find the href for the macro using the process above.
    2. GET it.
    4. If your operator is able to run the macro, the results will contain a URL at
       `commands.run.href`.  [POST](#operation--api-macros--id--run-post) to that to run the macro -
       no body required.

- name: Operator groups

  description: |

    An operator group is like an access group in that:
      - one may contain any number of cardholders, and
      - a cardholder can be a member of any number of operator groups.

    However:
      - there is no lineage:  an operator group has no parent,
      - memberships have no begin or end dates,

      - a cardholder can have only one membership per group (and, because of the previous point,
        needs only one),

      - operator group updates do not go to controllers, so editing them is a much cheaper
        operation.

    The biggest difference is in their purpose, of course.  They grant cardholders the use of
    software instead of doors.

    These API methods give you read access to the system's operator groups.  You can search them,
    list their cardholder members, and see the divisions into which they grant their privileges.
    The API will not tell you the privileges that they grant.

    Your REST operator will need either the 'View' or 'Edit Operators' operator privilege for those
    GETs.

    Operator groups first appeared in the API in version 8.50.

    ### Use cases

    These are practically identical to the operations you'd perform on an access group, simplified
    because of the lack of lineage.

    #### Finding members of an operator group, and managing memberships.

    1. `GET /api`.
    2. Follow the link at `features.operatorGroups.operatorGroups.href`
       [↪](#operation--api-operator_groups-get) (adding search terms, and setting `top` high to save
       pagination).
    3. Find your operator group.

    4. The link at `cardholders` returns the cardholders who have membership of your group.

    5. Get the link at `cardholders` (which is the same on the search results and the details page),
    look in that cardholder's `operatorGroups` array, and manage each membership as you require.
    Send a DELETE to a membership's href to remove it, or an HTTP PATCH to the cardholder href to
    update it.

- name: "Outputs"
  description: |-
    These methods give you read access to Outputs in the Command Centre
    database, and let you override them.

    The first use case below introduces the main entry point.  It is a paginated search interface
    that gives you any number of outputs, each containing the fields you ask for in the query,
    including (for example) the URLs you need to switch the outputs on and off.

    ### Override times

    1. End-times on overrides are not accurate to the second.  Internally, Command Centre
       converts the end time to a duration, so you may find that submitting end times in
       the very near future does not have the exact effect you expect.
    2. The end time you set for an override cannot be in the past or more than 24 hours
       into the future.

    ### Overrides always use 'on' and 'off'
    
    The Configuration client allows you to assign different display strings to the two normal output
    states, on and off.  On could be 'green', for example, and off could be 'red'.  Regardless, the
    overrides you apply to an output are called 'on' and 'off'.

    ### Output status flags

    Status flags, on the other hand, use the language of the relays on the hardware modules.  They
    will report 'closed' for an output that is on, and 'open' for one that is off.

    If the output is online, its `statusFlags` field may contain one or more of these flags:

    - `relayStateUnknown` means the controller does not know what the output should be doing.
    - `closed` means the output relay is closed.
    - `open` means the output relay is open.
    - `pulsed` means the relay's change in state is momentary.
    - `switchingDisabled` means switching this output is disabled.

    - `overridden` can appear whether the output is online or offline.  It means the output has an
      override in effect.

    #### Output flag rules

    - If and only if the output is online, one of 'relayStateUnknown', 'closed', or 'open' will
      appear.  That is your test for whether an output is in error.
    - Of the above, only 'overridden' can appear when the output is offline.

    ### Use cases

    #### Listing Outputs
    1. `GET /api`.
    2. Follow the link at `features.outputs.outputs.href` [↪](#operation--api-outputs-get),
       appending a search term such as `name=substring` to select the outputs, and `fields` to tell
       the server what to return about each.  The next section covers those query parameters.
    3. Process the results, following the `next` link until there isn't one.

    #### Switching an Output
    1. Find the href for the output using the process above.
    2. GET it.
    3. Look in the `commands` structure of the [results](#definition-Output-detail) to find the API
       URLs that turn the output on, off, or cancel a previous override.  Use the `until` variants
       if you want to specify an end time.
    4. POST to that URL.  Those with `until` in their command block keys require a JSON
       object in the body; the others expect it empty.

    #### Finding an output's status
    1. Find the href for the output using the process above, and GET it.
    3. Take the `updates` [↪](#operation--api-outputs--id--updates-get) href from that page.
    4. GET it.
    4. Use the flag rules above to interpret the status flags you receive.
    5. Follow the `next` link to stay up to date.

- name: PDF definitions
  description: |

    A Personal Data Field is an item that adds a custom value to a cardholder.  Each PDF has a type
    (text, image, numeric, ...) and optional constraints on the values that it can hold.  For
    example, text, email, and telephone number types can have a regular expression with
    which new values must match.  A date can have a maximum and a minimum.  Text PDFs can have a
    list of valid values, like an enumeration.  Mobile numbers and email addresses have a flag
    indicating whether they are suitable to receive SMS and email notifications.

    There is more configuration:  image PDFs have a type and size, to which Command Centre will
    transcode incoming images.  All PDFs have their own access level
    (hidden, read-only, or full access) that applies to operators in operator groups that do not
    expressly override it.

    Importantly, PDFs are attached to access groups.  A cardholder can have a value for a PDF only
    if he or she is a member of one of the PDF's access groups.

    This API lets you see the definitions and configuration of all the personal data fields in the
    system.

    API routes that allow creating, modifying, and deleting PDF definitions are in development.

    ### Use cases

    #### Finding all a cardholder's PDF definitions

    You can see all a cardholder's PDF *values* by looking in the `personalDataDefinitions` block of
    a [cardholder](#definition-Cardholder-detail).  But that will only show you the PDFs that the
    cardholder currently has values for -- it will not show you the blanks.  If you are writing an
    application that needs to find all the PDFs that a cardholder could carry, you will need this
    process.

    Recall that a PDF is attached to an access group and appears on all direct and indirect members
    of that access group.  To find a cardholder's PDFs, including those for which the cardholder has
    no value, you must find all the cardholder's groups, then find all the PDFs on those groups.

    1. GET the cardholder's access groups from the cardholder's detail page, or the search page
       with `accessGroups` added to the query's `fields` parameter.
    2. Iterate through the hrefs of those access groups, GETting each.  That will return their
       detail pages.
    3. For each access group detail page, record the names and hrefs from the
       `personalDataDefinitions` block and add the `parent.href` link to the list of groups to check
       (unless you have already seen it, of course).

    Now you have the names and hrefs of all the PDFs that cardholder can hold.

    #### Finding a PDF's regular expression

    1. `GET /api`
    2. Follow the link at `features.personalDataFields.personalDataFields.href`
       [↪](#operation--api-personal_data_fields-get), adding a search term to the query to thin out
       the results.  For example, add `name="PDF name"` to only return the PDF definitions with that
       name.

    #### Setting a cardholder's PDF value

    You do that by [PATCHing a cardholder](#definition-Cardholder-PATCH-example) with a field named
    after the PDF following an '@'.

- name: Receptions
  description: |
    A reception is an item that represents a location at which site visitors identify themselves,
    meet their hosts, and fulfil induction requirements.  Every visit item has a reception.  This
    controller gives you the list of receptions you can pick from when creating a visit.

    This controller is read-only.  It lets you pick a reception by name so that you can use its href
    on the visits controller.

    Receptions are new to 8.50.

    ### Use case:  finding a reception by name
    1. `GET /api`
    1. Follow the link at `features.receptions.receptions.href` [↪](#operation--api-receptions-get)
       after adding search terms such as `name="Front lobby"`.  A site typically has very few
       receptions, so if you add `top=1000` you're very unlikely to need to follow a `next` link.
    1. Find the reception you're after and use its href in a visit.

- name: Redactions
  description: |
    A _redaction_ is a process that removes one cardholder's personal information from Command
    Centre.  There are two kinds of redaction:

    An _event_ redaction disconnects a cardholder from events that record an operation that affected
    that cardholder.  Examples:

    - an operator created the cardholder,

    - an operator changed the value of one of the cardholder's PDFs,

    - an operator changed the cardholder's access group memberships, or

    - the cardholder moved through a door.

    An event recation does not affect a cardholder's history (visible in the enterprise clients).

    A _cardholder information_ redaction is absolute.  It clears all the data held against the item.
    After being redacted a cardholder has nothing that can identify it:  no names and no PDFs.

    The only way back from a redaction is a database restore.

    Because redactions can take some time, and should not be allowed to run immediately for security
    reasons, API clients can only schedule a redaction to occur at a future date.  After doing that
    you can check the progress of redactions, and cancel them.

    Exactly how far in the future a redaction needs to be depends on the site configuration.

    There are two ways to list redactions:  via their own paginated interface, which returns all the
    redactions in the system that your operator has the permission to view, or in the cardholder
    record.

    ### Performance

    In early tests with SQL Server and Command Centre on a Core i5, event redactions took roughly
    one second per 1000 affected events.  Logs and events generated when a redaction completes
    contain statistics you could use to calculate your own redaction rate, but expect them to vary
    with the other demands on the database at the time.

- name: "REST Clients"
  description: |-
    This lets you operate on the REST Client item that represents your application in Command
    Centre.

    ***This is still in development and may change behaviour before release.***

    ### REST Client status flags

    - `offline` means the item is configured with a keepalive time and it has not seen an API
    request in that time.

    - `faulty` means the item has used the endpoint in this section to declare itself in trouble.

    Because this feature is intended for REST integrations needing to indicate their status, this
    API is the only way to change a REST Client item's status fields.  Humans using Gallagher's
    operational and configuration clients can see it, but not change it.

- name: Roles
  description: |

    The roles API gives you basic information about Command Centre's role items so that you can use
    them to form relationships between cardholders.

    A role defines a relationship between two cardholders.  One cardholder can perform a role for
    many others but can have it performed for them by only one other.  For example, a person can be
    a supervisor for many people but has only one of his or her own.

    When you use REST to look up or update a cardholder, you will work on the 'has a' relationships,
    not the 'is a' relationships.  In other words, when a role represents a connection between a
    person and their supervisor, the API lets you change a cardholder's supervisor but not who the
    cardholder supervises.

    API routes that allow creating, modifying, and deleting roles are in development.

    ### Use case:  searching for a role by name and assigning a relationship

    1. `GET /api`
    1. Follow the link at `features.roles.roles.href` [↪](#operation--api-roles-get) after adding
       search terms such as `name="supervisor"`.
    1. Find the href of the role with which you want to link your two cardholders.
    1. Find the href of the cardholder who will perform this role (the supervisor).
    1. Find the href of the cardholder for whom he or she will perform this role (the supervised).
    1. [PATCH](#operation--api-cardholders--id--patch) the second cardholder (the supervised) with
       the href of the first cardholder (the supervisor) and the href of the role.  Here is an
       [example PATCH](#definition-Cardholder-PATCH-example).

- name: "Schedules"
  description: |-
    These methods give you read/write access to seven types of schedules.  Avigilon Engage schedules
    are not included.

    The main entry point is a paginated search that gives you any number of schedules.  The most
    useful field on a schedule is a list of state changes and the days and times that those changes
    should occur.

    There is also a method that allows creating new schedules.

    Schedules are new to 8.50.

    **Licensing**

    The schedules APIs are licensed a little differently from most others.  RESTCardholders gives
    you Cardholder Access Schedules, while RESTStatus and RESTOverrides give you all schedule types.

- name: Visits
  description: |

    Visits are new to 8.50.

    ### Use case:  finding a visit by name
    1. `GET /api`
    1. Follow the link at `features.visits.visits.href` [↪](#operation--api-visits-get) after adding
       search terms such as `name=Ginger Greeter`.  A site typically has many visits, so add
       `top=1000` for efficiency's sake.
    1. Find the visit you're after.  You can then modify it by PATCHing its href.

    ### Use case:  creating a visit
    1. Find the href of the [reception](#tag-Receptions) at which your visitors will arrive.
    1. Look at the visitor management configuration for your reception's
       [division](events.html#definition-Division).
    1. Pick a visitor type from that configuration, and a host from that visitor type's host access
       groups, and (optionally) some visitor access groups from that visitor type's visitor access
       groups.
    1. Pick (or create) at least one cardholder for your visitor or visitors.
    1. Build a [JSON payload](#definition-Visit) containing all that.
    1. POST to the link at `features.visits.visits.href` [↪](#operation--api-visits-post) (in the
       payload of the `GET /api` you did for the first step).
    

